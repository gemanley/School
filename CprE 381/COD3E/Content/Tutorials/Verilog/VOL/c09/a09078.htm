<html>

	<head>
		<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">
		<title></title>
	</head>

	<body bgcolor="white">
				<table width="600" cellpadding="10">
			<tr>
				<td width="600">This is an implementation of a sparse memory data structure. There is a user-defined system task, $set_memory, and a user-defined system function, $get_memory. The address is 32 bits and the data is 32 bits.</td>
			</tr>
		</table>
		<table width="600">
			<tr>
				<td align="center" width="150"><a href="a09078.htm"><img src="images/vverilog.gif" height="39" width="139" border="0"></a></td>
				<td align="center" width="150"><a href="b09078.htm"><img src="images/vpli.gif" height="39" width="136" border="0"></a></td>
				<td align="center" width="190"><a href="c09078.htm"><img src="images/vuser.gif" height="39" width="177" border="0"></a></td>
				<td align="center" width="110"><a href="d09078.htm"><img src="images/vresults.gif" height="39" width="87" border="0"></a></td>
			</tr>
		</table>
		<p><br>
		</p>
		<table width="600">
			<tr>
				<td>
					<pre>
/* ex10_mem.v */
module ex10_mem;
&nbsp;
   reg [31:0] Areg;
   initial begin
      $monitor ( &quot;time=%0t, Areg=%0h(%0d)&quot;, $time, Areg, Areg );
&nbsp;
      //            address,      value
      $set_memory ( 1,            32'hFFFFFFFF );
      $set_memory ( 10,           1000 );
      $set_memory ( 100,          100 );
      $set_memory ( 1000,         10 );
      $set_memory ( 32'hFFFFFFFF, 1 );
&nbsp;
      #1 Areg = $get_memory ( 1 );
      #1 Areg = $get_memory ( 10 );
      #1 Areg = $get_memory ( 100 );
      #1 Areg = $get_memory ( 1000 );
      #1 Areg = $get_memory ( 10000 );
      // #1 $get_memory ( 32'hFFFFFFFF ); // Illegal
&nbsp;
   end
endmodule /* ex10_mem */
</pre>
				</td>
			</tr>
		</table>
	</body>

</html>