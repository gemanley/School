<html>

	<head>
		<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">
		<title></title>
	</head>

	<body bgcolor="white">
				<table width="600" cellpadding="10">
			<tr>
				<td width="600">This is an implementation of a sparse memory data structure. There is a user-defined system task, $set_memory, and a user-defined system function, $get_memory. The address is 32 bits and the data is 32 bits.</td>
			</tr>
		</table>
		<table width="600">
			<tr>
				<td align="center" width="150"><a href="a09078.htm"><img src="images/vverilog.gif" height="39" width="139" border="0"></a></td>
				<td align="center" width="150"><a href="b09078.htm"><img src="images/vpli.gif" height="39" width="136" border="0"></a></td>
				<td align="center" width="190"><a href="c09078.htm"><img src="images/vuser.gif" height="39" width="177" border="0"></a></td>
				<td align="center" width="110"><a href="d09078.htm"><img src="images/vresults.gif" height="39" width="87" border="0"></a></td>
			</tr>
		</table>
		<p><br>
		</p>
		<table width="600">
			<tr>
				<td>
					<pre>
/* ex10_mem.c */
#include &quot;acc_user.h&quot;
#include &quot;vcsuser.h&quot;
#include &lt;stdio.h&gt;
&nbsp;
typedef unsigned int UInt;
&nbsp;
typedef struct AMEM {
    UInt        address;
    UInt        value;
    struct AMEM *next;
} aMem, *aMemPtr;
&nbsp;
static aMemPtr topMem = 0;
&nbsp;

void setMem ( UInt address, UInt value )
{
    aMemPtr     tmpMem = (aMemPtr) malloc ( sizeof ( aMem ) );  
&nbsp;
    tmpMem-&gt;address = address;
    tmpMem-&gt;value = value;
    tmpMem-&gt;next = topMem;
    topMem = tmpMem;
}
&nbsp;
/* return 0 if memory not found */
UInt getMem ( UInt address )
{
    aMemPtr     tmpMem = topMem;
&nbsp;
    while ( tmpMem != 0 ) {
        if ( tmpMem-&gt;address == address ) {
            return tmpMem-&gt;value;
        }
        tmpMem = tmpMem-&gt;next;
    }
    return 0;   /* not found */
}
&nbsp;
int sparsMemory ( int data )
{
    int         address;
    int         value;
&nbsp;
    switch ( data ) {
      case 1: /* This is a set_memory call */
        address = acc_fetch_tfarg_int (1);
        value = acc_fetch_tfarg_int (2); 
        setMem ( address, value );
        break;
&nbsp;
      case 2: /* get memory */ 
        address = acc_fetch_tfarg_int (1);
        value = getMem ( address );
        tf_putp ( 0, value );
        break;
    }
}
</pre>
				</td>
			</tr>
		</table>
	</body>

</html>