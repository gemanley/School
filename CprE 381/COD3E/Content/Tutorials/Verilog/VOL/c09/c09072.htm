<html>

	<head>
		<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">
		<title></title>
	</head>

	<body bgcolor="white">
				<table width="600" cellpadding="10">
			<tr>
				<td width="600">The point of this example is to show how a user routine can inspect the structure of a model. This routine (power) gets called with a module instance name as the argument, and it uses that to find out how many drivers and how many loads each net in the module has.
					<p>New utility routines used:</p>
					<p>acc_next_net ( module, net )<br>
						Returns a handle to the next net in the module instance. All the nets in the module are ordered (somewhat arbitrarily), so &quot;next&quot; means &quot;the one after this one&quot;, where &quot;this one&quot; is the one whose handle is the second parameter.</p>
					<p>acc_next_driver ( net, driver )<br>
						Returns a handle to the next driver for this net. Again, the drivers of each net are ordered.</p>
					<p>acc_next_load ( net, load )<br>
						Returns the next load on this net. This is the fan-out of the net.</p>
					<p>acc_fetch_fullname ( net )<br>
						Returns the full hierarchical name of the object.</p>
				</td>
			</tr>
		</table>
		<table width="600">
			<tr>
				<td align="center" width="150"><a href="a09072.htm"><img src="images/vverilog.gif" height="39" width="139" border="0"></a></td>
				<td align="center" width="150"><a href="b09072.htm"><img src="images/vpli.gif" height="39" width="136" border="0"></a></td>
				<td align="center" width="190"><a href="c09072.htm"><img src="images/vuser.gif" height="39" width="177" border="0"></a></td>
				<td align="center" width="110"><a href="d09072.htm"><img src="images/vresults.gif" height="39" width="87" border="0"></a></td>
			</tr>
		</table>
		<p><br>
		</p>
		<table width="600">
			<tr>
				<td>
					<pre>
#include &quot;acc_user.h&quot;
#include &quot;vcsuser.h&quot;
#include &lt;assert.h&gt;
#include &lt;stdio.h&gt;
 
int power ()
{
    handle      module = acc_handle_tfarg(1);
    handle      net = null;
    handle      driver, load;
    int         net_number = 0;
    int         grand_num_driver = 0;
    int         grand_num_load = 0;
    int         num_driver;
    int         num_load;

    while ( net = acc_next_net ( module, net ) ) {
        net_number++;
 
        driver = null; 
        num_driver = 0;
        while (driver=acc_next_driver(net,driver )) { num_driver++;}
        grand_num_driver = grand_num_driver + num_driver;
 
        load = null;
        num_load = 0;
        while ( load = acc_next_load ( net, load ) ) {num_load++;}
        grand_num_load = grand_num_load + num_load;
 
        io_printf ( &quot;net #%d, %s, has %d drives and %d loads\n&quot;,
                    net_number, acc_fetch_fullname ( net ),
                    num_driver, num_load );
    } 

    io_printf ( &quot;Grand total of %d drivers and %d loads\n&quot;,
                grand_num_driver, grand_num_load );
}
</pre>
					<p>This uses three acc_next_ routines, acc_next_net, acc_next_driver, and acc_next_load. Each call returns the next one, using the previous result as an argument.</p>
				</td>
			</tr>
		</table>
	</body>

</html>