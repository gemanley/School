<html>

	<head>
		<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">
		<title></title>
	</head>

	<body bgcolor="white">
		<table width="600" cellpadding="10">
			<td width="600">Click each of the complications to learn more about it.
				<p><a href="a07060.htm">Timing</a><br>
					<a href="b07060.htm">Efficiency</a><br>
					<a href="c07060.htm">Initialization</a><br>
					<a href="d07060.htm">Register Selection</a><br>
					<a href="e07060.htm">State Encoding</a><br>
					<a href="f07060.htm">Latch Inferencing</a></p>
				<p>It is often the case that you want to use a specific register type from the technology library that you are using, and do not want to rely on the synthesizer to pick it for you. In that case, you simply instantiate the register, and do not use the always loop. Here is our previous example, using a register type called RegX4, whose module header is given.</p>
				<p></p>
				<pre>
module RegX4 (      // this is defined in a library
    regOut,         // 4 bit output
    regIn,          // 4 bit input
    clkEnable1,     // both enables must be on
    clkEnable2,     //    for the flop to clock
    clock,          // clock
    scanShiftOut,   // scan chain output
    scanShiftIn,    // scan chain input
    scanShiftEnable // scan shiftin if 1
    );


module stateMachine (dout, din, clock, SSO, SSI, SSE);
    output dout;
    input din, clock;
    output SSO;
    input  SSI, SSE;

    reg [2:0] state, nextstate;
    initial state = `A;
    
    assign dout = state==`A ? 1 :       // Output Logic
                  state==`B ? 0 :
                  state==`C ? 1 : 1'bx;
    
    always @(state or din)              // Next State Logic
        case (state)
    `A:     nextstate = din ? `C : `B;
    `B:     nextstate = din ? `B : `C;
    `C:     nextstate = `A;
        endcase

    RegX4 stateRegister(                // State memory
            .regOut(state),
            .regIn(nextstate),
            .clkEnable1(1'b1),
            .clkEnable2(1'b1),
            .clock(clock),
            .scanShiftOut(SSO),
            .scanShiftIn(SSI),
            .scanShiftEnable(SSE)
            );
endmodule
</pre>
				If you instantiate registers like this, you lose some technology independence, but many designers find the control over the registers is worth it to them. It should be noted that there is usually a way to tell the synthesizer which register to use via a synthesis script.
				<p></p>
			</td>
		</table>
		</FONT>
	</body>

</html>