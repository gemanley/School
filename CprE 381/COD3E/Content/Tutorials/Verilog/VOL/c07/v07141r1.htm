<html>

	<head>
		<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">
		<title></title>
	</head>

	<body bgcolor="white">
		<BASEFONT="times" size"3">
		<table width="600">
			<b>Test</b>
			<p></p>
			<pre>
module test;
/*  
    test the opPipe
    generate an instruction stream
    when its done, check the register file
*/
    `define Ldi  3'b000
    `define Add  3'b001
    `define Sub  3'b010
    `define Not  3'b011
    `define Shfl 3'b100
    `define Shfr 3'b101

    reg [2:0] opcode;
    reg [3:0] r1, r2, res;
    reg clock;
    
    reg debug;              // global flag controls debug output
    initial debug = 0;
    integer errcnt;         // error counter
    initial errcnt = 0;
    
    
    opPipe op(opcode, r1, r2, res, clock);  // pipeline
    
    always begin                            // the clock
        #5 clock = 0;
        #5 clock = 1;
    end
    
    
    initial begin                           // test vectors
        inst (`Ldi, 1, 0, 1);
        inst (`Ldi, 0, 0, 0);   // bubble
        inst (`Add, 1, 1, 2);
        inst (`Ldi, 0, 0, 0);   // bubble
        inst (`Sub, 2, 1, 3);
        inst (`Not, 2, 0, 4);
        inst (`Shfl, 2, 2, 5);
        inst (`Add, 2, 0, 8);
        inst (`Shfr, 5, 2, 6);
        inst (`Shfl, 5, 1, 7);
        inst (`Shfl, 8, 8, 8);
        inst (`Add, 1, 0, 9);
        inst (`Ldi, 0, 0, 0);
        
        // now check results
        repeat (4) @(posedge clock);    // drain pipe
        
        $display(&quot;Registers:&quot;);
        check (1, 1);
        check (2, 2);
        check (3, 1);
        check (4, 32'hfffffffd);
        check (5, 8);
        check (6, 2);
        check (7, 16);
        check (8, 8);
        check (9, 1);

        if (errcnt)
            $display(&quot;* * * Test Failed * * *&quot;);
        else
            $display(&quot;* * * Test Passed * * *&quot;);
        $finish;
    end
    
    
    task inst;
        input [2:0] iopcode;
        input [3:0] ir1, ir2, ires;
        
        begin
            opcode 
				
				
				<= iopcode; r1 <= ir1;            r2 <= ir2;            res <= ires;          @(posedge clock) ;        end    endtask      task check;        input [3:0] rn;        input [31:0] val;                begin            $display("%d: %h", rn, op.rf.registers[rn]);            if (op.rf.registers[rn] !== val) begin                $display("*** Error: Register %0d is %h should be %h",                         rn, op.rf.registers[rn], val);                errcnt = errcnt + 1;            end        end    endtaskendmodule</PRE></TABLE></BODY></HTML>>> </pre> </table> </body> </html>>
				
			</pre>
		</table>
	</body>

</html>