<html>

	<head>
		<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">
		<title></title>
	</head>

	<body bgcolor="white">
		<table width="600" cellpadding="10">
			<td width="600">Representing FSMs explicitly is a better style than implicit coding, both because the code maps well to a state transition table and also because explicit representation is synthesizable.
				<p>In general, a state machine (Moore style) looks like this:</p>
				<p></p>
				<center>
					<img src="images/v0712g1.gif" height="182" width="400"></center>
				<p>The next state logic is combinational, and the state vector is updated synchronously.</p>
				<p>To do this in Verilog would look like this:</p>
				<p></p>
				<pre>
    reg [msb:lsb] state; 
    wire [msb:lsb] nextstate;

    assign nextstate = next(state, in); // Next State Logic
    
    always @(posedge clock)             // State Memory
        state = nextstate;
</pre>
				where <tt>next(state, in)</tt> is a function which contains the next state computation logic. (Next State Logic and <a href="javascript:parent.goGlossHash('#statemem')"><font color="#B22222">State Memory</font></a> will be covered in the following screens.)
				<p>In this style, notice that nextstate could change several times in a single cycle. If in changed more than once, so would nextstate. Only the last one would be effective, however.</p>
			</td>
		</table>
		</FONT>
	</body>

</html>