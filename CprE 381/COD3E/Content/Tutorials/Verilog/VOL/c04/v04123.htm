<html>

	<head>
		<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">
		<title></title>
	</head>

	<body bgcolor="white">
		<font size="3" face="Times"><a name="diagram">
				<table width="600" cellpadding="10">
					<tr>
						<td>This is a model of a 4-bit adder. It takes two 4-bit operands, inA and inB, and produces a 4-bit result, sum, and a 1-bit carry. It is composed of four 1-bit adders, each of which has a carry in as well as the two operand inputs.
							<p></p>
							<center>
								<a href="#source"><img src="images/vverilog.gif" height="39" width="139" border="0"></a></center>
							<p></p>
							<center>
								<img src="images/v0437g1.gif" height="381" width="460"></center>
							<p></p>
							<center>
								<a href="JavaScript:parent.dispWindow('v04123r1.htm','results')"><img src="images/vresults.gif" height="39" width="87" border="0"></a></center>
							<br>
							<br>
							<br>
							<br>
							<br>
							<br>
							<br>
							<br>
							<br>
							<br>
							<font size="3" face="courier"><a name="source">
									<pre><code>module ex2_1;
    /* gate level model to implement an adder */
    
    wire [3:0] sum, inA, inB;
    wire       carry;
    
    adder4 a4 (sum, carry, inA, inB);
    adderTest at (inA, inB, sum, carry);
endmodule


module adder4 (sum, carry, inA, inB);
    output [3:0] sum;
    output carry;
    input [3:0] inA, inB;
    
    adder1 a0 (sum[0], c0,    inA[0], inB[0], 1'b0);
    adder1 a1 (sum[1], c1,    inA[1], inB[1], c0);
    adder1 a2 (sum[2], c2,    inA[2], inB[2], c1);
    adder1 a3 (sum[3], carry, inA[3], inB[3], c2);
endmodule


module adder1 (s, cout, a, b, cin);  <img src="images/v0437g2.gif" align="right">
    output s, cout;
    input a, b, cin;
    
    xor (t1, a, b);
    xor (s, t1, cin);
    and (t2, t1, cin),
        (t3, a, b);
    or  (cout, t2, t3);
endmodule


module adderTest (A, B, sum, carry);
    output [3:0] A, B;
    input [3:0] sum;
    input carry;
    reg [3:0] A, B;
    
    integer i, j;
    initial begin
       $monitor (&quot;A: %d  B: %d sum: %d  carry: %d&quot;, A, B, sum, carry);
       for (i=0; i
											
											
											<16; i="i+1)" for (j="0;" j<16; j="j+1)" begin A="i;" B="j;" #1 ; end $finish; end endmodule </CODE> </PRE> </font> <A HREF="#diagram"> Return to Diagram</a>
											
											
											</b>&nbsp;&nbsp;&nbsp;<a href="#diagram"><img src="images/varrow.gif" with="38" height="39" border="0"></a>
</code></pre>
								</a></font></td>
					</tr>
				</table>
			</a></font>
	</body>

</html>