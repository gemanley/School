<html>

	<head>
		<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">
		<title></title>
	</head>

	<body bgcolor="white">
				<table width="600" cellpadding="10">
			<tr>
				<td>The assignment mechanics are pretty straightforward. The value of the right-hand side expression (<tt>rhs</tt>) is assigned to the left-hand side (<tt>lhs</tt>) register. Click each expression to learn about how it is evaluated.</td>
			</tr>
		</table>
		<p></p>
		<table width="600" border="1" cellpadding="5">
			<tr>
				<td>
					<table width="600">
						<tr>
							<td width="300" HALIGN="CENTER"><a href="b05084.htm"><tt>lhs = rhs;</tt></a></td>
							<td width="300" HALIGN="CENTER"><a href="c05084.htm"><tt>lhs[bit] = rhs;</tt></a></td>
						</tr>
						<tr>
							<td width="300" HALIGN="CENTER"><a href="d05084.htm"><tt>lhs[partmsb:partlsb] = rhs;</tt></a></td>
							<td width="300" HALIGN="CENTER"><a href="e05084.htm"><tt>{lhs1, lhs2} = rhs;</tt></a></td>
						</tr>
					</table>
				</td>
			</tr>
			<tr>
				<td>This case is similar to the bit-select case. The assignment requires partmsb-partlsb bits to be put into the lhs. So, that many bits are taken from the low order bits of the rhs expression and put into the part-select. Again, which bits are used depend on the declaration of the vector.
					<p></p>
					<pre>
        reg [0:7] lhs1;
        reg [7:0] lhs2;
        reg [8:1] lhs3;
        
        lhs1[1:3] = 3'b10x;     // _ 1 0 x _ _ _ _
        lhs2[3:1] = 3'b10x;     // _ _ _ _ 1 0 x _
        lhs3[3:1] = 3'b10x;     // _ _ _ _ _ 1 0 x
</pre>
				</td>
			</tr>
		</table>
	</body>

</html>