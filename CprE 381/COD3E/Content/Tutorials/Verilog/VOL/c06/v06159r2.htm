<html>

	<head>
		<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">
		<title></title>
	</head>

	<body bgcolor="white">
		<table width="600">
			<tr>
				<td>
					<pre>
`timescale 1 ns / 100 ps
module a2901(I,Aadd,Badd,D,Y,RAM0,RAM3,Q0,Q3,
             CLK,C0,OEbar,C4,Gbar,Pbar,OVR,F3,F30);

    input [8:0] I;
    input [3:0] Aadd, Badd;
    input [3:0] D;

    output [3:0] Y;
    reg [3:0] Y;

    inout RAM0, RAM3, Q0, Q3;
    reg t_RAM0, t_RAM3, t_Q0, t_Q3;

    input CLK, C0, OEbar;
    output C4, Gbar, Pbar, OVR, F3, F30;
    reg C4, Gbar, Pbar, OVR, F3, F30;

    reg [3:0] RAM [15:0];
    reg [3:0] RE, S, A, B, Q, F;

    reg [4:0] R_ext,S_ext,result,temp_p,temp_g;
    wire RAM0 = t_RAM0;
    wire RAM3 = t_RAM3;
    wire Q0 = t_Q0;
    wire Q3 = t_Q3;


always @(RAM[Aadd] or RAM[Badd] or I[2:0] or Aadd or D or Badd or Q) 
    begin : alu_inputs 
    
        A = RAM[Aadd];
        B = RAM[Badd];
        
        // SELECT THE SOURCE OPERANDS FOR ALU. SELECTED OPERANDS ARE &quot;RE&quot; &amp;&amp; &quot;S&quot;.
        
        case (I[2:0])
          3'b000,3'b001:        RE = A;
          3'b010,3'b011,3'b100: RE = 4'b0000;
          default:              RE = D;
        endcase
        
        case (I[2:0])
          3'b100, 3'b101: S = A;
          3'b001, 3'b011: S = B; 
          3'b111:         S = 4'b0000;
          default:        S = Q;
        endcase
    
    end


always @(I[5:3] or RE or S or C0) begin : alu

    //   TO FACILITATE COMPUTATION OF CARRY-OUT &quot;C4&quot;, WE EXTEND THE CHOSEN 
    //   ALU OPERANDS &quot;RE&quot; &amp;&amp; &quot;S&quot; (4 BIT OPERANDS) BY 1 BIT IN THE MSB POSITION. 
    
    //   THE ALU'S EXTENDED OUTPUT (5 BITS LONG) IS &quot;result&quot;.
    
    R_ext = (I[5:3] == 3'b001) ? {1'b0,~(RE)} : {1'b0,RE};
    S_ext = (I[5:3] == 3'b010) ? {1'b0,~(S)} :  {1'b0,S};
    
    // SELECT THE FUNCTION FOR ALU.
    
    //   IN THE ADD/SUBTRACT OPERATIONS, THE CARRY-INPUT &quot;C0&quot; (1 BIT) IS EXTENDED
    //   BY 4 BITS (ALL 1'b0) IN THE MORE SIGNIFICANT BITS TO MATCH ITS LENGTH TO
    //   THAT OF &quot;R_ext&quot; &amp;&amp; &quot;S_ext&quot;. THEN, THESE THREE OPERANDS ARE ADDED.
    
    //   ADD/SUBTRACT OPERATIONS ARE DONE ON 2'S COMPLEMENT OPERANDS.
    
    case (I[5:3])
      3'b000, 3'b001, 3'b010: result = R_ext + S_ext + {4'b0000,C0};
      3'b011:                 result = R_ext | S_ext; 
      3'b100:                 result = R_ext &amp; S_ext;
      3'b101:                 result = ~(R_ext) &amp; S_ext;
      3'b110:                 result = R_ext ^ S_ext;
      default:                result = ~( R_ext ^ S_ext);
    endcase
    
    // EVALUATE OTHER ALU OUTPUTS.
    
    //  FROM EXTENDED OUTPUT &quot;result&quot; (5 BITS), WE OBTAIN THE NORMAL ALU OUTPUT,
    //  &quot;F&quot; (4 BITS) BY LEAVING OUT THE MSB (WHICH CORRESPONDS TO CARRY-OUT
    //  &quot;C4&quot;). 
    
    //  TO FACILITATE COMPUTATION OF CARRY LOOKAHEAD TERMS &quot;Pbar&quot; &amp;&amp; &quot;Gbar&quot;, WE
    //  COMPUTE INTERMEDIATE TERMS &quot;temp_p&quot; &amp;&amp; &quot;temp_g&quot;.
    
    F = result[3:0];
    OVR = !(R_ext[3] ^ S_ext[3]) &amp;&amp; ( R_ext[3] ^ result[3]);
    C4 = result[4];
    temp_p = R_ext | S_ext;          // R || S may get
    temp_g = R_ext &amp; S_ext;         // inverted (sub)
    Pbar = !(temp_p[0] &amp;&amp; temp_p[1] &amp;&amp; temp_p[2] &amp;&amp; temp_p[3]);
    Gbar = !(  temp_g[3] ||
              (temp_p[3] &amp;&amp; temp_g[2]) || 
              (temp_p[3] &amp;&amp; temp_p[2] &amp;&amp; temp_g[1]) ||
              (temp_p[3] &amp;&amp; temp_p[2] &amp;&amp; temp_p[1] &amp;&amp; temp_g[0])
            );
    F3 = result[3];
    F30 = !(result[3] || result[2] || result[1] || result[0]);

end 


always @(posedge CLK)
    begin : mem
    
        // WRITE TO RAM WITH/WITHOUT SHIFTING. RAM DESTINATIONS ARE 
        // ADDRESSED BY &quot;Badd&quot;.
                
        RAM[Badd] = ((!(I[8]) &amp; I[7]) == 1'b1) ? F :
                    ((I[8] &amp; !(I[7])) == 1'b1) ? {RAM3,F[3:1]} :
                    ((I[8] &amp; I[7]) == 1'b1) ? {F[2:0],RAM0} : 
                       RAM[Badd]; 
    end 


always @(posedge CLK)
    begin : Q_reg
    
        // WRITE TO Q REGISTER WITH/WITHOUT SHIFTING. 
                
        Q = (I[8:6] == 3'b000) ? F :
            (I[8:6] == 3'b100) ? {Q3,Q[3:1]} :
            (I[8:6] == 3'b110) ? {Q[2:0],Q0} :
             Q;
    
    end 


always @(I[8:6] or OEbar or A or F or Q)
    begin : output_and_shifter
        
        // GENERATE DATA OUTPUT &quot;Y&quot; 
           
        Y = (( I[8:6] == 3'b010) &amp;&amp; ( OEbar == 1'b0)) ? A :
             (!(I[8:6] == 3'b010) &amp;&amp; ( OEbar == 1'b0)) ? F :
             4'bzzzz;
        
        // GENERATE BIDIRECTIONAL SHIFTER SIGNALS.
        
        t_RAM0 = (( I[8] == 1'b1) &amp;&amp; ( I[7] == 1'b0 )) ? F[0] : 1'bz;             
        t_RAM3 = (( I[8] == 1'b1) &amp;&amp; ( I[7] == 1'b1 )) ? F[3] : 1'bz;           
        t_Q3 = (( I[8] == 1'b1) &amp;&amp; ( I[7] == 1'b1)) ? Q[3] : 1'bz;         
        t_Q0 = (( I[8] == 1'b1) &amp;&amp; ( I[7] == 1'b0)) ? Q[0] : 1'bz;         
    
    end 


endmodule
</pre>
				</td>
			</tr>
		</table>
	</body>

</html>