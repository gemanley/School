<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<!-- Mirrored from www.cs.iastate.edu/~cs363/Projects/01_SQL/Project_SQL.htm by HTTrack Website Copier/3.x [XR&CO'2010], Tue, 11 Dec 2012 05:01:59 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<HEAD><TITLE>Project 1</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="Microsoft FrontPage 6.0" name=GENERATOR>
<META content=FrontPage.Editor.Document name=ProgId>
<meta name="Microsoft Border" content="t, default">
</HEAD>
<BODY><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>

<p><font face="AGaramond" size="3">Com S 363: Introduction to Database Systems</font><br>
<font face="AGaramond" size="5">Introduction to Database Systems </font></p>
<p>

</p>
<p>&nbsp; </p>

</td></tr><!--msnavigation--></table><!--msnavigation--><table dir="ltr" border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top">
<P><I><FONT face=Arial color=#000000 size=4>0. If you face problems&nbsp;</FONT></I> </P>
<P>Be sure to visit our [FAQ] web-page<FONT size=3>. </FONT> 
</P>
<P><I><FONT face=Arial color=#000000 size=4>1. Preliminaries </FONT></I> </P>
<P>As you have downloaded, configured, used CyDIW, run MySQL demo, and learned 
the submission procedure, you are all set for the project. Throughout this page, 
the term <span style="background-color: #FFFF99">&quot;demo&quot; will refer to the MySQL 
demo you have already run</span>. 
</P>
<P>The demo is an excellent guideline for the project; your project can be seen 
as an expanded version of the demo. The demo creates two tables, populates them, 
queries and updates them. You will be creating 6 tables, load data, and query 
and update them. CyDIW make it easy to learn SQL - and we hope you will 
appreciate this as you proceed. 
</P>
<P><b><font face="Arial"><span style="background-color: #FFFF99"><font size="2">
An interesting feature of the demo for learning SQL.</font></span><font size="2">
</font></font></b>The demo starts by dropping existing tables if there are any. This is an 
uncommon thing to do. Tables in databases can stay for years without ever 
dropping them. (A database owner can enforce this by revoking &quot;drop table&quot; 
privileges from all users). But here the database is for the purposes of 
learning. Dropping the tables at the start clears the environment to
<span style="background-color: #FFFF99">help make a clean start every time you 
use [Run All]</span>. We recommend that you also follow the same practice. Note 
that in your project the tables will have to be created in a certain order 
because of foreign key dependencies; the dropping has to be done in reverse 
order. 
</P>
<P><I><FONT face=Arial color=#000000 size=4>2. Project goal&nbsp;</FONT></I> </P>
<P>A<FONT size=3>s stated above, an empty database has been created for you. The name of the 
database does not matter in the project. In this project you create and 
populate tables in the database and then query and modify the database. </FONT> 
</P>
<p><i><font face="Arial" size="4">3</font></i><font FACE="Arial" SIZE="4"><i>. 
</i></font><i><font face="Arial" size="4">Create and populate a working folder </font></i>
</p>
<p>Create a working folder, say P1, for your project. Populate this folder with files in <a href="../../Resources/SQL_Project_Files.zip">SQL_Project_Files.zip</a>. 
The contents of your folder should be as follows: </p>
<ul>
	<li><FONT size=3><b>P1_Input.txt</b> is empty. You will 
	store the batch of SQL commands that you will develop in this file. </FONT>
	</li>
	<li><b>University_Dataset.xml</b> contains the data to be loaded in tables 
	of the University database.&nbsp; 
	</li>
	<LI>
	<P align=justify><FONT size=3><b>P1_Output.html</b> is also empty. You can 
	store the output of your batch of commands by overwriting this file. </FONT></P></LI>
</ul>
<P><I><FONT face=Arial size=4>4. Project description&nbsp;&nbsp;</FONT></I> </P>
<P>This project consists of four parts A, B, C and D described below. 
There are 30 items. <font color="#FF0000">Make sure that you provide a title for every item in form of 
a comment in the DIW_GUI format</font>. Examples of comments can be seen in the demo. 
</P>
<P><FONT face=Arial size=3><I><B>A.</B> Create tables&nbsp;</I></FONT> </P>
<P>Start DIW_GUI. Execute a sequence of six create commands 
for 
the <FONT face="Times New Roman" size=3>following six tables in the database. More details of 
the table will follow that will give you all the clues you need to write the 
create table statements. In addition, two out of six create table statements 
have been provided to you as samples. <font color="#FF0000">You should exercise 
extra caution in defining the primary and foreign keys correctly; </font>otherwise, you may face unexpected problems, especially when you populate the 
tables in items 7-12.&nbsp;</FONT> 
</P>
<UL>
  <LI>
  <P align=justify><FONT face="Courier New" size=2>Person (Name, ID, 
  Address, DOB)&nbsp;</FONT> </P>
  <LI>
  <P align=justify><FONT face="Courier New" size=2>Instructor 
  (InstructorID, Rank, Salary)&nbsp;</FONT> </P>
  <LI>
  <P align=justify><FONT face="Courier New" size=2>Student (StudentID, 
  Classification, GPA, MentorID, CreditHours)&nbsp;</FONT> </P>
  <LI>
  <P align=justify><FONT face="Courier New" size=2>Course (CourseCode, 
  CourseName, PreReq)&nbsp;</FONT> </P>
  <LI>
  <P align=justify><FONT face="Courier New" size=2>Offering (CourseCode, 
  SectionNo, InstructorID)</FONT> </P>
  <LI>
  <P align=justify><FONT face="Courier New" size=2>Enrollment 
  (CourseCode, SectionNo, StudentID, 
  Grade)&nbsp;</FONT> </P></LI></UL>
<P align=justify><FONT size=3><B>Item 1: The Person table.</B> The Person 
table consists of the attributes Name, ID, Address, and DOB (date of birth). The 
types of these attributes are char(20), char(9), char(30), and date, 
respectively. ID will be the primary key of the table, and it cannot have a null 
value. These requirements could be expressed in terms of the following create 
statement:</FONT></P>
<BLOCKQUOTE>
  <P align=justify><FONT face="Courier New" size=2>create table Person 
  (<BR>Name char (20),<BR>ID char (9) not null,<BR>Address char (30),<BR>DOB 
  date,<BR>Primary key (ID))</FONT></P></BLOCKQUOTE>
<P align=justify><FONT size=3><B>Item 2: The Instructor table.</B> The 
Instructor table consists of InstructorID, a 9 character non-null attribute that 
serves as the primary key and also references ID in the Person table. Other 
attributes are Rank and Salary. Rank can have up to 12 characters and Salary is 
an integer.</FONT></P>
<P align=justify><FONT size=3><B>Item 3: The Student table.</B> The 
Student table has StudentID that has same requirements as InstructorID. The 
Student table has four additional attributes: Classification that is a string of up to 10 characters, GPA that is a double, MentorID, consisting of 9 characters, references InstructorID in Instructor table, and CreditHours that is an 
integer. </FONT></P>
<P align=justify><FONT size=3><B>Item 4: The Course table.</B> The 
Course table has a 6 character non-null attribute called CourseCode, a 50 
character CourseName, and 6 character PreReq, representing prerequisite of a 
course. Note that a course can have several prerequisites. This is why 
CourseCode alone cannot be a key. If a course has no prerequisites, the string 
‘None’ is entered. For a given course a tuple, will exist for every prerequisite 
for the course.</FONT></P>
<P align=justify><FONT size=3><B>Item 5: The Offering table.</B> The 
Offering table contains three non-null attributes CourseCode, SectionNo, and 
InstructorID that are of type char(6), int, and char(9). A CourseCode in the 
Offering table should appear in the Course table. This could be enforced by an 
integrity constraint of the form "check (CourseCode in (select ...))". But it 
seems that Microsoft Access or the ODBC driver that we are using will not 
support it. Therefore, we will ignore this requirement. The InstructorID 
references InstructorID in Instructor table. The primary key for this table will 
be formed using CourseCode and SectionNo attributes.</FONT></P>
<P align=justify><FONT size=3><B>Item 6: The Enrollment table.</B> The 
Enrollment table consists of four non-null attributes CourseCode, SectionNo, 
StudentID, and Grade, with types char(6), int, char(9), and char(4), 
respectively. CourseCode and SectionNo reference the Offering table. StudentID 
references the Student table. The primary key for this table will consist of 
CourseCode and StudentID attributes. SectionNo is not included in the primary key. 
(Why?) Note that we would expect that a CourseCode, SectionNo pair in the 
Offering table must occur in the Course table. This requirement will not be 
captured by our design. For your reference, the create statement for Enrollment 
table is given below. </FONT></P>
<font SIZE="2" face="Courier New">
<blockquote>
  <p>create table Enrollment (<br>
  CourseCode char(6) NOT NULL, <br>
  SectionNo int NOT NULL, <br>
  StudentID char(9) NOT NULL references Student, <br>
  Grade char(4) NOT NULL, <br>
  primary key (CourseCode,StudentID), <br>
  foreign key (CourseCode, SectionNo) references Offering) </p>
</blockquote>
</font>
<P><i><font face="Arial">B</font></i><FONT face=Arial size=3><I>. Populate the 
database and verify the database state&nbsp;</I></FONT> </P>
<P align=justify><FONT size=3>After creating these tables, you need to 
populate them. For populating  tables there is no standard SQL command. Every 
system provides their proprietary utilities for bulk-loading. As seen in the 
demo, CyDIW provides a command that can be used to load data from and XML file 
into a table. </FONT></P>
<P align=justify><b>Items 7-12.</b> Load Person, Instructor, Student, Course, 
Offering, and Enrollment tables. </P>
<P><I><FONT face=Arial size=3>E. Develop the SQL commands&nbsp;</FONT></I> </P>
<P>Now you will develop a sequence of SQL commands. This is where CyDIW 
is very helpful. You should develop these commands sequentially, a single or a 
single group of commands at a time. Normally, you should execute the whole 
sequence of command developed up to a point all at once. As you develop these 
commands, you can append them in P1_Input.txt that would eventually contain all 
items first to the last.&nbsp;</P>
<P><FONT size=3>Some ad hoc queries for the database are stated below in 
English. <font color="#FF0000">You should express each query as a single SQL statement, 
possibly containing sub-queries, and execute them. This rule applies to all 
queries, but not to updates</font>.</FONT> </P><B>
<P align=justify><FONT size=3>Item 13.</FONT></B> List the IDs of students and 
the IDs of their Mentors for students who are junior or senior having a GPA 
above 3.8<FONT size=3>.&nbsp;</FONT></P><B>
<P align=justify><FONT size=3>Item 14.</FONT></B> List the distinct course codes 
and sections for courses that are being taken by sophomore<FONT size=3>.&nbsp;</FONT></P><B>
<P align=justify><FONT size=3>Item 15.</FONT></B> List the name and salary for 
mentors of all freshmen<FONT size=3>.&nbsp;</FONT></P><B>
<P align=justify><FONT size=3>Item 16.</FONT></B><FONT size=3> Find the total 
salary of all instructors who are not offering any course.</FONT></P>
<P align=justify><FONT size=3><B>Item 17.</B> List all the names and DOBs of 
students who were born in 1976. The expression &quot;Year(x.DOB) = 1976&quot;, checks if x 
is born in the year 1976.&nbsp; </FONT></P>
<P align=left><FONT size=3><B>Item 18.</B> List the names and rank of 
instructors who neither offer a course nor mentor a student. </FONT></P>
<P align=left><FONT size=3><B>Item 19.</B> Find the IDs, names and DOB of the 
youngest student(s).</FONT></P>
<P align=left><FONT size=3><B>Item 20.</B> List the IDs, DOB, and Names of Persons who 
are</FONT> <FONT size=3>neither a student nor a instructor.</FONT></P><B>
<P align=justify><FONT size=3>Item 21.</FONT></B> For each instructor list his / 
her name and the number of students he / she mentors<FONT size=3>. </FONT></P><B>
<P align=justify><FONT size=3>Item 22.</FONT></B> <FONT size=3>List the number 
of students and average GPA for each</FONT> <FONT size=3>classification. Your 
query should not use constants such as &quot;Freshman&quot;. </FONT></P><B>
<P align=justify><FONT size=3>Item 23.</FONT></B> Report the course(s) with 
lowest enrollments. You should output the course code and the number of 
enrollments<FONT size=3>.&nbsp;</FONT></P><B>
<P align=justify><FONT size=3>Item 24.</FONT></B> List the IDs and Mentor IDs of 
students who are taking some course, offered by their mentor<FONT size=3>.&nbsp;</FONT></P><B>
<P align=justify><FONT size=3>Item 25. </FONT></B><FONT size=3>List the student 
id, name, and completed credit hours of all freshman born in or after 1976.&nbsp; </FONT></P>
<P align=justify><FONT size=3>Now we you have a sequence of insertions, 
deletions and updates to the database. To confirm that such statements had the 
desired effect on the database, you will also execute some queries. Insertions 
are specified by some values given to you and may lead to <font color="#FF0000">
insertions of tuples in several tables in a specific sequence</font>. For 
example, before inserting a student tuple in Student table, you may have to 
insert him/her as a person in Person table and make sure that the mentor of the 
student exists as an instructor. <font color="#FF0000">Similar remarks apply to 
deletions and updates. Therefore, approach such items carefully.</font> </FONT></P>
<P align=justify><FONT size=3><B>Item 26.</B> Insert following information in 
the database: Student name: Briggs Jason; ID: 480293439; address: 215, North 
Hyland Avenue; date of birth: 15th January 1975. He is a junior with a GPA of 
3.48 and with 75 credit hours. His mentor is the instructor with InstructorID 
201586985. Jason Briggs is taking two courses CS311 Section 2 and CS330 Section 
1. He has an ’A’ on CS311 and ’A-’ on CS330.</FONT></P>
<P align=justify> <FONT size=3>After executing 
the insert statement for the above item, execute the following query 
statements.</FONT></P>
<BLOCKQUOTE>
  <P align=justify><FONT face="Courier New" size=2>Select *<BR>From Person 
  P<BR>Where P.Name= ‘Briggs Jason’; </FONT></P>
  <P align=justify><FONT face="Courier New" size=2>Select *<BR>From Student 
  S<BR>Where S.StudentID= ‘480293439’; </FONT></P>
  <P align=justify><FONT face="Courier New" size=2>Select *<BR>From Enrollment 
  E<BR>Where E.StudentID = ‘480293439’; </FONT></P></BLOCKQUOTE><B>
<P align=justify><FONT size=3>Item 27.</FONT></B><FONT size=3><FONT face=Arial 
size=4> </FONT>Next, delete the records of students from the database who have a 
GPA less than 0.5. Note that it is not sufficient to delete these records from 
Student table; you have to delete them from the Enrollment table first. (Why?) 
On the&nbsp; other hand, do not delete these students from the Person 
table.&nbsp;</FONT></P>
<P align=justify> <FONT size=3>After finishing 
the above, execute the query statement given below.</FONT></P>
<BLOCKQUOTE>
  <P align=justify><FONT face="Courier New" size=2>Select *<BR>From Student 
  S<BR>Where S.GPA &lt; 0.5</FONT></P></BLOCKQUOTE><B>
<P align=justify><FONT size=3>Item 28</FONT></B><FONT size=3>. In this part you 
update the Instructor table. To confirm the update, you execute two queries 
before and after making the update. First, execute the SQL query statements that 
are given below.</FONT></P>
<BLOCKQUOTE>
  <P align=justify><FONT face="Courier New" size=2>Select P.Name, 
  I.Salary<BR>From Instructor I, Person P<BR>Where I.InstructorID = P.ID<BR>and 
  P.Name = ‘Ricky Ponting’ </FONT></P>
  <P align=justify><FONT face="Courier New" size=2>Select P.Name, 
  I.Salary<BR>From Instructor I, Person P<BR>Where I.InstructorID = P.ID<BR>and 
  P.Name = ‘Darren Lehmann’ </FONT></P></BLOCKQUOTE>
<P align=justify><FONT size=3>Second, update Instructor table as follows: For 
instructors, </FONT><FONT face="Courier New" size=2>Ricky Ponting </FONT><FONT 
size=3>and </FONT><FONT face="Courier New" size=2>Darren Lehmann</FONT><FONT 
size=3>, if they have more than five students whose GPA is greater than 3.0, 
then raise their Salary by 10%.&nbsp;</FONT></P>
<P align=justify><FONT size=3>Third, execute the above queries again. This is to 
help verify that the intended raises did take place.</FONT></P><B>
<P align=justify><FONT size=3>Item 29. </FONT></B><FONT size=3>Insert the 
following information into the Person table. Name: Trevor Horns; ID: 000957303; 
Address: 23 Canberra Street; date of birth: 23rd November 1964. Then execute the 
following query:</FONT></P>
<BLOCKQUOTE>
  <P align=justify><FONT face="Courier New" size=2>Select *<BR>From Person 
  P<BR>Where P.Name = ’Trevor Horns’</FONT></P></BLOCKQUOTE><B>
<P align=justify><FONT size=3>Item 30.</FONT></B> <FONT size=3>Delete the record 
for Jan Austin from the Person table. If she is a student or an instructor, you 
should do the deletion with usual care. Then execute the following 
query:</FONT></P>
<BLOCKQUOTE>
  <P align=justify><FONT face="Courier New" size=2>Select *<BR>From Person 
  P<BR>Where P.Name = ’Jan Austin’</FONT></P></BLOCKQUOTE>
<P><I><FONT face=Arial size=4>6. Submission&nbsp;</FONT></I> </P>
<font SIZE="3">
<p ALIGN="JUSTIFY">We assume that you have learned the logistics surrounding 
submissions in Project P0. Here we state the contents of your submission and 
last minute advise. </p>
<p ALIGN="JUSTIFY"><b>Step 1. The electronic submission.</b> Submit <B>P1_Input.txt</B> before the deadline. 
As stated above, make sure that you have provided a title for every item in form 
of a comment. The items numbers must be consistent with the project statement. It is highly recommended that 
before submitting you run all your commands with a
<span style="background-color: #FFFF99">single click of [Run All] button</span>. </p>
<p ALIGN="JUSTIFY"><b>Step 2. The hardcopy submission.</b> Submit
</font><B>
P1_Input.txt</B>, collated and stapled together with the <b>cover sheet</b>, in the first lecture 
following the deadline. </p><!--msnavigation--></td></tr><!--msnavigation--></table></BODY>
<!-- Mirrored from www.cs.iastate.edu/~cs363/Projects/01_SQL/Project_SQL.htm by HTTrack Website Copier/3.x [XR&CO'2010], Tue, 11 Dec 2012 05:02:00 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</HTML>