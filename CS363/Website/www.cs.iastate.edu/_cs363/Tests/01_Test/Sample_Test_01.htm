<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>

<!-- Mirrored from www.cs.iastate.edu/~cs363/Tests/01_Test/Sample_Test_01.htm by HTTrack Website Copier/3.x [XR&CO'2010], Tue, 11 Dec 2012 05:30:59 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 7.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="Sample_Test_01.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 &nbsp;Same Test 1  
</TITLE>

</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<H2 CLASS="Heading">
<A NAME="pgfId-12500"></A>Sample Test 1  </H2>
<P CLASS="Body">
<A NAME="pgfId-12320"></A>&nbsp;</P>
<P CLASS="Body">
<A NAME="pgfId-12322"></A>Problems are not necessarily in increasing order of difficulty. Although exact compliance with SQL, JDBC, Java, OQL, and XML standards is not required, your answers should be thoughtful. For example, to register a JDBC-driver, a statement such as &quot;Register (MyDriver);&quot; can be used. </P>
<P CLASS="Body">
<A NAME="pgfId-16710"></A>&nbsp;</P>
<P CLASS="Body">
<A NAME="pgfId-10533"></A>   </P>
<TABLE BORDER="1">
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
<A NAME="pgfId-6814"></A>Scores / problem #</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
<A NAME="pgfId-6816"></A>1</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
<A NAME="pgfId-6818"></A>2</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
<A NAME="pgfId-6820"></A>3</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
<A NAME="pgfId-6822"></A>4</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
<A NAME="pgfId-8535"></A>5</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
<A NAME="pgfId-6824"></A>6</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
<A NAME="pgfId-6826"></A>Total</P>
</TH>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-6828"></A>Total</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-6830"></A>15</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-6832"></A>20</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-6834"></A>15</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-6836"></A>20</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-8537"></A>15</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-6838"></A>15</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-6840"></A>100</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-6842"></A>Your Score</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-6844"></A>&nbsp;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-6846"></A>&nbsp;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-6848"></A>&nbsp;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-6850"></A>&nbsp;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-8539"></A>&nbsp;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-6852"></A>&nbsp;</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P CLASS="CellBody">
<A NAME="pgfId-6854"></A>&nbsp;</P>
</TD>
</TR>
</TABLE>
<P CLASS="A-Body-L0">
<A NAME="pgfId-16711"></A>&nbsp;</P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-16713"></A>1. Consider the following ER diagram and the proposed relational scheme.  </P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-16775"></A>&nbsp;</P>
<DIV>
&nbsp;<img border="0" src="Sample_Test_01_And_Solutions.fm-1.gif" width="340" height="340"></DIV>
<P CLASS="Body">
<A NAME="pgfId-10445"></A>&nbsp;</P>
<P CLASS="Body">
<A NAME="pgfId-10446"></A>The proposed relational scheme: </P>
<UL>
<LI CLASS="A-Bull-L1">
<A NAME="pgfId-10447"></A>Person (Name, ID, DOB)</LI>
<LI CLASS="A-Bull-L1">
<A NAME="pgfId-10448"></A>Emp (ID, Dname, Salary) </LI>
<LI CLASS="A-Bull-L1">
<A NAME="pgfId-10449"></A>Dept (Dname, ManagerID)</LI>
</UL>
<P CLASS="A-Body-L1">
<A NAME="pgfId-10450"></A>The proposed relational scheme has the problem that it does not capture the whole semantics of the ER diagram. For the relational scheme, do the following.</P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-10451"></A>A. Designate keys. </P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-10452"></A>B. Designate foreign keys.</P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-10453"></A>C. Parts A and B may fix some problems with the relational scheme when compared to the ER diagram. But some problems may still remain in the relational scheme. List all such problems. You can express your answers informally. </P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-10353"></A>&nbsp;</P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-10379"></A>2. These problems are on the University database of Project 1. The relation schemes are listed below for your reference. </P>
<UL>
<LI CLASS="A-Bull-L0">
<A NAME="pgfId-7459"></A>Person (Name, ID, Address, DOB) </LI>
<LI CLASS="A-Bull-L0">
<A NAME="pgfId-7460"></A>Instructor (InstructorID, Rank, Salary) </LI>
<LI CLASS="A-Bull-L0">
<A NAME="pgfId-7435"></A>Student (StudentID, Classification, GPA, MentorID, CreditHours) </LI>
<LI CLASS="A-Bull-L0">
<A NAME="pgfId-7437"></A>Course (CourseCode, CourseName, PreReq) </LI>
<LI CLASS="A-Bull-L0">
<A NAME="pgfId-7439"></A>Offering (CourseCode, SectionNo, InstructorID) </LI>
<LI CLASS="A-Bull-L0">
<A NAME="pgfId-7441"></A>Enrollment (CourseCode, SectionNo, StudentID, Grade) </LI>
</UL>
<P CLASS="A-Body-L0">
<A NAME="pgfId-10488"></A>&nbsp;</P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-10495"></A>Express the following as SQL queries. </P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-10489"></A>A. Give name and date of birth of the youngest student who is also an instructor. </P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-10490"></A>B. List StudentID of students who are not taking CS311. </P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-8513"></A>3. Give example of two non-empty relations r(A,B) and s(B,C) and a scenario, such that the number of block accesses needed to compute the natural join of the two relations, is less than the total number of blocks occupied by the two relations. </P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-8514"></A>&nbsp;</P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-8217"></A>4. You are given relations r(A, B, C, E) and s(C, D, F, G). Note that the keys have been underscored. Assume that r occupies 1000 blocks and s occupies 2000 blocks on the disk. Assume all attributes occupy the same number of bytes. Also assume that every block is full and contains 20 tuples. You are given up to 12 buffers to process the query. Draw an optimal expression tree and give estimation of optimal execution of the tree. Assume that D = 55 is satisfied by 1% of the tuples of s. Assume that the output consists of 50 blocks. </P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-7824"></A>	select x.B, y.F <BR>
	from r x, s y <BR>
	where x.C = y.C and y.D = 55  </P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-8495"></A>&nbsp;</P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-12011"></A>5. A binary operator &quot;op&quot; is said to be monotonic if r<EM CLASS="Subscript">
1</EM>
 &#8838; r<EM CLASS="Subscript">
2</EM>
 and s<EM CLASS="Subscript">
1</EM>
 &#8838; s<EM CLASS="Subscript">
2</EM>
 imply (r<EM CLASS="Subscript">
1</EM>
 op s<EM CLASS="Subscript">
1</EM>
) &#8838; (r<EM CLASS="Subscript">
2</EM>
 op s<EM CLASS="Subscript">
2</EM>
). Informally, it means that contents of the result increase (do not decrease) when the contents of operands are increased. </P>
<P CLASS="Body">
<A NAME="pgfId-7846"></A>A. Which ones of r &#8746; s, r &#8745; s, r &#8722; s, r &#215; s, and r &#8900; s are monotonic and which are not. (At least one is and at least one is not.) </P>
<P CLASS="Body">
<A NAME="pgfId-7847"></A>B. Use an example to prove that one of the above is not monotonic. (No partial credit even if A is wrong.) </P>
<P CLASS="Body">
<A NAME="pgfId-7989"></A>&nbsp;</P>
<P CLASS="A-Body-L0">
<A NAME="pgfId-8192"></A>6. You are given the following relations. The Salary attribute represents the monthly salary. Every month an employee can also earn several bonuses that are stored in the Bonus relation. </P>
<UL>
<LI CLASS="A-Bull-L0">
<A NAME="pgfId-8193"></A>Emp(Name, Dept, Salary) </LI>
<LI CLASS="A-Bull-L0">
<A NAME="pgfId-8194"></A>Bonus(Name, TransactionID, BAmount) </LI>
<LI CLASS="A-Bull-L0">
<A NAME="pgfId-8195"></A>Wages(Name, WAmount) </LI>
</UL>
<P CLASS="A-Body-L1">
<A NAME="pgfId-8196"></A>The Wages relation is initially empty and it needs to be populated. WAmount of an employee is the sum of his/her Salary and total of his/her bonuses (BAmount), with the understanding that the grand total cannot exceed 120% of the salary. (In other words, an employee can earn a bonus that is up to 20% of his/her salary.) Assume that every employee appears in the Emp relation as well as the Bonus relation. </P>
<P CLASS="A-Body-L1">
<A NAME="pgfId-8197"></A>In plain English describe a JDBC program to populate the Wages relation at the end of a month. Assume very large relations and keep efficiency of your JDBC program in mind. </P>
</DIV>
</BODY>

<!-- Mirrored from www.cs.iastate.edu/~cs363/Tests/01_Test/Sample_Test_01.htm by HTTrack Website Copier/3.x [XR&CO'2010], Tue, 11 Dec 2012 05:31:00 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</HTML>
