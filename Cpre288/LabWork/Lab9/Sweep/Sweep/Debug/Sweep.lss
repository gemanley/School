
Sweep.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  0000166c  00001700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000166c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  00800140  00800140  00001740  2**0
                  ALLOC
  3 .stab         00003a20  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b3d  00000000  00000000  00005160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00005ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017af  00000000  00000000  00005ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ace  00000000  00000000  0000764f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001072  00000000  00000000  0000811d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000578  00000000  00000000  00009190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ff  00000000  00000000  00009708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eee  00000000  00000000  00009d07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000abf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__vector_9>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_11>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 47 02 	jmp	0x48e	; 0x48e <__vector_14>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      8c:	07 63       	ori	r16, 0x37	; 55
      8e:	42 36       	cpi	r20, 0x62	; 98
      90:	b7 9b       	sbis	0x16, 7	; 22
      92:	d8 a7       	lds	r29, 0x78
      94:	1a 39       	cpi	r17, 0x9A	; 154
      96:	68 56       	subi	r22, 0x68	; 104
      98:	18 ae       	sts	0xb8, r17
      9a:	ba ab       	sts	0x5a, r27
      9c:	55 8c       	ldd	r5, Z+29	; 0x1d
      9e:	1d 3c       	cpi	r17, 0xCD	; 205
      a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
      a2:	57 63       	ori	r21, 0x37	; 55
      a4:	bd 6d       	ori	r27, 0xDD	; 221
      a6:	ed fd       	.word	0xfded	; ????
      a8:	75 3e       	cpi	r23, 0xE5	; 229
      aa:	f6 17       	cp	r31, r22
      ac:	72 31       	cpi	r23, 0x12	; 18
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	sts	0x9b, r26
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	sts	0x5e, r27
      ce:	aa aa       	sts	0x9a, r26
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	sts	0x41, r30
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <move_stepper_motor_by_step+0xbc>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e1       	ldi	r29, 0x10	; 16
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	ec e6       	ldi	r30, 0x6C	; 108
     122:	f6 e1       	ldi	r31, 0x16	; 22
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a0 34       	cpi	r26, 0x40	; 64
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	11 e0       	ldi	r17, 0x01	; 1
     136:	a0 e4       	ldi	r26, 0x40	; 64
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a9 39       	cpi	r26, 0x99	; 153
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 19 03 	call	0x632	; 0x632 <main>
     148:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <init_ADC>:

void init_ADC(){
	// REFS=11, ADLAR=0, MUX don’t care

	int channel = 2;
	ADMUX = (3 << REFS0) | channel;
     150:	82 ec       	ldi	r24, 0xC2	; 194
     152:	87 b9       	out	0x07, r24	; 7

	// ADEN=1, ADFR=0, ADIE=0, ADSP=111  prescalor 128
	// See page 246 of user guide
	ADCSRA = (1 << ADEN) | (7 << ADPS0);
     154:	87 e8       	ldi	r24, 0x87	; 135
     156:	86 b9       	out	0x06, r24	; 6
}
     158:	08 95       	ret

0000015a <ADC_read>:

unsigned ADC_read()
{
	ADCSRA |= (1<<ADSC);
     15a:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));
     15c:	36 99       	sbic	0x06, 6	; 6
     15e:	fe cf       	rjmp	.-4      	; 0x15c <ADC_read+0x2>
	unsigned int sample = ADCW;
     160:	84 b1       	in	r24, 0x04	; 4
     162:	95 b1       	in	r25, 0x05	; 5
	return ADC;
     164:	84 b1       	in	r24, 0x04	; 4
     166:	95 b1       	in	r25, 0x05	; 5
}
     168:	08 95       	ret

0000016a <ir_distance>:

unsigned int ir_distance()
{
	float sample = (float) ADC_read();
     16a:	0e 94 ad 00 	call	0x15a	; 0x15a <ADC_read>
     16e:	bc 01       	movw	r22, r24
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
	float distance_cm = 29698*pow(sample,-1.163);
     178:	2f e2       	ldi	r18, 0x2F	; 47
     17a:	3d ed       	ldi	r19, 0xDD	; 221
     17c:	44 e9       	ldi	r20, 0x94	; 148
     17e:	5f eb       	ldi	r21, 0xBF	; 191
     180:	0e 94 25 06 	call	0xc4a	; 0xc4a <pow>
     184:	46 2f       	mov	r20, r22
     186:	57 2f       	mov	r21, r23
     188:	68 2f       	mov	r22, r24
     18a:	79 2f       	mov	r23, r25
     18c:	cb 01       	movw	r24, r22
     18e:	ba 01       	movw	r22, r20
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	34 e0       	ldi	r19, 0x04	; 4
     194:	48 ee       	ldi	r20, 0xE8	; 232
     196:	56 e4       	ldi	r21, 0x46	; 70
     198:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
	return distance_cm;
     19c:	0e 94 08 05 	call	0xa10	; 0xa10 <__fixunssfsi>
     1a0:	86 2f       	mov	r24, r22
     1a2:	97 2f       	mov	r25, r23
     1a4:	08 95       	ret

000001a6 <lcd_toggle_clear>:

/// Triggers loading of bits by LCD controller and clears bits after toggle
void lcd_toggle_clear(char delay) {
	const char enable=0x40; //PA6 is tied to Enable

	PORTA|=enable;
     1a6:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(delay);
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 9f 03 	call	0x73e	; 0x73e <wait_ms>
	PORTA&=~enable;
     1ae:	de 98       	cbi	0x1b, 6	; 27
	PORTA&=0xF0;	
     1b0:	8b b3       	in	r24, 0x1b	; 27
     1b2:	80 7f       	andi	r24, 0xF0	; 240
     1b4:	8b bb       	out	0x1b, r24	; 27
}
     1b6:	08 95       	ret

000001b8 <lcd_command>:


/// Submits command to LCD controller
void lcd_command(char data) {
     1b8:	cf 93       	push	r28
     1ba:	c8 2f       	mov	r28, r24
	const char rs=0x10;		//PA4 is tied to Register Select
	PORTA&=~rs;  //Setting register select low for command mode
     1bc:	dc 98       	cbi	0x1b, 4	; 27
	PORTA|=(data>>4);
     1be:	8b b3       	in	r24, 0x1b	; 27
     1c0:	9c 2f       	mov	r25, r28
     1c2:	92 95       	swap	r25
     1c4:	9f 70       	andi	r25, 0x0F	; 15
     1c6:	89 2b       	or	r24, r25
     1c8:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(2);
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_toggle_clear>
	PORTA|=(data & 0x0F);
     1d0:	8b b3       	in	r24, 0x1b	; 27
     1d2:	cf 70       	andi	r28, 0x0F	; 15
     1d4:	c8 2b       	or	r28, r24
     1d6:	cb bb       	out	0x1b, r28	; 27
	lcd_toggle_clear(2);
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_toggle_clear>
	PORTA|=rs;	//Setting register select high for character mode
     1de:	dc 9a       	sbi	0x1b, 4	; 27
}
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <lcd_clear>:



/// Clears the LCD
void lcd_clear(void) {
	lcd_command(HD_LCD_CLEAR);
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_command>
	wait_ms(1);
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 9f 03 	call	0x73e	; 0x73e <wait_ms>
}
     1f2:	08 95       	ret

000001f4 <lcd_home_line1>:



/// Sets character position to first line first position
void lcd_home_line1(void) {
	lcd_command(HD_RETURN_HOME);
     1f4:	82 e0       	ldi	r24, 0x02	; 2
     1f6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_command>
}
     1fa:	08 95       	ret

000001fc <lcd_init>:
void lcd_init(void) {
	const char enable=0x40; //PA6 is tied to Enable
	const char rs=0x10;		//PA4 is tied to Register Select
	//Assumes Port A is dedicated to the LCD
	//Seven Pins needed, but will assume all 8 are used
	DDRA=0xFF; //Setting Port A for OutPut
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	8a bb       	out	0x1a, r24	; 26
	 //Preparing to put HD44780 into 4-bit Mod
	PORTA=0x03;
     200:	83 e0       	ldi	r24, 0x03	; 3
     202:	8b bb       	out	0x1b, r24	; 27

	PORTA|=enable;
     204:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 9f 03 	call	0x73e	; 0x73e <wait_ms>
	PORTA&=~enable;
     20e:	de 98       	cbi	0x1b, 6	; 27
	wait_ms(5);
     210:	85 e0       	ldi	r24, 0x05	; 5
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 9f 03 	call	0x73e	; 0x73e <wait_ms>
	PORTA|=enable;
     218:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 9f 03 	call	0x73e	; 0x73e <wait_ms>
	PORTA&=~enable;
     222:	de 98       	cbi	0x1b, 6	; 27
	PORTA|=enable;
     224:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 9f 03 	call	0x73e	; 0x73e <wait_ms>
	PORTA&=~enable;
     22e:	de 98       	cbi	0x1b, 6	; 27

	PORTA=0x02;	//setting controller to 4 bit mode
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	8b bb       	out	0x1b, r24	; 27
				//Need to set for 2 lines
	lcd_toggle_clear(1);
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_toggle_clear>

	PORTA|=0x00;  //setting disp on, cursor on, blink off
     23a:	8b b3       	in	r24, 0x1b	; 27
     23c:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_toggle_clear>
	PORTA|=0x0E;
     244:	8b b3       	in	r24, 0x1b	; 27
     246:	8e 60       	ori	r24, 0x0E	; 14
     248:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_toggle_clear>

	PORTA|=0x00; //increment cursor, no display shift
     250:	8b b3       	in	r24, 0x1b	; 27
     252:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_toggle_clear>
	PORTA|=0x06;
     25a:	8b b3       	in	r24, 0x1b	; 27
     25c:	86 60       	ori	r24, 0x06	; 6
     25e:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_toggle_clear>
	
	PORTA|=0x00; //clear LCD
     266:	8b b3       	in	r24, 0x1b	; 27
     268:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_toggle_clear>
	PORTA|=0x01;
     270:	d8 9a       	sbi	0x1b, 0	; 27
	lcd_toggle_clear(1);
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_toggle_clear>

	PORTA|=rs;	//Setting Register select high to enable character mode
     278:	dc 9a       	sbi	0x1b, 4	; 27
	lcd_home_line1();
     27a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_home_line1>
}
     27e:	08 95       	ret

00000280 <lcd_home_line2>:



/// Sets character position to second line first position
void lcd_home_line2(void) {
	lcd_command(0xC0); //First bit relevant to the set DDRAM address instruction. The remaining bits designate address, which is 0x40.
     280:	80 ec       	ldi	r24, 0xC0	; 192
     282:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_command>
}
     286:	08 95       	ret

00000288 <lcd_home_line3>:



/// Sets character position to third line first position
void lcd_home_line3(void) {
	lcd_command(0x94);	//First bit relevant to the set DDRAM address instruction. The remaining bits designate address, which is 0x14.
     288:	84 e9       	ldi	r24, 0x94	; 148
     28a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_command>
}
     28e:	08 95       	ret

00000290 <lcd_home_line4>:



/// Sets character position to fourth line first position
void lcd_home_line4(void){ //First bit relevant to the set DDRAM address instruction. The remaining bits designate address, which is 0x54.
	lcd_command(0xD4); 
     290:	84 ed       	ldi	r24, 0xD4	; 212
     292:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_command>
}
     296:	08 95       	ret

00000298 <lcd_home_anyloc>:



/// Sets character position to any valid location
void lcd_home_anyloc(unsigned char location) {
	if (location < 0x68) { //Addresses are limitted to 0x00 - 0x67
     298:	88 36       	cpi	r24, 0x68	; 104
     29a:	18 f4       	brcc	.+6      	; 0x2a2 <lcd_home_anyloc+0xa>
		location |= 0x80; //Setting the first bit to one, thus forming a DDRAM set address instruction
		lcd_command(location);
     29c:	80 68       	ori	r24, 0x80	; 128
     29e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_command>
     2a2:	08 95       	ret

000002a4 <lcd_display_shift_left>:



/// Shift display content left
void lcd_display_shift_left(void) {
	lcd_command(HD_DISPLAY_SHIFT_LEFT);
     2a4:	88 e1       	ldi	r24, 0x18	; 24
     2a6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_command>
}
     2aa:	08 95       	ret

000002ac <lcd_putc>:
}



/// Prints one character at the current cursor position
void lcd_putc(char data) {
     2ac:	cf 93       	push	r28
     2ae:	c8 2f       	mov	r28, r24
	PORTA|=(data>>4);
     2b0:	8b b3       	in	r24, 0x1b	; 27
     2b2:	9c 2f       	mov	r25, r28
     2b4:	92 95       	swap	r25
     2b6:	9f 70       	andi	r25, 0x0F	; 15
     2b8:	89 2b       	or	r24, r25
     2ba:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_toggle_clear>
	PORTA|=(data & 0x0F);
     2c2:	8b b3       	in	r24, 0x1b	; 27
     2c4:	cf 70       	andi	r28, 0x0F	; 15
     2c6:	c8 2b       	or	r28, r24
     2c8:	cb bb       	out	0x1b, r28	; 27
	lcd_toggle_clear(1);
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_toggle_clear>
}
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <lcd_puts>:
}



/// Prints string to lcd, starting at the current cursor position
void lcd_puts(char * string) {
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
	int size=strlen(string);
     2e0:	e8 2f       	mov	r30, r24
     2e2:	f9 2f       	mov	r31, r25
     2e4:	ef 01       	movw	r28, r30
     2e6:	09 90       	ld	r0, Y+
     2e8:	00 20       	and	r0, r0
     2ea:	e9 f7       	brne	.-6      	; 0x2e6 <lcd_puts+0x12>
     2ec:	21 97       	sbiw	r28, 0x01	; 1
     2ee:	ce 1b       	sub	r28, r30
     2f0:	df 0b       	sbc	r29, r31
	int i;

	for (i=0;i<size;i++) {		
     2f2:	1c 16       	cp	r1, r28
     2f4:	1d 06       	cpc	r1, r29
     2f6:	74 f4       	brge	.+28     	; 0x314 <lcd_puts+0x40>
     2f8:	e8 2e       	mov	r14, r24
     2fa:	f9 2e       	mov	r15, r25
     2fc:	00 e0       	ldi	r16, 0x00	; 0
     2fe:	10 e0       	ldi	r17, 0x00	; 0
		lcd_putc(string[i]);
     300:	f7 01       	movw	r30, r14
     302:	81 91       	ld	r24, Z+
     304:	7f 01       	movw	r14, r30
     306:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_putc>
/// Prints string to lcd, starting at the current cursor position
void lcd_puts(char * string) {
	int size=strlen(string);
	int i;

	for (i=0;i<size;i++) {		
     30a:	0f 5f       	subi	r16, 0xFF	; 255
     30c:	1f 4f       	sbci	r17, 0xFF	; 255
     30e:	c0 17       	cp	r28, r16
     310:	d1 07       	cpc	r29, r17
     312:	b1 f7       	brne	.-20     	; 0x300 <lcd_puts+0x2c>
		lcd_putc(string[i]);
	}
}
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	1f 91       	pop	r17
     31a:	0f 91       	pop	r16
     31c:	ff 90       	pop	r15
     31e:	ef 90       	pop	r14
     320:	08 95       	ret

00000322 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     322:	cf 92       	push	r12
     324:	df 92       	push	r13
     326:	ef 92       	push	r14
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	c1 55       	subi	r28, 0x51	; 81
     338:	d0 40       	sbci	r29, 0x00	; 0
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	fe 01       	movw	r30, r28
     346:	e4 5a       	subi	r30, 0xA4	; 164
     348:	ff 4f       	sbci	r31, 0xFF	; 255
     34a:	41 91       	ld	r20, Z+
     34c:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     34e:	ce 01       	movw	r24, r28
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	61 e5       	ldi	r22, 0x51	; 81
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	2e 2f       	mov	r18, r30
     358:	3f 2f       	mov	r19, r31
     35a:	0e 94 55 08 	call	0x10aa	; 0x10aa <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     35e:	80 e4       	ldi	r24, 0x40	; 64
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	be 01       	movw	r22, r28
     364:	6f 5f       	subi	r22, 0xFF	; 255
     366:	7f 4f       	sbci	r23, 0xFF	; 255
     368:	0e 94 16 08 	call	0x102c	; 0x102c <strcmp>
     36c:	28 2f       	mov	r18, r24
     36e:	39 2f       	mov	r19, r25
     370:	21 15       	cp	r18, r1
     372:	31 05       	cpc	r19, r1
     374:	09 f4       	brne	.+2      	; 0x378 <lprintf+0x56>
     376:	48 c0       	rjmp	.+144    	; 0x408 <lprintf+0xe6>
		return;
	
	strcpy(lastbuffer, buffer);
     378:	80 e4       	ldi	r24, 0x40	; 64
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	be 01       	movw	r22, r28
     37e:	6f 5f       	subi	r22, 0xFF	; 255
     380:	7f 4f       	sbci	r23, 0xFF	; 255
     382:	0e 94 1f 08 	call	0x103e	; 0x103e <strcpy>
	lcd_clear();
     386:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_clear>
     38a:	6e 01       	movw	r12, r28
     38c:	08 94       	sec
     38e:	c1 1c       	adc	r12, r1
     390:	d1 1c       	adc	r13, r1
	char *str = buffer;
	int charnum = 0;
     392:	00 e0       	ldi	r16, 0x00	; 0
     394:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     396:	0f 2e       	mov	r0, r31
     398:	f4 e1       	ldi	r31, 0x14	; 20
     39a:	ef 2e       	mov	r14, r31
     39c:	ff 24       	eor	r15, r15
     39e:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     3a0:	2b c0       	rjmp	.+86     	; 0x3f8 <lprintf+0xd6>
		if (*str == '\n') {
     3a2:	8a 30       	cpi	r24, 0x0A	; 10
     3a4:	51 f4       	brne	.+20     	; 0x3ba <lprintf+0x98>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     3a6:	c8 01       	movw	r24, r16
     3a8:	b7 01       	movw	r22, r14
     3aa:	0e 94 ef 07 	call	0xfde	; 0xfde <__divmodhi4>
     3ae:	97 01       	movw	r18, r14
     3b0:	28 1b       	sub	r18, r24
     3b2:	39 0b       	sbc	r19, r25
     3b4:	02 0f       	add	r16, r18
     3b6:	13 1f       	adc	r17, r19
     3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <lprintf+0xa0>
		} else {
			lcd_putc(*str);
     3ba:	0e 94 56 01 	call	0x2ac	; 0x2ac <lcd_putc>
			charnum++;
     3be:	0f 5f       	subi	r16, 0xFF	; 255
     3c0:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     3c2:	c8 01       	movw	r24, r16
     3c4:	b7 01       	movw	r22, r14
     3c6:	0e 94 ef 07 	call	0xfde	; 0xfde <__divmodhi4>
     3ca:	00 97       	sbiw	r24, 0x00	; 0
     3cc:	a9 f4       	brne	.+42     	; 0x3f8 <lprintf+0xd6>
			switch (charnum / LCD_WIDTH) {
     3ce:	c8 01       	movw	r24, r16
     3d0:	b7 01       	movw	r22, r14
     3d2:	0e 94 ef 07 	call	0xfde	; 0xfde <__divmodhi4>
     3d6:	62 30       	cpi	r22, 0x02	; 2
     3d8:	71 05       	cpc	r23, r1
     3da:	49 f0       	breq	.+18     	; 0x3ee <lprintf+0xcc>
     3dc:	63 30       	cpi	r22, 0x03	; 3
     3de:	71 05       	cpc	r23, r1
     3e0:	49 f0       	breq	.+18     	; 0x3f4 <lprintf+0xd2>
     3e2:	61 30       	cpi	r22, 0x01	; 1
     3e4:	71 05       	cpc	r23, r1
     3e6:	41 f4       	brne	.+16     	; 0x3f8 <lprintf+0xd6>
			case 1:
				lcd_home_line2();
     3e8:	0e 94 40 01 	call	0x280	; 0x280 <lcd_home_line2>
				break;
     3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <lprintf+0xd6>
			case 2:
				lcd_home_line3();
     3ee:	0e 94 44 01 	call	0x288	; 0x288 <lcd_home_line3>
				break;
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <lprintf+0xd6>
			case 3:
				lcd_home_line4();
     3f4:	0e 94 48 01 	call	0x290	; 0x290 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     3f8:	f6 01       	movw	r30, r12
     3fa:	81 91       	ld	r24, Z+
     3fc:	6f 01       	movw	r12, r30
     3fe:	88 23       	and	r24, r24
     400:	19 f0       	breq	.+6      	; 0x408 <lprintf+0xe6>
     402:	00 35       	cpi	r16, 0x50	; 80
     404:	11 05       	cpc	r17, r1
     406:	6c f2       	brlt	.-102    	; 0x3a2 <lprintf+0x80>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     408:	cf 5a       	subi	r28, 0xAF	; 175
     40a:	df 4f       	sbci	r29, 0xFF	; 255
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	df 90       	pop	r13
     424:	cf 90       	pop	r12
     426:	08 95       	ret

00000428 <getOverflow>:
volatile unsigned falling_time;

char getOverflow()
{
	return overflows;
}
     428:	80 91 92 01 	lds	r24, 0x0192
     42c:	08 95       	ret

0000042e <init_timer>:

void init_timer()
{
	overflows = 0;
     42e:	10 92 92 01 	sts	0x0192, r1
	TCCR1A = 0x00;
     432:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (2<<CS10)|(0<<WGM12);; // Enable interrupt, choose right edge select, WGM bits = 0, choose good clock select
     434:	82 e0       	ldi	r24, 0x02	; 2
     436:	8e bd       	out	0x2e, r24	; 46
	sei();
     438:	78 94       	sei
}
     43a:	08 95       	ret

0000043c <__vector_11>:

ISR (TIMER1_CAPT_vect)
{
     43c:	1f 92       	push	r1
     43e:	0f 92       	push	r0
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	0f 92       	push	r0
     444:	11 24       	eor	r1, r1
     446:	8f 93       	push	r24
     448:	9f 93       	push	r25
	cli();
     44a:	f8 94       	cli
	int event_time = ICR1;
     44c:	86 b5       	in	r24, 0x26	; 38
     44e:	97 b5       	in	r25, 0x27	; 39

	if(TCCR1B &(1<<ICES1))
     450:	0e b4       	in	r0, 0x2e	; 46
     452:	06 fe       	sbrs	r0, 6
     454:	08 c0       	rjmp	.+16     	; 0x466 <__vector_11+0x2a>
	{
		rising_time = event_time;
     456:	90 93 96 01 	sts	0x0196, r25
     45a:	80 93 95 01 	sts	0x0195, r24
		TCCR1B &= ~(1<<ICES1);
     45e:	8e b5       	in	r24, 0x2e	; 46
     460:	8f 7b       	andi	r24, 0xBF	; 191
     462:	8e bd       	out	0x2e, r24	; 46
     464:	09 c0       	rjmp	.+18     	; 0x478 <__vector_11+0x3c>
		
	}
	else
	{
		falling_time = event_time;
     466:	90 93 94 01 	sts	0x0194, r25
     46a:	80 93 93 01 	sts	0x0193, r24
		working = 0;
     46e:	10 92 91 01 	sts	0x0191, r1
		TIMSK &= ~(1<<TICIE1);
     472:	87 b7       	in	r24, 0x37	; 55
     474:	8f 7d       	andi	r24, 0xDF	; 223
     476:	87 bf       	out	0x37, r24	; 55
	}
	TIFR |= (1<<ICF1);
     478:	86 b7       	in	r24, 0x36	; 54
     47a:	80 62       	ori	r24, 0x20	; 32
     47c:	86 bf       	out	0x36, r24	; 54
	sei();
     47e:	78 94       	sei
}
     480:	9f 91       	pop	r25
     482:	8f 91       	pop	r24
     484:	0f 90       	pop	r0
     486:	0f be       	out	0x3f, r0	; 63
     488:	0f 90       	pop	r0
     48a:	1f 90       	pop	r1
     48c:	18 95       	reti

0000048e <__vector_14>:

ISR(TIMER1_OVF_vect)
{
     48e:	1f 92       	push	r1
     490:	0f 92       	push	r0
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	0f 92       	push	r0
     496:	11 24       	eor	r1, r1
     498:	8f 93       	push	r24
	overflows++;
     49a:	80 91 92 01 	lds	r24, 0x0192
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	80 93 92 01 	sts	0x0192, r24
}
     4a4:	8f 91       	pop	r24
     4a6:	0f 90       	pop	r0
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	0f 90       	pop	r0
     4ac:	1f 90       	pop	r1
     4ae:	18 95       	reti

000004b0 <ping_read>:

unsigned ping_read()
{
	DDRD |= 0x10;
     4b0:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10;
     4b2:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1);
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 9f 03 	call	0x73e	; 0x73e <wait_ms>
	PORTD &= 0xEF;
     4bc:	94 98       	cbi	0x12, 4	; 18
	DDRD &= 0xEF;
     4be:	8c 98       	cbi	0x11, 4	; 17
	
	TCNT1 = 0;
     4c0:	1d bc       	out	0x2d, r1	; 45
     4c2:	1c bc       	out	0x2c, r1	; 44
	
	TIFR |= (1<<ICF1);
     4c4:	86 b7       	in	r24, 0x36	; 54
     4c6:	80 62       	ori	r24, 0x20	; 32
     4c8:	86 bf       	out	0x36, r24	; 54
	TCCR1B |= (1<<ICES1);
     4ca:	8e b5       	in	r24, 0x2e	; 46
     4cc:	80 64       	ori	r24, 0x40	; 64
     4ce:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 <<1);
     4d0:	8e b5       	in	r24, 0x2e	; 46
     4d2:	82 60       	ori	r24, 0x02	; 2
     4d4:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<TICIE1);
     4d6:	87 b7       	in	r24, 0x37	; 55
     4d8:	80 62       	ori	r24, 0x20	; 32
     4da:	87 bf       	out	0x37, r24	; 55
	working = 1;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	80 93 91 01 	sts	0x0191, r24
	//while (working);
	return falling_time - rising_time;
     4e2:	80 91 93 01 	lds	r24, 0x0193
     4e6:	90 91 94 01 	lds	r25, 0x0194
     4ea:	20 91 95 01 	lds	r18, 0x0195
     4ee:	30 91 96 01 	lds	r19, 0x0196
     4f2:	82 1b       	sub	r24, r18
     4f4:	93 0b       	sbc	r25, r19
}
     4f6:	08 95       	ret

000004f8 <send_pulse>:

void send_pulse()
{
	DDRD |= 0x10;
     4f8:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10;
     4fa:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1);
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 9f 03 	call	0x73e	; 0x73e <wait_ms>
	PORTD &= 0xEF;
     504:	94 98       	cbi	0x12, 4	; 18
	DDRD &= 0xEF;
     506:	8c 98       	cbi	0x11, 4	; 17
	
	TCNT1 = 0;
     508:	1d bc       	out	0x2d, r1	; 45
     50a:	1c bc       	out	0x2c, r1	; 44
	
	TIFR |= (1<<ICF1);
     50c:	86 b7       	in	r24, 0x36	; 54
     50e:	80 62       	ori	r24, 0x20	; 32
     510:	86 bf       	out	0x36, r24	; 54
	TCCR1B |= (1<<ICES1);
     512:	8e b5       	in	r24, 0x2e	; 46
     514:	80 64       	ori	r24, 0x40	; 64
     516:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 <<1);
     518:	8e b5       	in	r24, 0x2e	; 46
     51a:	82 60       	ori	r24, 0x02	; 2
     51c:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<TICIE1);
     51e:	87 b7       	in	r24, 0x37	; 55
     520:	80 62       	ori	r24, 0x20	; 32
     522:	87 bf       	out	0x37, r24	; 55
	working = 1;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	80 93 91 01 	sts	0x0191, r24
     52a:	ff cf       	rjmp	.-2      	; 0x52a <send_pulse+0x32>

0000052c <time2dist>:
}

unsigned long time2dist( unsigned long time )
{
	
	return (time*272000.0)/32000000.0;
     52c:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 ed       	ldi	r19, 0xD0	; 208
     534:	44 e8       	ldi	r20, 0x84	; 132
     536:	58 e4       	ldi	r21, 0x48	; 72
     538:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	34 e2       	ldi	r19, 0x24	; 36
     540:	44 ef       	ldi	r20, 0xF4	; 244
     542:	5b e4       	ldi	r21, 0x4B	; 75
     544:	0e 94 a0 04 	call	0x940	; 0x940 <__divsf3>
     548:	0e 94 08 05 	call	0xa10	; 0xa10 <__fixunssfsi>
	//return (time / 2 * 340 * 100 / 1000.0 / 1000.0);
     54c:	08 95       	ret

0000054e <calcUBRR>:
#include "serial.h"

int calcUBRR()
{
	return FOSC / (8 * BAUD) - 1;
}
     54e:	81 e2       	ldi	r24, 0x21	; 33
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	08 95       	ret

00000554 <init_USART>:

void init_USART( unsigned int ubrr )
{

	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     554:	90 93 90 00 	sts	0x0090, r25
	UBRR0L = (unsigned char)ubrr;
     558:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN)|(1<<TXEN);
     55a:	88 e1       	ldi	r24, 0x18	; 24
     55c:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS)|(3<<UCSZ0);
     55e:	8e e0       	ldi	r24, 0x0E	; 14
     560:	80 93 95 00 	sts	0x0095, r24
	UCSR0A = (1<<U2X);
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	8b b9       	out	0x0b, r24	; 11
}
     568:	08 95       	ret

0000056a <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE)) );
     56a:	5d 9b       	sbis	0x0b, 5	; 11
     56c:	fe cf       	rjmp	.-4      	; 0x56a <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
     56e:	8c b9       	out	0x0c, r24	; 12
}
     570:	08 95       	ret

00000572 <Transmit_String>:
{
	return FOSC / (8 * BAUD) - 1;
}

void Transmit_String(char *str)
{
     572:	ef 92       	push	r14
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	f8 2e       	mov	r15, r24
     580:	e9 2e       	mov	r14, r25
	for(int i = 0; i < strlen(str); i++)
     582:	08 2f       	mov	r16, r24
     584:	19 2f       	mov	r17, r25
     586:	c0 e0       	ldi	r28, 0x00	; 0
     588:	d0 e0       	ldi	r29, 0x00	; 0
     58a:	06 c0       	rjmp	.+12     	; 0x598 <Transmit_String+0x26>
	{
		USART_Transmit(str[i]);
     58c:	f8 01       	movw	r30, r16
     58e:	81 91       	ld	r24, Z+
     590:	8f 01       	movw	r16, r30
     592:	0e 94 b5 02 	call	0x56a	; 0x56a <USART_Transmit>
	return FOSC / (8 * BAUD) - 1;
}

void Transmit_String(char *str)
{
	for(int i = 0; i < strlen(str); i++)
     596:	21 96       	adiw	r28, 0x01	; 1
     598:	ef 2d       	mov	r30, r15
     59a:	fe 2d       	mov	r31, r14
     59c:	df 01       	movw	r26, r30
     59e:	0d 90       	ld	r0, X+
     5a0:	00 20       	and	r0, r0
     5a2:	e9 f7       	brne	.-6      	; 0x59e <Transmit_String+0x2c>
     5a4:	11 97       	sbiw	r26, 0x01	; 1
     5a6:	ae 1b       	sub	r26, r30
     5a8:	bf 0b       	sbc	r27, r31
     5aa:	ca 17       	cp	r28, r26
     5ac:	db 07       	cpc	r29, r27
     5ae:	70 f3       	brcs	.-36     	; 0x58c <Transmit_String+0x1a>
	{
		USART_Transmit(str[i]);
	}
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	08 95       	ret

000005be <USART_Receive>:

unsigned char USART_Receive()
{

	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC)) );
     5be:	5f 9b       	sbis	0x0b, 7	; 11
     5c0:	fe cf       	rjmp	.-4      	; 0x5be <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     5c2:	8c b1       	in	r24, 0x0c	; 12
}
     5c4:	08 95       	ret

000005c6 <init_timer3>:
unsigned pulse_interval = 43000;
unsigned mid_point = 1500;

void init_timer3()
{
	OCR3A = pulse_interval-1;  // number of cycles in the interval
     5c6:	80 91 02 01 	lds	r24, 0x0102
     5ca:	90 91 03 01 	lds	r25, 0x0103
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	90 93 87 00 	sts	0x0087, r25
     5d4:	80 93 86 00 	sts	0x0086, r24
	//OCR3B = mid_point-1;   // if you want to move servo to the middle
	TCCR3A = 0x23;   // set COM and WGM (bits 3 and 2)
     5d8:	83 e2       	ldi	r24, 0x23	; 35
     5da:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0x1A;   // set WGM (bits 1 and 0) and CS
     5de:	8a e1       	ldi	r24, 0x1A	; 26
     5e0:	80 93 8a 00 	sts	0x008A, r24
	TCCR3C = _BV(FOC3B);
     5e4:	80 e4       	ldi	r24, 0x40	; 64
     5e6:	80 93 8c 00 	sts	0x008C, r24
	
	// it’s necessary to set the OC3B (PE4) pin as the output
	DDRE |= _BV(4);   // set Port E pin 4 (OC3B) as output
     5ea:	14 9a       	sbi	0x02, 4	; 2
}
     5ec:	08 95       	ret

000005ee <move_servo>:

void move_servo(unsigned degree)
{
	unsigned pulse_width;   // pulse width in cycles
	pulse_width = 900 + 20 * degree;     // calculate pulse width
     5ee:	28 2f       	mov	r18, r24
     5f0:	39 2f       	mov	r19, r25
     5f2:	c9 01       	movw	r24, r18
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	9c 01       	movw	r18, r24
     5fe:	22 0f       	add	r18, r18
     600:	33 1f       	adc	r19, r19
     602:	22 0f       	add	r18, r18
     604:	33 1f       	adc	r19, r19
     606:	82 0f       	add	r24, r18
     608:	93 1f       	adc	r25, r19
	//pulse_width = 4400;
	OCR3B = pulse_width-1;  // set pulse width
     60a:	8d 57       	subi	r24, 0x7D	; 125
     60c:	9c 4f       	sbci	r25, 0xFC	; 252
     60e:	90 93 85 00 	sts	0x0085, r25
     612:	80 93 84 00 	sts	0x0084, r24
	wait_ms(200);
     616:	88 ec       	ldi	r24, 0xC8	; 200
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 9f 03 	call	0x73e	; 0x73e <wait_ms>

	// you need to call wait_ms(20) here to enforce a delay for the servo to
	/// move to the position
}
     61e:	08 95       	ret

00000620 <countConvert>:

int countConvert(int c)
{
	return (c-900)/20;
     620:	84 58       	subi	r24, 0x84	; 132
     622:	93 40       	sbci	r25, 0x03	; 3
     624:	64 e1       	ldi	r22, 0x14	; 20
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	0e 94 ef 07 	call	0xfde	; 0xfde <__divmodhi4>
     62c:	86 2f       	mov	r24, r22
     62e:	97 2f       	mov	r25, r23
     630:	08 95       	ret

00000632 <main>:
#include "serial.h"

#define BAUD 57600

int main(void)
{
     632:	cf 92       	push	r12
     634:	df 92       	push	r13
     636:	ef 92       	push	r14
     638:	ff 92       	push	r15
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
	//lprintf("%d", 4);
	init_ADC();
     642:	0e 94 a8 00 	call	0x150	; 0x150 <init_ADC>
	init_timer3();
     646:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <init_timer3>
	init_timer();
     64a:	0e 94 17 02 	call	0x42e	; 0x42e <init_timer>
	init_USART(calcUBRR(BAUD));
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	71 ee       	ldi	r23, 0xE1	; 225
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 a7 02 	call	0x54e	; 0x54e <calcUBRR>
     65a:	0e 94 aa 02 	call	0x554	; 0x554 <init_USART>
	char * str = "Degrees\tIR Distance (cm)\tSonar Distance (cm)\n\n\r";
	move_servo(0);
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 f7 02 	call	0x5ee	; 0x5ee <move_servo>
     666:	c0 e0       	ldi	r28, 0x00	; 0
     668:	d0 e0       	ldi	r29, 0x00	; 0
	char degrees = 0;
    while(1)
    {
        //send_pulse();
		Transmit_String(str);
     66a:	04 e0       	ldi	r16, 0x04	; 4
     66c:	11 e0       	ldi	r17, 0x01	; 1
		sprintf(str, "%d\t%d\t%d\n\r", degrees, ir_distance(), time2dist(ping_read()));
     66e:	0f 2e       	mov	r0, r31
     670:	f4 e3       	ldi	r31, 0x34	; 52
     672:	cf 2e       	mov	r12, r31
     674:	f1 e0       	ldi	r31, 0x01	; 1
     676:	df 2e       	mov	r13, r31
     678:	f0 2d       	mov	r31, r0
	move_servo(0);
	char degrees = 0;
    while(1)
    {
        //send_pulse();
		Transmit_String(str);
     67a:	c8 01       	movw	r24, r16
     67c:	0e 94 b9 02 	call	0x572	; 0x572 <Transmit_String>
		sprintf(str, "%d\t%d\t%d\n\r", degrees, ir_distance(), time2dist(ping_read()));
     680:	0e 94 b5 00 	call	0x16a	; 0x16a <ir_distance>
     684:	7c 01       	movw	r14, r24
     686:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ping_read>
     68a:	bc 01       	movw	r22, r24
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	0e 94 96 02 	call	0x52c	; 0x52c <time2dist>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	2d b7       	in	r18, 0x3d	; 61
     69a:	3e b7       	in	r19, 0x3e	; 62
     69c:	2c 50       	subi	r18, 0x0C	; 12
     69e:	30 40       	sbci	r19, 0x00	; 0
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	3e bf       	out	0x3e, r19	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	2d bf       	out	0x3d, r18	; 61
     6aa:	2f 5f       	subi	r18, 0xFF	; 255
     6ac:	3f 4f       	sbci	r19, 0xFF	; 255
     6ae:	ed b7       	in	r30, 0x3d	; 61
     6b0:	fe b7       	in	r31, 0x3e	; 62
     6b2:	12 83       	std	Z+2, r17	; 0x02
     6b4:	01 83       	std	Z+1, r16	; 0x01
     6b6:	f9 01       	movw	r30, r18
     6b8:	d3 82       	std	Z+3, r13	; 0x03
     6ba:	c2 82       	std	Z+2, r12	; 0x02
     6bc:	d5 83       	std	Z+5, r29	; 0x05
     6be:	c4 83       	std	Z+4, r28	; 0x04
     6c0:	f7 82       	std	Z+7, r15	; 0x07
     6c2:	e6 82       	std	Z+6, r14	; 0x06
     6c4:	80 87       	std	Z+8, r24	; 0x08
     6c6:	91 87       	std	Z+9, r25	; 0x09
     6c8:	a2 87       	std	Z+10, r26	; 0x0a
     6ca:	b3 87       	std	Z+11, r27	; 0x0b
     6cc:	0e 94 26 08 	call	0x104c	; 0x104c <sprintf>
		move_servo(degrees);
     6d0:	2d b7       	in	r18, 0x3d	; 61
     6d2:	3e b7       	in	r19, 0x3e	; 62
     6d4:	24 5f       	subi	r18, 0xF4	; 244
     6d6:	3f 4f       	sbci	r19, 0xFF	; 255
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	3e bf       	out	0x3e, r19	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	2d bf       	out	0x3d, r18	; 61
     6e2:	ce 01       	movw	r24, r28
     6e4:	0e 94 f7 02 	call	0x5ee	; 0x5ee <move_servo>
     6e8:	22 96       	adiw	r28, 0x02	; 2
		degrees += 2;
		if(degrees > 180)
     6ea:	c6 3b       	cpi	r28, 0xB6	; 182
     6ec:	d1 05       	cpc	r29, r1
     6ee:	29 f6       	brne	.-118    	; 0x67a <main+0x48>
			break;
    }
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	08 95       	ret

00000706 <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
     706:	10 92 98 01 	sts	0x0198, r1
     70a:	10 92 97 01 	sts	0x0197, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
     70e:	88 23       	and	r24, r24
     710:	31 f4       	brne	.+12     	; 0x71e <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
     712:	8b e0       	ldi	r24, 0x0B	; 11
     714:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
     716:	87 b7       	in	r24, 0x37	; 55
     718:	80 68       	ori	r24, 0x80	; 128
     71a:	87 bf       	out	0x37, r24	; 55
     71c:	07 c0       	rjmp	.+14     	; 0x72c <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	29 f4       	brne	.+10     	; 0x72c <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
     722:	89 e0       	ldi	r24, 0x09	; 9
     724:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
     726:	87 b7       	in	r24, 0x37	; 55
     728:	80 68       	ori	r24, 0x80	; 128
     72a:	87 bf       	out	0x37, r24	; 55
	}
	sei();
     72c:	78 94       	sei
}
     72e:	08 95       	ret

00000730 <timer2_stop>:


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
     730:	87 b7       	in	r24, 0x37	; 55
     732:	8f 77       	andi	r24, 0x7F	; 127
     734:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
     736:	85 b5       	in	r24, 0x25	; 37
     738:	8f 77       	andi	r24, 0x7F	; 127
     73a:	85 bd       	out	0x25, r24	; 37
}
     73c:	08 95       	ret

0000073e <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
     744:	8a ef       	ldi	r24, 0xFA	; 250
     746:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
     748:	10 92 98 01 	sts	0x0198, r1
     74c:	10 92 97 01 	sts	0x0197, r1
	timer2_start(0);
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	0e 94 83 03 	call	0x706	; 0x706 <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
     756:	80 91 97 01 	lds	r24, 0x0197
     75a:	90 91 98 01 	lds	r25, 0x0198
     75e:	8c 17       	cp	r24, r28
     760:	9d 07       	cpc	r25, r29
     762:	c8 f3       	brcs	.-14     	; 0x756 <wait_ms+0x18>

	timer2_stop();
     764:	0e 94 98 03 	call	0x730	; 0x730 <timer2_stop>
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
     76e:	1f 92       	push	r1
     770:	0f 92       	push	r0
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	0f 92       	push	r0
     776:	11 24       	eor	r1, r1
     778:	8f 93       	push	r24
     77a:	9f 93       	push	r25
	timer2_tick++;
     77c:	80 91 97 01 	lds	r24, 0x0197
     780:	90 91 98 01 	lds	r25, 0x0198
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	90 93 98 01 	sts	0x0198, r25
     78a:	80 93 97 01 	sts	0x0197, r24
}
     78e:	9f 91       	pop	r25
     790:	8f 91       	pop	r24
     792:	0f 90       	pop	r0
     794:	0f be       	out	0x3f, r0	; 63
     796:	0f 90       	pop	r0
     798:	1f 90       	pop	r1
     79a:	18 95       	reti

0000079c <init_push_buttons>:



/// Initialize PORTC to accept push buttons as input
void init_push_buttons(void) {
	DDRC &= 0xC0;  //Setting PC0-PC5 to input
     79c:	84 b3       	in	r24, 0x14	; 20
     79e:	80 7c       	andi	r24, 0xC0	; 192
     7a0:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0x3F; //Setting pins' pull up resistors
     7a2:	85 b3       	in	r24, 0x15	; 21
     7a4:	8f 63       	ori	r24, 0x3F	; 63
     7a6:	85 bb       	out	0x15, r24	; 21
}
     7a8:	08 95       	ret

000007aa <read_push_buttons>:
/**
 * Return the position of button being pushed.
 * @return the position of the button being pushed.  A 1 is the rightmost button.  0 indicates no button being pressed
 */
char read_push_buttons(void) {
	switch(PINC & 0b00111111)
     7aa:	83 b3       	in	r24, 0x13	; 19
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	8f 73       	andi	r24, 0x3F	; 63
     7b0:	90 70       	andi	r25, 0x00	; 0
     7b2:	87 33       	cpi	r24, 0x37	; 55
     7b4:	91 05       	cpc	r25, r1
     7b6:	b1 f0       	breq	.+44     	; 0x7e4 <read_push_buttons+0x3a>
     7b8:	88 33       	cpi	r24, 0x38	; 56
     7ba:	91 05       	cpc	r25, r1
     7bc:	3c f4       	brge	.+14     	; 0x7cc <read_push_buttons+0x22>
     7be:	8f 31       	cpi	r24, 0x1F	; 31
     7c0:	91 05       	cpc	r25, r1
     7c2:	71 f0       	breq	.+28     	; 0x7e0 <read_push_buttons+0x36>
     7c4:	8f 32       	cpi	r24, 0x2F	; 47
     7c6:	91 05       	cpc	r25, r1
     7c8:	a9 f4       	brne	.+42     	; 0x7f4 <read_push_buttons+0x4a>
     7ca:	16 c0       	rjmp	.+44     	; 0x7f8 <read_push_buttons+0x4e>
     7cc:	8d 33       	cpi	r24, 0x3D	; 61
     7ce:	91 05       	cpc	r25, r1
     7d0:	69 f0       	breq	.+26     	; 0x7ec <read_push_buttons+0x42>
     7d2:	8e 33       	cpi	r24, 0x3E	; 62
     7d4:	91 05       	cpc	r25, r1
     7d6:	61 f0       	breq	.+24     	; 0x7f0 <read_push_buttons+0x46>
     7d8:	8b 33       	cpi	r24, 0x3B	; 59
     7da:	91 05       	cpc	r25, r1
     7dc:	59 f4       	brne	.+22     	; 0x7f4 <read_push_buttons+0x4a>
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <read_push_buttons+0x3e>
	{
		case 0b00011111:
		return '6';
     7e0:	86 e3       	ldi	r24, 0x36	; 54
     7e2:	08 95       	ret
		case 0b00101111:
		return '5';
		case 0b00110111:
		return '4';
     7e4:	84 e3       	ldi	r24, 0x34	; 52
     7e6:	08 95       	ret
		case 0b00111011:
		return '3';
     7e8:	83 e3       	ldi	r24, 0x33	; 51
     7ea:	08 95       	ret
		case 0b00111101:
		return '2';
     7ec:	82 e3       	ldi	r24, 0x32	; 50
     7ee:	08 95       	ret
		case 0b00111110:
		return '1';
     7f0:	81 e3       	ldi	r24, 0x31	; 49
     7f2:	08 95       	ret
		default:
		return '0';
     7f4:	80 e3       	ldi	r24, 0x30	; 48
     7f6:	08 95       	ret
	switch(PINC & 0b00111111)
	{
		case 0b00011111:
		return '6';
		case 0b00101111:
		return '5';
     7f8:	85 e3       	ldi	r24, 0x35	; 53
		case 0b00111110:
		return '1';
		default:
		return '0';
	}
}
     7fa:	08 95       	ret

000007fc <shaft_encoder_init>:



/// Initialize PORTC for input from the shaft encoder
void shaft_encoder_init(void) {
	DDRC &= 0x3F;	//Setting PC6-PC7 to input
     7fc:	84 b3       	in	r24, 0x14	; 20
     7fe:	8f 73       	andi	r24, 0x3F	; 63
     800:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0xC0;	//Setting pins' pull-up resistors
     802:	85 b3       	in	r24, 0x15	; 21
     804:	80 6c       	ori	r24, 0xC0	; 192
     806:	85 bb       	out	0x15, r24	; 21
}
     808:	08 95       	ret

0000080a <read_shaft_encoder>:
	// static variable to store the old value of A and B.
	// This variable will only be initialized the first time you call this function.
	static char old_value = 0b11000000;		// Step 2: Based on how you decided to mask PINC in step 1, what would new_value be if the switch is in a groove?

	// Function variables
	char new_value = PINC & 0b11000000;			// Step 1: Decide how to read PINC so that the push buttons are masked
     80a:	93 b3       	in	r25, 0x13	; 19
     80c:	90 7c       	andi	r25, 0xC0	; 192
	signed char rotation = 0;

	// If the knob was in a groove
	if (old_value == 0b11000000) {			// Step 3: Enter here what you did for step 2.
     80e:	80 91 3f 01 	lds	r24, 0x013F
     812:	80 3c       	cpi	r24, 0xC0	; 192
     814:	39 f4       	brne	.+14     	; 0x824 <read_shaft_encoder+0x1a>
	if (new_value == 0b01000000)		// What will new_value be if you're rotating CW out of a groove
	rotation = 1;
	if (new_value == 0b10000000)		// What will new_value be if you're rotating CCW out of a groove
     816:	90 38       	cpi	r25, 0x80	; 128
     818:	39 f0       	breq	.+14     	; 0x828 <read_shaft_encoder+0x1e>
	// This variable will only be initialized the first time you call this function.
	static char old_value = 0b11000000;		// Step 2: Based on how you decided to mask PINC in step 1, what would new_value be if the switch is in a groove?

	// Function variables
	char new_value = PINC & 0b11000000;			// Step 1: Decide how to read PINC so that the push buttons are masked
	signed char rotation = 0;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 34       	cpi	r25, 0x40	; 64
     81e:	29 f0       	breq	.+10     	; 0x82a <read_shaft_encoder+0x20>
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	03 c0       	rjmp	.+6      	; 0x82a <read_shaft_encoder+0x20>
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	01 c0       	rjmp	.+2      	; 0x82a <read_shaft_encoder+0x20>
	// If the knob was in a groove
	if (old_value == 0b11000000) {			// Step 3: Enter here what you did for step 2.
	if (new_value == 0b01000000)		// What will new_value be if you're rotating CW out of a groove
	rotation = 1;
	if (new_value == 0b10000000)		// What will new_value be if you're rotating CCW out of a groove
	rotation = -1;
     828:	8f ef       	ldi	r24, 0xFF	; 255
		}

		old_value = new_value;
     82a:	90 93 3f 01 	sts	0x013F, r25

		return rotation;
}
     82e:	08 95       	ret

00000830 <stepper_init>:



/// Initialize PORTE to control the stepper motor
void stepper_init(void) {
	DDRE |= 0xF0;  	//Setting PE4-PE7 to output
     830:	82 b1       	in	r24, 0x02	; 2
     832:	80 6f       	ori	r24, 0xF0	; 240
     834:	82 b9       	out	0x02, r24	; 2
	PORTE &= 0x8F;  //Initial postion (0b1000) PE4-PE7
     836:	83 b1       	in	r24, 0x03	; 3
     838:	8f 78       	andi	r24, 0x8F	; 143
     83a:	83 b9       	out	0x03, r24	; 3
	wait_ms(2);
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 9f 03 	call	0x73e	; 0x73e <wait_ms>
	PORTE &= 0x0F;  //Clear PE4-PE7
     844:	83 b1       	in	r24, 0x03	; 3
     846:	8f 70       	andi	r24, 0x0F	; 15
     848:	83 b9       	out	0x03, r24	; 3
}
     84a:	08 95       	ret

0000084c <move_stepper_motor_by_step>:
 * Turn the stepper motor a given number of steps. 
 *
 * @param num_steps A value between 1 and 200 steps (1.8 to 360 degrees)
 * @param direction Indication of direction: 1 for CW and -1 for CCW 
 */
void  move_stepper_motor_by_step(int num_steps, int direction) {
     84c:	bf 92       	push	r11
     84e:	cf 92       	push	r12
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	7c 01       	movw	r14, r24
	if(direction == 1)
     860:	61 30       	cpi	r22, 0x01	; 1
     862:	71 05       	cpc	r23, r1
     864:	89 f5       	brne	.+98     	; 0x8c8 <move_stepper_motor_by_step+0x7c>
	{
		uint8_t current_pos = PORTE >> 4;
     866:	c3 b1       	in	r28, 0x03	; 3
		for(int i = 0; i < num_steps; i++)
     868:	18 16       	cp	r1, r24
     86a:	19 06       	cpc	r1, r25
     86c:	0c f0       	brlt	.+2      	; 0x870 <move_stepper_motor_by_step+0x24>
     86e:	5e c0       	rjmp	.+188    	; 0x92c <move_stepper_motor_by_step+0xe0>
 * @param direction Indication of direction: 1 for CW and -1 for CCW 
 */
void  move_stepper_motor_by_step(int num_steps, int direction) {
	if(direction == 1)
	{
		uint8_t current_pos = PORTE >> 4;
     870:	c2 95       	swap	r28
     872:	cf 70       	andi	r28, 0x0F	; 15
		for(int i = 0; i < num_steps; i++)
     874:	00 e0       	ldi	r16, 0x00	; 0
     876:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(current_pos == 1)
			{
				current_pos = 2;
     878:	dd 24       	eor	r13, r13
     87a:	68 94       	set
     87c:	d1 f8       	bld	r13, 1
			}
			else if(current_pos == 2)
			{
				current_pos = 4;
     87e:	cc 24       	eor	r12, r12
     880:	68 94       	set
     882:	c2 f8       	bld	r12, 2
			{
				current_pos = 8;
			}
			else
			{
				current_pos = 1;
     884:	d1 e0       	ldi	r29, 0x01	; 1
			{
				current_pos = 4;
			}
			else if(current_pos == 4)
			{
				current_pos = 8;
     886:	bb 24       	eor	r11, r11
     888:	68 94       	set
     88a:	b3 f8       	bld	r11, 3
	if(direction == 1)
	{
		uint8_t current_pos = PORTE >> 4;
		for(int i = 0; i < num_steps; i++)
		{
			if(current_pos == 1)
     88c:	c1 30       	cpi	r28, 0x01	; 1
     88e:	31 f0       	breq	.+12     	; 0x89c <move_stepper_motor_by_step+0x50>
			{
				current_pos = 2;
			}
			else if(current_pos == 2)
     890:	c2 30       	cpi	r28, 0x02	; 2
     892:	31 f0       	breq	.+12     	; 0x8a0 <move_stepper_motor_by_step+0x54>
			{
				current_pos = 4;
			}
			else if(current_pos == 4)
     894:	c4 30       	cpi	r28, 0x04	; 4
     896:	31 f4       	brne	.+12     	; 0x8a4 <move_stepper_motor_by_step+0x58>
			{
				current_pos = 8;
     898:	cb 2d       	mov	r28, r11
     89a:	05 c0       	rjmp	.+10     	; 0x8a6 <move_stepper_motor_by_step+0x5a>
		uint8_t current_pos = PORTE >> 4;
		for(int i = 0; i < num_steps; i++)
		{
			if(current_pos == 1)
			{
				current_pos = 2;
     89c:	cd 2d       	mov	r28, r13
     89e:	03 c0       	rjmp	.+6      	; 0x8a6 <move_stepper_motor_by_step+0x5a>
			}
			else if(current_pos == 2)
			{
				current_pos = 4;
     8a0:	cc 2d       	mov	r28, r12
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <move_stepper_motor_by_step+0x5a>
			{
				current_pos = 8;
			}
			else
			{
				current_pos = 1;
     8a4:	cd 2f       	mov	r28, r29
			}
			PORTE = (PORTE & 0b00001111) | (current_pos << 4);
     8a6:	83 b1       	in	r24, 0x03	; 3
     8a8:	9c 2f       	mov	r25, r28
     8aa:	92 95       	swap	r25
     8ac:	90 7f       	andi	r25, 0xF0	; 240
     8ae:	8f 70       	andi	r24, 0x0F	; 15
     8b0:	89 2b       	or	r24, r25
     8b2:	83 b9       	out	0x03, r24	; 3
			wait_ms(2);
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 9f 03 	call	0x73e	; 0x73e <wait_ms>
 */
void  move_stepper_motor_by_step(int num_steps, int direction) {
	if(direction == 1)
	{
		uint8_t current_pos = PORTE >> 4;
		for(int i = 0; i < num_steps; i++)
     8bc:	0f 5f       	subi	r16, 0xFF	; 255
     8be:	1f 4f       	sbci	r17, 0xFF	; 255
     8c0:	0e 15       	cp	r16, r14
     8c2:	1f 05       	cpc	r17, r15
     8c4:	19 f7       	brne	.-58     	; 0x88c <move_stepper_motor_by_step+0x40>
     8c6:	32 c0       	rjmp	.+100    	; 0x92c <move_stepper_motor_by_step+0xe0>
			}
			PORTE = (PORTE & 0b00001111) | (current_pos << 4);
			wait_ms(2);
		}
	}
	else if(direction == -1)
     8c8:	8f ef       	ldi	r24, 0xFF	; 255
     8ca:	6f 3f       	cpi	r22, 0xFF	; 255
     8cc:	78 07       	cpc	r23, r24
     8ce:	71 f5       	brne	.+92     	; 0x92c <move_stepper_motor_by_step+0xe0>
	{
		uint8_t current_pos = PORTE >> 4;
     8d0:	c3 b1       	in	r28, 0x03	; 3
		for(int i = 0; i < num_steps; i++)
     8d2:	1e 14       	cp	r1, r14
     8d4:	1f 04       	cpc	r1, r15
     8d6:	54 f5       	brge	.+84     	; 0x92c <move_stepper_motor_by_step+0xe0>
			wait_ms(2);
		}
	}
	else if(direction == -1)
	{
		uint8_t current_pos = PORTE >> 4;
     8d8:	c2 95       	swap	r28
     8da:	cf 70       	andi	r28, 0x0F	; 15
		for(int i = 0; i < num_steps; i++)
     8dc:	00 e0       	ldi	r16, 0x00	; 0
     8de:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(current_pos == 1)
			{
				current_pos = 8;
     8e0:	dd 24       	eor	r13, r13
     8e2:	68 94       	set
     8e4:	d3 f8       	bld	r13, 3
			}
			else if(current_pos == 2)
			{
				current_pos = 1;
     8e6:	cc 24       	eor	r12, r12
     8e8:	c3 94       	inc	r12
			{
				current_pos = 2;
			}
			else
			{
				current_pos = 4;
     8ea:	d4 e0       	ldi	r29, 0x04	; 4
			{
				current_pos = 1;
			}
			else if(current_pos == 4)
			{
				current_pos = 2;
     8ec:	bb 24       	eor	r11, r11
     8ee:	68 94       	set
     8f0:	b1 f8       	bld	r11, 1
	else if(direction == -1)
	{
		uint8_t current_pos = PORTE >> 4;
		for(int i = 0; i < num_steps; i++)
		{
			if(current_pos == 1)
     8f2:	c1 30       	cpi	r28, 0x01	; 1
     8f4:	31 f0       	breq	.+12     	; 0x902 <move_stepper_motor_by_step+0xb6>
			{
				current_pos = 8;
			}
			else if(current_pos == 2)
     8f6:	c2 30       	cpi	r28, 0x02	; 2
     8f8:	31 f0       	breq	.+12     	; 0x906 <move_stepper_motor_by_step+0xba>
			{
				current_pos = 1;
			}
			else if(current_pos == 4)
     8fa:	c4 30       	cpi	r28, 0x04	; 4
     8fc:	31 f4       	brne	.+12     	; 0x90a <move_stepper_motor_by_step+0xbe>
			{
				current_pos = 2;
     8fe:	cb 2d       	mov	r28, r11
     900:	05 c0       	rjmp	.+10     	; 0x90c <move_stepper_motor_by_step+0xc0>
		uint8_t current_pos = PORTE >> 4;
		for(int i = 0; i < num_steps; i++)
		{
			if(current_pos == 1)
			{
				current_pos = 8;
     902:	cd 2d       	mov	r28, r13
     904:	03 c0       	rjmp	.+6      	; 0x90c <move_stepper_motor_by_step+0xc0>
			}
			else if(current_pos == 2)
			{
				current_pos = 1;
     906:	cc 2d       	mov	r28, r12
     908:	01 c0       	rjmp	.+2      	; 0x90c <move_stepper_motor_by_step+0xc0>
			{
				current_pos = 2;
			}
			else
			{
				current_pos = 4;
     90a:	cd 2f       	mov	r28, r29
			}
			PORTE = (PORTE & 0b00001111) | (current_pos << 4);
     90c:	83 b1       	in	r24, 0x03	; 3
     90e:	9c 2f       	mov	r25, r28
     910:	92 95       	swap	r25
     912:	90 7f       	andi	r25, 0xF0	; 240
     914:	8f 70       	andi	r24, 0x0F	; 15
     916:	89 2b       	or	r24, r25
     918:	83 b9       	out	0x03, r24	; 3
			wait_ms(2);
     91a:	82 e0       	ldi	r24, 0x02	; 2
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 9f 03 	call	0x73e	; 0x73e <wait_ms>
		}
	}
	else if(direction == -1)
	{
		uint8_t current_pos = PORTE >> 4;
		for(int i = 0; i < num_steps; i++)
     922:	0f 5f       	subi	r16, 0xFF	; 255
     924:	1f 4f       	sbci	r17, 0xFF	; 255
     926:	0e 15       	cp	r16, r14
     928:	1f 05       	cpc	r17, r15
     92a:	19 f7       	brne	.-58     	; 0x8f2 <move_stepper_motor_by_step+0xa6>
			}
			PORTE = (PORTE & 0b00001111) | (current_pos << 4);
			wait_ms(2);
		}
	}
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	08 95       	ret

00000940 <__divsf3>:
     940:	0c d0       	rcall	.+24     	; 0x95a <__divsf3x>
     942:	e6 c0       	rjmp	.+460    	; 0xb10 <__fp_round>
     944:	de d0       	rcall	.+444    	; 0xb02 <__fp_pscB>
     946:	40 f0       	brcs	.+16     	; 0x958 <__divsf3+0x18>
     948:	d5 d0       	rcall	.+426    	; 0xaf4 <__fp_pscA>
     94a:	30 f0       	brcs	.+12     	; 0x958 <__divsf3+0x18>
     94c:	21 f4       	brne	.+8      	; 0x956 <__divsf3+0x16>
     94e:	5f 3f       	cpi	r21, 0xFF	; 255
     950:	19 f0       	breq	.+6      	; 0x958 <__divsf3+0x18>
     952:	c7 c0       	rjmp	.+398    	; 0xae2 <__fp_inf>
     954:	51 11       	cpse	r21, r1
     956:	10 c1       	rjmp	.+544    	; 0xb78 <__fp_szero>
     958:	ca c0       	rjmp	.+404    	; 0xaee <__fp_nan>

0000095a <__divsf3x>:
     95a:	eb d0       	rcall	.+470    	; 0xb32 <__fp_split3>
     95c:	98 f3       	brcs	.-26     	; 0x944 <__divsf3+0x4>

0000095e <__divsf3_pse>:
     95e:	99 23       	and	r25, r25
     960:	c9 f3       	breq	.-14     	; 0x954 <__divsf3+0x14>
     962:	55 23       	and	r21, r21
     964:	b1 f3       	breq	.-20     	; 0x952 <__divsf3+0x12>
     966:	95 1b       	sub	r25, r21
     968:	55 0b       	sbc	r21, r21
     96a:	bb 27       	eor	r27, r27
     96c:	aa 27       	eor	r26, r26
     96e:	62 17       	cp	r22, r18
     970:	73 07       	cpc	r23, r19
     972:	84 07       	cpc	r24, r20
     974:	38 f0       	brcs	.+14     	; 0x984 <__divsf3_pse+0x26>
     976:	9f 5f       	subi	r25, 0xFF	; 255
     978:	5f 4f       	sbci	r21, 0xFF	; 255
     97a:	22 0f       	add	r18, r18
     97c:	33 1f       	adc	r19, r19
     97e:	44 1f       	adc	r20, r20
     980:	aa 1f       	adc	r26, r26
     982:	a9 f3       	breq	.-22     	; 0x96e <__divsf3_pse+0x10>
     984:	33 d0       	rcall	.+102    	; 0x9ec <__divsf3_pse+0x8e>
     986:	0e 2e       	mov	r0, r30
     988:	3a f0       	brmi	.+14     	; 0x998 <__divsf3_pse+0x3a>
     98a:	e0 e8       	ldi	r30, 0x80	; 128
     98c:	30 d0       	rcall	.+96     	; 0x9ee <__divsf3_pse+0x90>
     98e:	91 50       	subi	r25, 0x01	; 1
     990:	50 40       	sbci	r21, 0x00	; 0
     992:	e6 95       	lsr	r30
     994:	00 1c       	adc	r0, r0
     996:	ca f7       	brpl	.-14     	; 0x98a <__divsf3_pse+0x2c>
     998:	29 d0       	rcall	.+82     	; 0x9ec <__divsf3_pse+0x8e>
     99a:	fe 2f       	mov	r31, r30
     99c:	27 d0       	rcall	.+78     	; 0x9ec <__divsf3_pse+0x8e>
     99e:	66 0f       	add	r22, r22
     9a0:	77 1f       	adc	r23, r23
     9a2:	88 1f       	adc	r24, r24
     9a4:	bb 1f       	adc	r27, r27
     9a6:	26 17       	cp	r18, r22
     9a8:	37 07       	cpc	r19, r23
     9aa:	48 07       	cpc	r20, r24
     9ac:	ab 07       	cpc	r26, r27
     9ae:	b0 e8       	ldi	r27, 0x80	; 128
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <__divsf3_pse+0x56>
     9b2:	bb 0b       	sbc	r27, r27
     9b4:	80 2d       	mov	r24, r0
     9b6:	bf 01       	movw	r22, r30
     9b8:	ff 27       	eor	r31, r31
     9ba:	93 58       	subi	r25, 0x83	; 131
     9bc:	5f 4f       	sbci	r21, 0xFF	; 255
     9be:	2a f0       	brmi	.+10     	; 0x9ca <__divsf3_pse+0x6c>
     9c0:	9e 3f       	cpi	r25, 0xFE	; 254
     9c2:	51 05       	cpc	r21, r1
     9c4:	68 f0       	brcs	.+26     	; 0x9e0 <__divsf3_pse+0x82>
     9c6:	8d c0       	rjmp	.+282    	; 0xae2 <__fp_inf>
     9c8:	d7 c0       	rjmp	.+430    	; 0xb78 <__fp_szero>
     9ca:	5f 3f       	cpi	r21, 0xFF	; 255
     9cc:	ec f3       	brlt	.-6      	; 0x9c8 <__divsf3_pse+0x6a>
     9ce:	98 3e       	cpi	r25, 0xE8	; 232
     9d0:	dc f3       	brlt	.-10     	; 0x9c8 <__divsf3_pse+0x6a>
     9d2:	86 95       	lsr	r24
     9d4:	77 95       	ror	r23
     9d6:	67 95       	ror	r22
     9d8:	b7 95       	ror	r27
     9da:	f7 95       	ror	r31
     9dc:	9f 5f       	subi	r25, 0xFF	; 255
     9de:	c9 f7       	brne	.-14     	; 0x9d2 <__divsf3_pse+0x74>
     9e0:	88 0f       	add	r24, r24
     9e2:	91 1d       	adc	r25, r1
     9e4:	96 95       	lsr	r25
     9e6:	87 95       	ror	r24
     9e8:	97 f9       	bld	r25, 7
     9ea:	08 95       	ret
     9ec:	e1 e0       	ldi	r30, 0x01	; 1
     9ee:	66 0f       	add	r22, r22
     9f0:	77 1f       	adc	r23, r23
     9f2:	88 1f       	adc	r24, r24
     9f4:	bb 1f       	adc	r27, r27
     9f6:	62 17       	cp	r22, r18
     9f8:	73 07       	cpc	r23, r19
     9fa:	84 07       	cpc	r24, r20
     9fc:	ba 07       	cpc	r27, r26
     9fe:	20 f0       	brcs	.+8      	; 0xa08 <__divsf3_pse+0xaa>
     a00:	62 1b       	sub	r22, r18
     a02:	73 0b       	sbc	r23, r19
     a04:	84 0b       	sbc	r24, r20
     a06:	ba 0b       	sbc	r27, r26
     a08:	ee 1f       	adc	r30, r30
     a0a:	88 f7       	brcc	.-30     	; 0x9ee <__divsf3_pse+0x90>
     a0c:	e0 95       	com	r30
     a0e:	08 95       	ret

00000a10 <__fixunssfsi>:
     a10:	98 d0       	rcall	.+304    	; 0xb42 <__fp_splitA>
     a12:	88 f0       	brcs	.+34     	; 0xa36 <__fixunssfsi+0x26>
     a14:	9f 57       	subi	r25, 0x7F	; 127
     a16:	90 f0       	brcs	.+36     	; 0xa3c <__fixunssfsi+0x2c>
     a18:	b9 2f       	mov	r27, r25
     a1a:	99 27       	eor	r25, r25
     a1c:	b7 51       	subi	r27, 0x17	; 23
     a1e:	a0 f0       	brcs	.+40     	; 0xa48 <__fixunssfsi+0x38>
     a20:	d1 f0       	breq	.+52     	; 0xa56 <__fixunssfsi+0x46>
     a22:	66 0f       	add	r22, r22
     a24:	77 1f       	adc	r23, r23
     a26:	88 1f       	adc	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	1a f0       	brmi	.+6      	; 0xa32 <__fixunssfsi+0x22>
     a2c:	ba 95       	dec	r27
     a2e:	c9 f7       	brne	.-14     	; 0xa22 <__fixunssfsi+0x12>
     a30:	12 c0       	rjmp	.+36     	; 0xa56 <__fixunssfsi+0x46>
     a32:	b1 30       	cpi	r27, 0x01	; 1
     a34:	81 f0       	breq	.+32     	; 0xa56 <__fixunssfsi+0x46>
     a36:	9f d0       	rcall	.+318    	; 0xb76 <__fp_zero>
     a38:	b1 e0       	ldi	r27, 0x01	; 1
     a3a:	08 95       	ret
     a3c:	9c c0       	rjmp	.+312    	; 0xb76 <__fp_zero>
     a3e:	67 2f       	mov	r22, r23
     a40:	78 2f       	mov	r23, r24
     a42:	88 27       	eor	r24, r24
     a44:	b8 5f       	subi	r27, 0xF8	; 248
     a46:	39 f0       	breq	.+14     	; 0xa56 <__fixunssfsi+0x46>
     a48:	b9 3f       	cpi	r27, 0xF9	; 249
     a4a:	cc f3       	brlt	.-14     	; 0xa3e <__fixunssfsi+0x2e>
     a4c:	86 95       	lsr	r24
     a4e:	77 95       	ror	r23
     a50:	67 95       	ror	r22
     a52:	b3 95       	inc	r27
     a54:	d9 f7       	brne	.-10     	; 0xa4c <__fixunssfsi+0x3c>
     a56:	3e f4       	brtc	.+14     	; 0xa66 <__fixunssfsi+0x56>
     a58:	90 95       	com	r25
     a5a:	80 95       	com	r24
     a5c:	70 95       	com	r23
     a5e:	61 95       	neg	r22
     a60:	7f 4f       	sbci	r23, 0xFF	; 255
     a62:	8f 4f       	sbci	r24, 0xFF	; 255
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
     a66:	08 95       	ret

00000a68 <__floatunsisf>:
     a68:	e8 94       	clt
     a6a:	09 c0       	rjmp	.+18     	; 0xa7e <__floatsisf+0x12>

00000a6c <__floatsisf>:
     a6c:	97 fb       	bst	r25, 7
     a6e:	3e f4       	brtc	.+14     	; 0xa7e <__floatsisf+0x12>
     a70:	90 95       	com	r25
     a72:	80 95       	com	r24
     a74:	70 95       	com	r23
     a76:	61 95       	neg	r22
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	8f 4f       	sbci	r24, 0xFF	; 255
     a7c:	9f 4f       	sbci	r25, 0xFF	; 255
     a7e:	99 23       	and	r25, r25
     a80:	a9 f0       	breq	.+42     	; 0xaac <__floatsisf+0x40>
     a82:	f9 2f       	mov	r31, r25
     a84:	96 e9       	ldi	r25, 0x96	; 150
     a86:	bb 27       	eor	r27, r27
     a88:	93 95       	inc	r25
     a8a:	f6 95       	lsr	r31
     a8c:	87 95       	ror	r24
     a8e:	77 95       	ror	r23
     a90:	67 95       	ror	r22
     a92:	b7 95       	ror	r27
     a94:	f1 11       	cpse	r31, r1
     a96:	f8 cf       	rjmp	.-16     	; 0xa88 <__floatsisf+0x1c>
     a98:	fa f4       	brpl	.+62     	; 0xad8 <__floatsisf+0x6c>
     a9a:	bb 0f       	add	r27, r27
     a9c:	11 f4       	brne	.+4      	; 0xaa2 <__floatsisf+0x36>
     a9e:	60 ff       	sbrs	r22, 0
     aa0:	1b c0       	rjmp	.+54     	; 0xad8 <__floatsisf+0x6c>
     aa2:	6f 5f       	subi	r22, 0xFF	; 255
     aa4:	7f 4f       	sbci	r23, 0xFF	; 255
     aa6:	8f 4f       	sbci	r24, 0xFF	; 255
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	16 c0       	rjmp	.+44     	; 0xad8 <__floatsisf+0x6c>
     aac:	88 23       	and	r24, r24
     aae:	11 f0       	breq	.+4      	; 0xab4 <__floatsisf+0x48>
     ab0:	96 e9       	ldi	r25, 0x96	; 150
     ab2:	11 c0       	rjmp	.+34     	; 0xad6 <__floatsisf+0x6a>
     ab4:	77 23       	and	r23, r23
     ab6:	21 f0       	breq	.+8      	; 0xac0 <__floatsisf+0x54>
     ab8:	9e e8       	ldi	r25, 0x8E	; 142
     aba:	87 2f       	mov	r24, r23
     abc:	76 2f       	mov	r23, r22
     abe:	05 c0       	rjmp	.+10     	; 0xaca <__floatsisf+0x5e>
     ac0:	66 23       	and	r22, r22
     ac2:	71 f0       	breq	.+28     	; 0xae0 <__floatsisf+0x74>
     ac4:	96 e8       	ldi	r25, 0x86	; 134
     ac6:	86 2f       	mov	r24, r22
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	2a f0       	brmi	.+10     	; 0xad8 <__floatsisf+0x6c>
     ace:	9a 95       	dec	r25
     ad0:	66 0f       	add	r22, r22
     ad2:	77 1f       	adc	r23, r23
     ad4:	88 1f       	adc	r24, r24
     ad6:	da f7       	brpl	.-10     	; 0xace <__floatsisf+0x62>
     ad8:	88 0f       	add	r24, r24
     ada:	96 95       	lsr	r25
     adc:	87 95       	ror	r24
     ade:	97 f9       	bld	r25, 7
     ae0:	08 95       	ret

00000ae2 <__fp_inf>:
     ae2:	97 f9       	bld	r25, 7
     ae4:	9f 67       	ori	r25, 0x7F	; 127
     ae6:	80 e8       	ldi	r24, 0x80	; 128
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	08 95       	ret

00000aee <__fp_nan>:
     aee:	9f ef       	ldi	r25, 0xFF	; 255
     af0:	80 ec       	ldi	r24, 0xC0	; 192
     af2:	08 95       	ret

00000af4 <__fp_pscA>:
     af4:	00 24       	eor	r0, r0
     af6:	0a 94       	dec	r0
     af8:	16 16       	cp	r1, r22
     afa:	17 06       	cpc	r1, r23
     afc:	18 06       	cpc	r1, r24
     afe:	09 06       	cpc	r0, r25
     b00:	08 95       	ret

00000b02 <__fp_pscB>:
     b02:	00 24       	eor	r0, r0
     b04:	0a 94       	dec	r0
     b06:	12 16       	cp	r1, r18
     b08:	13 06       	cpc	r1, r19
     b0a:	14 06       	cpc	r1, r20
     b0c:	05 06       	cpc	r0, r21
     b0e:	08 95       	ret

00000b10 <__fp_round>:
     b10:	09 2e       	mov	r0, r25
     b12:	03 94       	inc	r0
     b14:	00 0c       	add	r0, r0
     b16:	11 f4       	brne	.+4      	; 0xb1c <__fp_round+0xc>
     b18:	88 23       	and	r24, r24
     b1a:	52 f0       	brmi	.+20     	; 0xb30 <__fp_round+0x20>
     b1c:	bb 0f       	add	r27, r27
     b1e:	40 f4       	brcc	.+16     	; 0xb30 <__fp_round+0x20>
     b20:	bf 2b       	or	r27, r31
     b22:	11 f4       	brne	.+4      	; 0xb28 <__fp_round+0x18>
     b24:	60 ff       	sbrs	r22, 0
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <__fp_round+0x20>
     b28:	6f 5f       	subi	r22, 0xFF	; 255
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	8f 4f       	sbci	r24, 0xFF	; 255
     b2e:	9f 4f       	sbci	r25, 0xFF	; 255
     b30:	08 95       	ret

00000b32 <__fp_split3>:
     b32:	57 fd       	sbrc	r21, 7
     b34:	90 58       	subi	r25, 0x80	; 128
     b36:	44 0f       	add	r20, r20
     b38:	55 1f       	adc	r21, r21
     b3a:	59 f0       	breq	.+22     	; 0xb52 <__fp_splitA+0x10>
     b3c:	5f 3f       	cpi	r21, 0xFF	; 255
     b3e:	71 f0       	breq	.+28     	; 0xb5c <__fp_splitA+0x1a>
     b40:	47 95       	ror	r20

00000b42 <__fp_splitA>:
     b42:	88 0f       	add	r24, r24
     b44:	97 fb       	bst	r25, 7
     b46:	99 1f       	adc	r25, r25
     b48:	61 f0       	breq	.+24     	; 0xb62 <__fp_splitA+0x20>
     b4a:	9f 3f       	cpi	r25, 0xFF	; 255
     b4c:	79 f0       	breq	.+30     	; 0xb6c <__fp_splitA+0x2a>
     b4e:	87 95       	ror	r24
     b50:	08 95       	ret
     b52:	12 16       	cp	r1, r18
     b54:	13 06       	cpc	r1, r19
     b56:	14 06       	cpc	r1, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	f2 cf       	rjmp	.-28     	; 0xb40 <__fp_split3+0xe>
     b5c:	46 95       	lsr	r20
     b5e:	f1 df       	rcall	.-30     	; 0xb42 <__fp_splitA>
     b60:	08 c0       	rjmp	.+16     	; 0xb72 <__fp_splitA+0x30>
     b62:	16 16       	cp	r1, r22
     b64:	17 06       	cpc	r1, r23
     b66:	18 06       	cpc	r1, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	f1 cf       	rjmp	.-30     	; 0xb4e <__fp_splitA+0xc>
     b6c:	86 95       	lsr	r24
     b6e:	71 05       	cpc	r23, r1
     b70:	61 05       	cpc	r22, r1
     b72:	08 94       	sec
     b74:	08 95       	ret

00000b76 <__fp_zero>:
     b76:	e8 94       	clt

00000b78 <__fp_szero>:
     b78:	bb 27       	eor	r27, r27
     b7a:	66 27       	eor	r22, r22
     b7c:	77 27       	eor	r23, r23
     b7e:	cb 01       	movw	r24, r22
     b80:	97 f9       	bld	r25, 7
     b82:	08 95       	ret

00000b84 <__mulsf3>:
     b84:	0b d0       	rcall	.+22     	; 0xb9c <__mulsf3x>
     b86:	c4 cf       	rjmp	.-120    	; 0xb10 <__fp_round>
     b88:	b5 df       	rcall	.-150    	; 0xaf4 <__fp_pscA>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__mulsf3+0x12>
     b8c:	ba df       	rcall	.-140    	; 0xb02 <__fp_pscB>
     b8e:	18 f0       	brcs	.+6      	; 0xb96 <__mulsf3+0x12>
     b90:	95 23       	and	r25, r21
     b92:	09 f0       	breq	.+2      	; 0xb96 <__mulsf3+0x12>
     b94:	a6 cf       	rjmp	.-180    	; 0xae2 <__fp_inf>
     b96:	ab cf       	rjmp	.-170    	; 0xaee <__fp_nan>
     b98:	11 24       	eor	r1, r1
     b9a:	ee cf       	rjmp	.-36     	; 0xb78 <__fp_szero>

00000b9c <__mulsf3x>:
     b9c:	ca df       	rcall	.-108    	; 0xb32 <__fp_split3>
     b9e:	a0 f3       	brcs	.-24     	; 0xb88 <__mulsf3+0x4>

00000ba0 <__mulsf3_pse>:
     ba0:	95 9f       	mul	r25, r21
     ba2:	d1 f3       	breq	.-12     	; 0xb98 <__mulsf3+0x14>
     ba4:	95 0f       	add	r25, r21
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	55 1f       	adc	r21, r21
     baa:	62 9f       	mul	r22, r18
     bac:	f0 01       	movw	r30, r0
     bae:	72 9f       	mul	r23, r18
     bb0:	bb 27       	eor	r27, r27
     bb2:	f0 0d       	add	r31, r0
     bb4:	b1 1d       	adc	r27, r1
     bb6:	63 9f       	mul	r22, r19
     bb8:	aa 27       	eor	r26, r26
     bba:	f0 0d       	add	r31, r0
     bbc:	b1 1d       	adc	r27, r1
     bbe:	aa 1f       	adc	r26, r26
     bc0:	64 9f       	mul	r22, r20
     bc2:	66 27       	eor	r22, r22
     bc4:	b0 0d       	add	r27, r0
     bc6:	a1 1d       	adc	r26, r1
     bc8:	66 1f       	adc	r22, r22
     bca:	82 9f       	mul	r24, r18
     bcc:	22 27       	eor	r18, r18
     bce:	b0 0d       	add	r27, r0
     bd0:	a1 1d       	adc	r26, r1
     bd2:	62 1f       	adc	r22, r18
     bd4:	73 9f       	mul	r23, r19
     bd6:	b0 0d       	add	r27, r0
     bd8:	a1 1d       	adc	r26, r1
     bda:	62 1f       	adc	r22, r18
     bdc:	83 9f       	mul	r24, r19
     bde:	a0 0d       	add	r26, r0
     be0:	61 1d       	adc	r22, r1
     be2:	22 1f       	adc	r18, r18
     be4:	74 9f       	mul	r23, r20
     be6:	33 27       	eor	r19, r19
     be8:	a0 0d       	add	r26, r0
     bea:	61 1d       	adc	r22, r1
     bec:	23 1f       	adc	r18, r19
     bee:	84 9f       	mul	r24, r20
     bf0:	60 0d       	add	r22, r0
     bf2:	21 1d       	adc	r18, r1
     bf4:	82 2f       	mov	r24, r18
     bf6:	76 2f       	mov	r23, r22
     bf8:	6a 2f       	mov	r22, r26
     bfa:	11 24       	eor	r1, r1
     bfc:	9f 57       	subi	r25, 0x7F	; 127
     bfe:	50 40       	sbci	r21, 0x00	; 0
     c00:	8a f0       	brmi	.+34     	; 0xc24 <__mulsf3_pse+0x84>
     c02:	e1 f0       	breq	.+56     	; 0xc3c <__mulsf3_pse+0x9c>
     c04:	88 23       	and	r24, r24
     c06:	4a f0       	brmi	.+18     	; 0xc1a <__mulsf3_pse+0x7a>
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	bb 1f       	adc	r27, r27
     c0e:	66 1f       	adc	r22, r22
     c10:	77 1f       	adc	r23, r23
     c12:	88 1f       	adc	r24, r24
     c14:	91 50       	subi	r25, 0x01	; 1
     c16:	50 40       	sbci	r21, 0x00	; 0
     c18:	a9 f7       	brne	.-22     	; 0xc04 <__mulsf3_pse+0x64>
     c1a:	9e 3f       	cpi	r25, 0xFE	; 254
     c1c:	51 05       	cpc	r21, r1
     c1e:	70 f0       	brcs	.+28     	; 0xc3c <__mulsf3_pse+0x9c>
     c20:	60 cf       	rjmp	.-320    	; 0xae2 <__fp_inf>
     c22:	aa cf       	rjmp	.-172    	; 0xb78 <__fp_szero>
     c24:	5f 3f       	cpi	r21, 0xFF	; 255
     c26:	ec f3       	brlt	.-6      	; 0xc22 <__mulsf3_pse+0x82>
     c28:	98 3e       	cpi	r25, 0xE8	; 232
     c2a:	dc f3       	brlt	.-10     	; 0xc22 <__mulsf3_pse+0x82>
     c2c:	86 95       	lsr	r24
     c2e:	77 95       	ror	r23
     c30:	67 95       	ror	r22
     c32:	b7 95       	ror	r27
     c34:	f7 95       	ror	r31
     c36:	e7 95       	ror	r30
     c38:	9f 5f       	subi	r25, 0xFF	; 255
     c3a:	c1 f7       	brne	.-16     	; 0xc2c <__mulsf3_pse+0x8c>
     c3c:	fe 2b       	or	r31, r30
     c3e:	88 0f       	add	r24, r24
     c40:	91 1d       	adc	r25, r1
     c42:	96 95       	lsr	r25
     c44:	87 95       	ror	r24
     c46:	97 f9       	bld	r25, 7
     c48:	08 95       	ret

00000c4a <pow>:
     c4a:	fa 01       	movw	r30, r20
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	30 96       	adiw	r30, 0x00	; 0
     c52:	21 05       	cpc	r18, r1
     c54:	31 05       	cpc	r19, r1
     c56:	99 f1       	breq	.+102    	; 0xcbe <pow+0x74>
     c58:	61 15       	cp	r22, r1
     c5a:	71 05       	cpc	r23, r1
     c5c:	61 f4       	brne	.+24     	; 0xc76 <pow+0x2c>
     c5e:	80 38       	cpi	r24, 0x80	; 128
     c60:	bf e3       	ldi	r27, 0x3F	; 63
     c62:	9b 07       	cpc	r25, r27
     c64:	49 f1       	breq	.+82     	; 0xcb8 <pow+0x6e>
     c66:	68 94       	set
     c68:	90 38       	cpi	r25, 0x80	; 128
     c6a:	81 05       	cpc	r24, r1
     c6c:	61 f0       	breq	.+24     	; 0xc86 <pow+0x3c>
     c6e:	80 38       	cpi	r24, 0x80	; 128
     c70:	bf ef       	ldi	r27, 0xFF	; 255
     c72:	9b 07       	cpc	r25, r27
     c74:	41 f0       	breq	.+16     	; 0xc86 <pow+0x3c>
     c76:	99 23       	and	r25, r25
     c78:	42 f5       	brpl	.+80     	; 0xcca <pow+0x80>
     c7a:	ff 3f       	cpi	r31, 0xFF	; 255
     c7c:	e1 05       	cpc	r30, r1
     c7e:	31 05       	cpc	r19, r1
     c80:	21 05       	cpc	r18, r1
     c82:	11 f1       	breq	.+68     	; 0xcc8 <pow+0x7e>
     c84:	e8 94       	clt
     c86:	08 94       	sec
     c88:	e7 95       	ror	r30
     c8a:	d9 01       	movw	r26, r18
     c8c:	aa 23       	and	r26, r26
     c8e:	29 f4       	brne	.+10     	; 0xc9a <pow+0x50>
     c90:	ab 2f       	mov	r26, r27
     c92:	be 2f       	mov	r27, r30
     c94:	f8 5f       	subi	r31, 0xF8	; 248
     c96:	d0 f3       	brcs	.-12     	; 0xc8c <pow+0x42>
     c98:	10 c0       	rjmp	.+32     	; 0xcba <pow+0x70>
     c9a:	ff 5f       	subi	r31, 0xFF	; 255
     c9c:	70 f4       	brcc	.+28     	; 0xcba <pow+0x70>
     c9e:	a6 95       	lsr	r26
     ca0:	e0 f7       	brcc	.-8      	; 0xc9a <pow+0x50>
     ca2:	f7 39       	cpi	r31, 0x97	; 151
     ca4:	50 f0       	brcs	.+20     	; 0xcba <pow+0x70>
     ca6:	19 f0       	breq	.+6      	; 0xcae <pow+0x64>
     ca8:	ff 3a       	cpi	r31, 0xAF	; 175
     caa:	38 f4       	brcc	.+14     	; 0xcba <pow+0x70>
     cac:	9f 77       	andi	r25, 0x7F	; 127
     cae:	9f 93       	push	r25
     cb0:	0c d0       	rcall	.+24     	; 0xcca <pow+0x80>
     cb2:	0f 90       	pop	r0
     cb4:	07 fc       	sbrc	r0, 7
     cb6:	90 58       	subi	r25, 0x80	; 128
     cb8:	08 95       	ret
     cba:	3e f0       	brts	.+14     	; 0xcca <pow+0x80>
     cbc:	18 cf       	rjmp	.-464    	; 0xaee <__fp_nan>
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	80 e8       	ldi	r24, 0x80	; 128
     cc4:	9f e3       	ldi	r25, 0x3F	; 63
     cc6:	08 95       	ret
     cc8:	4f e7       	ldi	r20, 0x7F	; 127
     cca:	9f 77       	andi	r25, 0x7F	; 127
     ccc:	5f 93       	push	r21
     cce:	4f 93       	push	r20
     cd0:	3f 93       	push	r19
     cd2:	2f 93       	push	r18
     cd4:	9e d0       	rcall	.+316    	; 0xe12 <log>
     cd6:	2f 91       	pop	r18
     cd8:	3f 91       	pop	r19
     cda:	4f 91       	pop	r20
     cdc:	5f 91       	pop	r21
     cde:	52 df       	rcall	.-348    	; 0xb84 <__mulsf3>
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <exp>
     ce2:	19 f4       	brne	.+6      	; 0xcea <pow+0xa0>
     ce4:	0e f0       	brts	.+2      	; 0xce8 <pow+0x9e>
     ce6:	fd ce       	rjmp	.-518    	; 0xae2 <__fp_inf>
     ce8:	46 cf       	rjmp	.-372    	; 0xb76 <__fp_zero>
     cea:	01 cf       	rjmp	.-510    	; 0xaee <__fp_nan>

00000cec <exp>:
     cec:	2a df       	rcall	.-428    	; 0xb42 <__fp_splitA>
     cee:	c8 f3       	brcs	.-14     	; 0xce2 <pow+0x98>
     cf0:	96 38       	cpi	r25, 0x86	; 134
     cf2:	c0 f7       	brcc	.-16     	; 0xce4 <pow+0x9a>
     cf4:	07 f8       	bld	r0, 7
     cf6:	0f 92       	push	r0
     cf8:	e8 94       	clt
     cfa:	2b e3       	ldi	r18, 0x3B	; 59
     cfc:	3a ea       	ldi	r19, 0xAA	; 170
     cfe:	48 eb       	ldi	r20, 0xB8	; 184
     d00:	5f e7       	ldi	r21, 0x7F	; 127
     d02:	4e df       	rcall	.-356    	; 0xba0 <__mulsf3_pse>
     d04:	0f 92       	push	r0
     d06:	0f 92       	push	r0
     d08:	0f 92       	push	r0
     d0a:	4d b7       	in	r20, 0x3d	; 61
     d0c:	5e b7       	in	r21, 0x3e	; 62
     d0e:	0f 92       	push	r0
     d10:	c0 d0       	rcall	.+384    	; 0xe92 <modf>
     d12:	ec e8       	ldi	r30, 0x8C	; 140
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	16 d0       	rcall	.+44     	; 0xd44 <__fp_powser>
     d18:	4f 91       	pop	r20
     d1a:	5f 91       	pop	r21
     d1c:	ef 91       	pop	r30
     d1e:	ff 91       	pop	r31
     d20:	e5 95       	asr	r30
     d22:	ee 1f       	adc	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	49 f0       	breq	.+18     	; 0xd3a <exp+0x4e>
     d28:	fe 57       	subi	r31, 0x7E	; 126
     d2a:	e0 68       	ori	r30, 0x80	; 128
     d2c:	44 27       	eor	r20, r20
     d2e:	ee 0f       	add	r30, r30
     d30:	44 1f       	adc	r20, r20
     d32:	fa 95       	dec	r31
     d34:	e1 f7       	brne	.-8      	; 0xd2e <exp+0x42>
     d36:	41 95       	neg	r20
     d38:	55 0b       	sbc	r21, r21
     d3a:	32 d0       	rcall	.+100    	; 0xda0 <ldexp>
     d3c:	0f 90       	pop	r0
     d3e:	07 fe       	sbrs	r0, 7
     d40:	26 c0       	rjmp	.+76     	; 0xd8e <inverse>
     d42:	08 95       	ret

00000d44 <__fp_powser>:
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	1f 93       	push	r17
     d4a:	0f 93       	push	r16
     d4c:	ff 92       	push	r15
     d4e:	ef 92       	push	r14
     d50:	df 92       	push	r13
     d52:	7b 01       	movw	r14, r22
     d54:	8c 01       	movw	r16, r24
     d56:	68 94       	set
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <__fp_powser+0x20>
     d5a:	da 2e       	mov	r13, r26
     d5c:	ef 01       	movw	r28, r30
     d5e:	1e df       	rcall	.-452    	; 0xb9c <__mulsf3x>
     d60:	fe 01       	movw	r30, r28
     d62:	e8 94       	clt
     d64:	a5 91       	lpm	r26, Z+
     d66:	25 91       	lpm	r18, Z+
     d68:	35 91       	lpm	r19, Z+
     d6a:	45 91       	lpm	r20, Z+
     d6c:	55 91       	lpm	r21, Z+
     d6e:	ae f3       	brts	.-22     	; 0xd5a <__fp_powser+0x16>
     d70:	ef 01       	movw	r28, r30
     d72:	d4 d0       	rcall	.+424    	; 0xf1c <__addsf3x>
     d74:	fe 01       	movw	r30, r28
     d76:	97 01       	movw	r18, r14
     d78:	a8 01       	movw	r20, r16
     d7a:	da 94       	dec	r13
     d7c:	79 f7       	brne	.-34     	; 0xd5c <__fp_powser+0x18>
     d7e:	df 90       	pop	r13
     d80:	ef 90       	pop	r14
     d82:	ff 90       	pop	r15
     d84:	0f 91       	pop	r16
     d86:	1f 91       	pop	r17
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <inverse>:
     d8e:	9b 01       	movw	r18, r22
     d90:	ac 01       	movw	r20, r24
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	80 e8       	ldi	r24, 0x80	; 128
     d98:	9f e3       	ldi	r25, 0x3F	; 63
     d9a:	d2 cd       	rjmp	.-1116   	; 0x940 <__divsf3>
     d9c:	a2 ce       	rjmp	.-700    	; 0xae2 <__fp_inf>
     d9e:	11 c1       	rjmp	.+546    	; 0xfc2 <__fp_mpack>

00000da0 <ldexp>:
     da0:	d0 de       	rcall	.-608    	; 0xb42 <__fp_splitA>
     da2:	e8 f3       	brcs	.-6      	; 0xd9e <inverse+0x10>
     da4:	99 23       	and	r25, r25
     da6:	d9 f3       	breq	.-10     	; 0xd9e <inverse+0x10>
     da8:	94 0f       	add	r25, r20
     daa:	51 1d       	adc	r21, r1
     dac:	bb f3       	brvs	.-18     	; 0xd9c <inverse+0xe>
     dae:	91 50       	subi	r25, 0x01	; 1
     db0:	50 40       	sbci	r21, 0x00	; 0
     db2:	94 f0       	brlt	.+36     	; 0xdd8 <ldexp+0x38>
     db4:	59 f0       	breq	.+22     	; 0xdcc <ldexp+0x2c>
     db6:	88 23       	and	r24, r24
     db8:	32 f0       	brmi	.+12     	; 0xdc6 <ldexp+0x26>
     dba:	66 0f       	add	r22, r22
     dbc:	77 1f       	adc	r23, r23
     dbe:	88 1f       	adc	r24, r24
     dc0:	91 50       	subi	r25, 0x01	; 1
     dc2:	50 40       	sbci	r21, 0x00	; 0
     dc4:	c1 f7       	brne	.-16     	; 0xdb6 <ldexp+0x16>
     dc6:	9e 3f       	cpi	r25, 0xFE	; 254
     dc8:	51 05       	cpc	r21, r1
     dca:	44 f7       	brge	.-48     	; 0xd9c <inverse+0xe>
     dcc:	88 0f       	add	r24, r24
     dce:	91 1d       	adc	r25, r1
     dd0:	96 95       	lsr	r25
     dd2:	87 95       	ror	r24
     dd4:	97 f9       	bld	r25, 7
     dd6:	08 95       	ret
     dd8:	5f 3f       	cpi	r21, 0xFF	; 255
     dda:	ac f0       	brlt	.+42     	; 0xe06 <ldexp+0x66>
     ddc:	98 3e       	cpi	r25, 0xE8	; 232
     dde:	9c f0       	brlt	.+38     	; 0xe06 <ldexp+0x66>
     de0:	bb 27       	eor	r27, r27
     de2:	86 95       	lsr	r24
     de4:	77 95       	ror	r23
     de6:	67 95       	ror	r22
     de8:	b7 95       	ror	r27
     dea:	08 f4       	brcc	.+2      	; 0xdee <ldexp+0x4e>
     dec:	b1 60       	ori	r27, 0x01	; 1
     dee:	93 95       	inc	r25
     df0:	c1 f7       	brne	.-16     	; 0xde2 <ldexp+0x42>
     df2:	bb 0f       	add	r27, r27
     df4:	58 f7       	brcc	.-42     	; 0xdcc <ldexp+0x2c>
     df6:	11 f4       	brne	.+4      	; 0xdfc <ldexp+0x5c>
     df8:	60 ff       	sbrs	r22, 0
     dfa:	e8 cf       	rjmp	.-48     	; 0xdcc <ldexp+0x2c>
     dfc:	6f 5f       	subi	r22, 0xFF	; 255
     dfe:	7f 4f       	sbci	r23, 0xFF	; 255
     e00:	8f 4f       	sbci	r24, 0xFF	; 255
     e02:	9f 4f       	sbci	r25, 0xFF	; 255
     e04:	e3 cf       	rjmp	.-58     	; 0xdcc <ldexp+0x2c>
     e06:	b8 ce       	rjmp	.-656    	; 0xb78 <__fp_szero>
     e08:	0e f0       	brts	.+2      	; 0xe0c <ldexp+0x6c>
     e0a:	db c0       	rjmp	.+438    	; 0xfc2 <__fp_mpack>
     e0c:	70 ce       	rjmp	.-800    	; 0xaee <__fp_nan>
     e0e:	68 94       	set
     e10:	68 ce       	rjmp	.-816    	; 0xae2 <__fp_inf>

00000e12 <log>:
     e12:	97 de       	rcall	.-722    	; 0xb42 <__fp_splitA>
     e14:	c8 f3       	brcs	.-14     	; 0xe08 <ldexp+0x68>
     e16:	99 23       	and	r25, r25
     e18:	d1 f3       	breq	.-12     	; 0xe0e <ldexp+0x6e>
     e1a:	c6 f3       	brts	.-16     	; 0xe0c <ldexp+0x6c>
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	1f 93       	push	r17
     e22:	0f 93       	push	r16
     e24:	ff 92       	push	r15
     e26:	c9 2f       	mov	r28, r25
     e28:	dd 27       	eor	r29, r29
     e2a:	88 23       	and	r24, r24
     e2c:	2a f0       	brmi	.+10     	; 0xe38 <log+0x26>
     e2e:	21 97       	sbiw	r28, 0x01	; 1
     e30:	66 0f       	add	r22, r22
     e32:	77 1f       	adc	r23, r23
     e34:	88 1f       	adc	r24, r24
     e36:	da f7       	brpl	.-10     	; 0xe2e <log+0x1c>
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f eb       	ldi	r21, 0xBF	; 191
     e40:	9f e3       	ldi	r25, 0x3F	; 63
     e42:	88 39       	cpi	r24, 0x98	; 152
     e44:	20 f0       	brcs	.+8      	; 0xe4e <log+0x3c>
     e46:	80 3e       	cpi	r24, 0xE0	; 224
     e48:	30 f0       	brcs	.+12     	; 0xe56 <log+0x44>
     e4a:	21 96       	adiw	r28, 0x01	; 1
     e4c:	8f 77       	andi	r24, 0x7F	; 127
     e4e:	55 d0       	rcall	.+170    	; 0xefa <__addsf3>
     e50:	e4 eb       	ldi	r30, 0xB4	; 180
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <log+0x4a>
     e56:	51 d0       	rcall	.+162    	; 0xefa <__addsf3>
     e58:	e1 ee       	ldi	r30, 0xE1	; 225
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	73 df       	rcall	.-282    	; 0xd44 <__fp_powser>
     e5e:	8b 01       	movw	r16, r22
     e60:	be 01       	movw	r22, r28
     e62:	ec 01       	movw	r28, r24
     e64:	fb 2e       	mov	r15, r27
     e66:	6f 57       	subi	r22, 0x7F	; 127
     e68:	71 09       	sbc	r23, r1
     e6a:	75 95       	asr	r23
     e6c:	77 1f       	adc	r23, r23
     e6e:	88 0b       	sbc	r24, r24
     e70:	99 0b       	sbc	r25, r25
     e72:	fc dd       	rcall	.-1032   	; 0xa6c <__floatsisf>
     e74:	28 e1       	ldi	r18, 0x18	; 24
     e76:	32 e7       	ldi	r19, 0x72	; 114
     e78:	41 e3       	ldi	r20, 0x31	; 49
     e7a:	5f e3       	ldi	r21, 0x3F	; 63
     e7c:	8f de       	rcall	.-738    	; 0xb9c <__mulsf3x>
     e7e:	af 2d       	mov	r26, r15
     e80:	98 01       	movw	r18, r16
     e82:	ae 01       	movw	r20, r28
     e84:	ff 90       	pop	r15
     e86:	0f 91       	pop	r16
     e88:	1f 91       	pop	r17
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	46 d0       	rcall	.+140    	; 0xf1c <__addsf3x>
     e90:	3f ce       	rjmp	.-898    	; 0xb10 <__fp_round>

00000e92 <modf>:
     e92:	fa 01       	movw	r30, r20
     e94:	dc 01       	movw	r26, r24
     e96:	aa 0f       	add	r26, r26
     e98:	bb 1f       	adc	r27, r27
     e9a:	9b 01       	movw	r18, r22
     e9c:	ac 01       	movw	r20, r24
     e9e:	bf 57       	subi	r27, 0x7F	; 127
     ea0:	28 f4       	brcc	.+10     	; 0xeac <modf+0x1a>
     ea2:	22 27       	eor	r18, r18
     ea4:	33 27       	eor	r19, r19
     ea6:	44 27       	eor	r20, r20
     ea8:	50 78       	andi	r21, 0x80	; 128
     eaa:	1f c0       	rjmp	.+62     	; 0xeea <modf+0x58>
     eac:	b7 51       	subi	r27, 0x17	; 23
     eae:	88 f4       	brcc	.+34     	; 0xed2 <modf+0x40>
     eb0:	ab 2f       	mov	r26, r27
     eb2:	00 24       	eor	r0, r0
     eb4:	46 95       	lsr	r20
     eb6:	37 95       	ror	r19
     eb8:	27 95       	ror	r18
     eba:	01 1c       	adc	r0, r1
     ebc:	a3 95       	inc	r26
     ebe:	d2 f3       	brmi	.-12     	; 0xeb4 <modf+0x22>
     ec0:	00 20       	and	r0, r0
     ec2:	69 f0       	breq	.+26     	; 0xede <modf+0x4c>
     ec4:	22 0f       	add	r18, r18
     ec6:	33 1f       	adc	r19, r19
     ec8:	44 1f       	adc	r20, r20
     eca:	b3 95       	inc	r27
     ecc:	da f3       	brmi	.-10     	; 0xec4 <modf+0x32>
     ece:	0d d0       	rcall	.+26     	; 0xeea <modf+0x58>
     ed0:	13 c0       	rjmp	.+38     	; 0xef8 <__subsf3>
     ed2:	61 30       	cpi	r22, 0x01	; 1
     ed4:	71 05       	cpc	r23, r1
     ed6:	a0 e8       	ldi	r26, 0x80	; 128
     ed8:	8a 07       	cpc	r24, r26
     eda:	b9 46       	sbci	r27, 0x69	; 105
     edc:	30 f4       	brcc	.+12     	; 0xeea <modf+0x58>
     ede:	9b 01       	movw	r18, r22
     ee0:	ac 01       	movw	r20, r24
     ee2:	66 27       	eor	r22, r22
     ee4:	77 27       	eor	r23, r23
     ee6:	88 27       	eor	r24, r24
     ee8:	90 78       	andi	r25, 0x80	; 128
     eea:	30 96       	adiw	r30, 0x00	; 0
     eec:	21 f0       	breq	.+8      	; 0xef6 <modf+0x64>
     eee:	20 83       	st	Z, r18
     ef0:	31 83       	std	Z+1, r19	; 0x01
     ef2:	42 83       	std	Z+2, r20	; 0x02
     ef4:	53 83       	std	Z+3, r21	; 0x03
     ef6:	08 95       	ret

00000ef8 <__subsf3>:
     ef8:	50 58       	subi	r21, 0x80	; 128

00000efa <__addsf3>:
     efa:	bb 27       	eor	r27, r27
     efc:	aa 27       	eor	r26, r26
     efe:	0e d0       	rcall	.+28     	; 0xf1c <__addsf3x>
     f00:	07 ce       	rjmp	.-1010   	; 0xb10 <__fp_round>
     f02:	f8 dd       	rcall	.-1040   	; 0xaf4 <__fp_pscA>
     f04:	30 f0       	brcs	.+12     	; 0xf12 <__addsf3+0x18>
     f06:	fd dd       	rcall	.-1030   	; 0xb02 <__fp_pscB>
     f08:	20 f0       	brcs	.+8      	; 0xf12 <__addsf3+0x18>
     f0a:	31 f4       	brne	.+12     	; 0xf18 <__addsf3+0x1e>
     f0c:	9f 3f       	cpi	r25, 0xFF	; 255
     f0e:	11 f4       	brne	.+4      	; 0xf14 <__addsf3+0x1a>
     f10:	1e f4       	brtc	.+6      	; 0xf18 <__addsf3+0x1e>
     f12:	ed cd       	rjmp	.-1062   	; 0xaee <__fp_nan>
     f14:	0e f4       	brtc	.+2      	; 0xf18 <__addsf3+0x1e>
     f16:	e0 95       	com	r30
     f18:	e7 fb       	bst	r30, 7
     f1a:	e3 cd       	rjmp	.-1082   	; 0xae2 <__fp_inf>

00000f1c <__addsf3x>:
     f1c:	e9 2f       	mov	r30, r25
     f1e:	09 de       	rcall	.-1006   	; 0xb32 <__fp_split3>
     f20:	80 f3       	brcs	.-32     	; 0xf02 <__addsf3+0x8>
     f22:	ba 17       	cp	r27, r26
     f24:	62 07       	cpc	r22, r18
     f26:	73 07       	cpc	r23, r19
     f28:	84 07       	cpc	r24, r20
     f2a:	95 07       	cpc	r25, r21
     f2c:	18 f0       	brcs	.+6      	; 0xf34 <__addsf3x+0x18>
     f2e:	71 f4       	brne	.+28     	; 0xf4c <__addsf3x+0x30>
     f30:	9e f5       	brtc	.+102    	; 0xf98 <__addsf3x+0x7c>
     f32:	21 ce       	rjmp	.-958    	; 0xb76 <__fp_zero>
     f34:	0e f4       	brtc	.+2      	; 0xf38 <__addsf3x+0x1c>
     f36:	e0 95       	com	r30
     f38:	0b 2e       	mov	r0, r27
     f3a:	ba 2f       	mov	r27, r26
     f3c:	a0 2d       	mov	r26, r0
     f3e:	0b 01       	movw	r0, r22
     f40:	b9 01       	movw	r22, r18
     f42:	90 01       	movw	r18, r0
     f44:	0c 01       	movw	r0, r24
     f46:	ca 01       	movw	r24, r20
     f48:	a0 01       	movw	r20, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	ff 27       	eor	r31, r31
     f4e:	59 1b       	sub	r21, r25
     f50:	99 f0       	breq	.+38     	; 0xf78 <__addsf3x+0x5c>
     f52:	59 3f       	cpi	r21, 0xF9	; 249
     f54:	50 f4       	brcc	.+20     	; 0xf6a <__addsf3x+0x4e>
     f56:	50 3e       	cpi	r21, 0xE0	; 224
     f58:	68 f1       	brcs	.+90     	; 0xfb4 <__addsf3x+0x98>
     f5a:	1a 16       	cp	r1, r26
     f5c:	f0 40       	sbci	r31, 0x00	; 0
     f5e:	a2 2f       	mov	r26, r18
     f60:	23 2f       	mov	r18, r19
     f62:	34 2f       	mov	r19, r20
     f64:	44 27       	eor	r20, r20
     f66:	58 5f       	subi	r21, 0xF8	; 248
     f68:	f3 cf       	rjmp	.-26     	; 0xf50 <__addsf3x+0x34>
     f6a:	46 95       	lsr	r20
     f6c:	37 95       	ror	r19
     f6e:	27 95       	ror	r18
     f70:	a7 95       	ror	r26
     f72:	f0 40       	sbci	r31, 0x00	; 0
     f74:	53 95       	inc	r21
     f76:	c9 f7       	brne	.-14     	; 0xf6a <__addsf3x+0x4e>
     f78:	7e f4       	brtc	.+30     	; 0xf98 <__addsf3x+0x7c>
     f7a:	1f 16       	cp	r1, r31
     f7c:	ba 0b       	sbc	r27, r26
     f7e:	62 0b       	sbc	r22, r18
     f80:	73 0b       	sbc	r23, r19
     f82:	84 0b       	sbc	r24, r20
     f84:	ba f0       	brmi	.+46     	; 0xfb4 <__addsf3x+0x98>
     f86:	91 50       	subi	r25, 0x01	; 1
     f88:	a1 f0       	breq	.+40     	; 0xfb2 <__addsf3x+0x96>
     f8a:	ff 0f       	add	r31, r31
     f8c:	bb 1f       	adc	r27, r27
     f8e:	66 1f       	adc	r22, r22
     f90:	77 1f       	adc	r23, r23
     f92:	88 1f       	adc	r24, r24
     f94:	c2 f7       	brpl	.-16     	; 0xf86 <__addsf3x+0x6a>
     f96:	0e c0       	rjmp	.+28     	; 0xfb4 <__addsf3x+0x98>
     f98:	ba 0f       	add	r27, r26
     f9a:	62 1f       	adc	r22, r18
     f9c:	73 1f       	adc	r23, r19
     f9e:	84 1f       	adc	r24, r20
     fa0:	48 f4       	brcc	.+18     	; 0xfb4 <__addsf3x+0x98>
     fa2:	87 95       	ror	r24
     fa4:	77 95       	ror	r23
     fa6:	67 95       	ror	r22
     fa8:	b7 95       	ror	r27
     faa:	f7 95       	ror	r31
     fac:	9e 3f       	cpi	r25, 0xFE	; 254
     fae:	08 f0       	brcs	.+2      	; 0xfb2 <__addsf3x+0x96>
     fb0:	b3 cf       	rjmp	.-154    	; 0xf18 <__addsf3+0x1e>
     fb2:	93 95       	inc	r25
     fb4:	88 0f       	add	r24, r24
     fb6:	08 f0       	brcs	.+2      	; 0xfba <__addsf3x+0x9e>
     fb8:	99 27       	eor	r25, r25
     fba:	ee 0f       	add	r30, r30
     fbc:	97 95       	ror	r25
     fbe:	87 95       	ror	r24
     fc0:	08 95       	ret

00000fc2 <__fp_mpack>:
     fc2:	9f 3f       	cpi	r25, 0xFF	; 255
     fc4:	31 f0       	breq	.+12     	; 0xfd2 <__fp_mpack_finite+0xc>

00000fc6 <__fp_mpack_finite>:
     fc6:	91 50       	subi	r25, 0x01	; 1
     fc8:	20 f4       	brcc	.+8      	; 0xfd2 <__fp_mpack_finite+0xc>
     fca:	87 95       	ror	r24
     fcc:	77 95       	ror	r23
     fce:	67 95       	ror	r22
     fd0:	b7 95       	ror	r27
     fd2:	88 0f       	add	r24, r24
     fd4:	91 1d       	adc	r25, r1
     fd6:	96 95       	lsr	r25
     fd8:	87 95       	ror	r24
     fda:	97 f9       	bld	r25, 7
     fdc:	08 95       	ret

00000fde <__divmodhi4>:
     fde:	97 fb       	bst	r25, 7
     fe0:	09 2e       	mov	r0, r25
     fe2:	07 26       	eor	r0, r23
     fe4:	0a d0       	rcall	.+20     	; 0xffa <__divmodhi4_neg1>
     fe6:	77 fd       	sbrc	r23, 7
     fe8:	04 d0       	rcall	.+8      	; 0xff2 <__divmodhi4_neg2>
     fea:	0c d0       	rcall	.+24     	; 0x1004 <__udivmodhi4>
     fec:	06 d0       	rcall	.+12     	; 0xffa <__divmodhi4_neg1>
     fee:	00 20       	and	r0, r0
     ff0:	1a f4       	brpl	.+6      	; 0xff8 <__divmodhi4_exit>

00000ff2 <__divmodhi4_neg2>:
     ff2:	70 95       	com	r23
     ff4:	61 95       	neg	r22
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255

00000ff8 <__divmodhi4_exit>:
     ff8:	08 95       	ret

00000ffa <__divmodhi4_neg1>:
     ffa:	f6 f7       	brtc	.-4      	; 0xff8 <__divmodhi4_exit>
     ffc:	90 95       	com	r25
     ffe:	81 95       	neg	r24
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	08 95       	ret

00001004 <__udivmodhi4>:
    1004:	aa 1b       	sub	r26, r26
    1006:	bb 1b       	sub	r27, r27
    1008:	51 e1       	ldi	r21, 0x11	; 17
    100a:	07 c0       	rjmp	.+14     	; 0x101a <__udivmodhi4_ep>

0000100c <__udivmodhi4_loop>:
    100c:	aa 1f       	adc	r26, r26
    100e:	bb 1f       	adc	r27, r27
    1010:	a6 17       	cp	r26, r22
    1012:	b7 07       	cpc	r27, r23
    1014:	10 f0       	brcs	.+4      	; 0x101a <__udivmodhi4_ep>
    1016:	a6 1b       	sub	r26, r22
    1018:	b7 0b       	sbc	r27, r23

0000101a <__udivmodhi4_ep>:
    101a:	88 1f       	adc	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	5a 95       	dec	r21
    1020:	a9 f7       	brne	.-22     	; 0x100c <__udivmodhi4_loop>
    1022:	80 95       	com	r24
    1024:	90 95       	com	r25
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	08 95       	ret

0000102c <strcmp>:
    102c:	fb 01       	movw	r30, r22
    102e:	dc 01       	movw	r26, r24
    1030:	8d 91       	ld	r24, X+
    1032:	01 90       	ld	r0, Z+
    1034:	80 19       	sub	r24, r0
    1036:	01 10       	cpse	r0, r1
    1038:	d9 f3       	breq	.-10     	; 0x1030 <strcmp+0x4>
    103a:	99 0b       	sbc	r25, r25
    103c:	08 95       	ret

0000103e <strcpy>:
    103e:	fb 01       	movw	r30, r22
    1040:	dc 01       	movw	r26, r24
    1042:	01 90       	ld	r0, Z+
    1044:	0d 92       	st	X+, r0
    1046:	00 20       	and	r0, r0
    1048:	e1 f7       	brne	.-8      	; 0x1042 <strcpy+0x4>
    104a:	08 95       	ret

0000104c <sprintf>:
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	2e 97       	sbiw	r28, 0x0e	; 14
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	0d 89       	ldd	r16, Y+21	; 0x15
    1066:	1e 89       	ldd	r17, Y+22	; 0x16
    1068:	86 e0       	ldi	r24, 0x06	; 6
    106a:	8c 83       	std	Y+4, r24	; 0x04
    106c:	1a 83       	std	Y+2, r17	; 0x02
    106e:	09 83       	std	Y+1, r16	; 0x01
    1070:	8f ef       	ldi	r24, 0xFF	; 255
    1072:	9f e7       	ldi	r25, 0x7F	; 127
    1074:	9e 83       	std	Y+6, r25	; 0x06
    1076:	8d 83       	std	Y+5, r24	; 0x05
    1078:	ae 01       	movw	r20, r28
    107a:	47 5e       	subi	r20, 0xE7	; 231
    107c:	5f 4f       	sbci	r21, 0xFF	; 255
    107e:	ce 01       	movw	r24, r28
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	6f 89       	ldd	r22, Y+23	; 0x17
    1084:	78 8d       	ldd	r23, Y+24	; 0x18
    1086:	0e 94 8d 08 	call	0x111a	; 0x111a <vfprintf>
    108a:	ef 81       	ldd	r30, Y+7	; 0x07
    108c:	f8 85       	ldd	r31, Y+8	; 0x08
    108e:	e0 0f       	add	r30, r16
    1090:	f1 1f       	adc	r31, r17
    1092:	10 82       	st	Z, r1
    1094:	2e 96       	adiw	r28, 0x0e	; 14
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	08 95       	ret

000010aa <vsnprintf>:
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	2e 97       	sbiw	r28, 0x0e	; 14
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	8c 01       	movw	r16, r24
    10c4:	86 e0       	ldi	r24, 0x06	; 6
    10c6:	8c 83       	std	Y+4, r24	; 0x04
    10c8:	1a 83       	std	Y+2, r17	; 0x02
    10ca:	09 83       	std	Y+1, r16	; 0x01
    10cc:	77 ff       	sbrs	r23, 7
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <vsnprintf+0x2a>
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	70 e8       	ldi	r23, 0x80	; 128
    10d4:	61 50       	subi	r22, 0x01	; 1
    10d6:	70 40       	sbci	r23, 0x00	; 0
    10d8:	7e 83       	std	Y+6, r23	; 0x06
    10da:	6d 83       	std	Y+5, r22	; 0x05
    10dc:	ce 01       	movw	r24, r28
    10de:	01 96       	adiw	r24, 0x01	; 1
    10e0:	ba 01       	movw	r22, r20
    10e2:	a9 01       	movw	r20, r18
    10e4:	0e 94 8d 08 	call	0x111a	; 0x111a <vfprintf>
    10e8:	4d 81       	ldd	r20, Y+5	; 0x05
    10ea:	5e 81       	ldd	r21, Y+6	; 0x06
    10ec:	57 fd       	sbrc	r21, 7
    10ee:	0a c0       	rjmp	.+20     	; 0x1104 <__stack+0x5>
    10f0:	2f 81       	ldd	r18, Y+7	; 0x07
    10f2:	38 85       	ldd	r19, Y+8	; 0x08
    10f4:	42 17       	cp	r20, r18
    10f6:	53 07       	cpc	r21, r19
    10f8:	0c f4       	brge	.+2      	; 0x10fc <vsnprintf+0x52>
    10fa:	9a 01       	movw	r18, r20
    10fc:	02 0f       	add	r16, r18
    10fe:	13 1f       	adc	r17, r19
    1100:	f8 01       	movw	r30, r16
    1102:	10 82       	st	Z, r1
    1104:	2e 96       	adiw	r28, 0x0e	; 14
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

0000111a <vfprintf>:
    111a:	2f 92       	push	r2
    111c:	3f 92       	push	r3
    111e:	4f 92       	push	r4
    1120:	5f 92       	push	r5
    1122:	6f 92       	push	r6
    1124:	7f 92       	push	r7
    1126:	8f 92       	push	r8
    1128:	9f 92       	push	r9
    112a:	af 92       	push	r10
    112c:	bf 92       	push	r11
    112e:	cf 92       	push	r12
    1130:	df 92       	push	r13
    1132:	ef 92       	push	r14
    1134:	ff 92       	push	r15
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	2d 97       	sbiw	r28, 0x0d	; 13
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	3c 01       	movw	r6, r24
    1150:	7d 87       	std	Y+13, r23	; 0x0d
    1152:	6c 87       	std	Y+12, r22	; 0x0c
    1154:	5a 01       	movw	r10, r20
    1156:	fc 01       	movw	r30, r24
    1158:	17 82       	std	Z+7, r1	; 0x07
    115a:	16 82       	std	Z+6, r1	; 0x06
    115c:	83 81       	ldd	r24, Z+3	; 0x03
    115e:	81 ff       	sbrs	r24, 1
    1160:	c8 c1       	rjmp	.+912    	; 0x14f2 <vfprintf+0x3d8>
    1162:	2e 01       	movw	r4, r28
    1164:	08 94       	sec
    1166:	41 1c       	adc	r4, r1
    1168:	51 1c       	adc	r5, r1
    116a:	f3 01       	movw	r30, r6
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1170:	fd 85       	ldd	r31, Y+13	; 0x0d
    1172:	93 fd       	sbrc	r25, 3
    1174:	85 91       	lpm	r24, Z+
    1176:	93 ff       	sbrs	r25, 3
    1178:	81 91       	ld	r24, Z+
    117a:	fd 87       	std	Y+13, r31	; 0x0d
    117c:	ec 87       	std	Y+12, r30	; 0x0c
    117e:	88 23       	and	r24, r24
    1180:	09 f4       	brne	.+2      	; 0x1184 <vfprintf+0x6a>
    1182:	b3 c1       	rjmp	.+870    	; 0x14ea <vfprintf+0x3d0>
    1184:	85 32       	cpi	r24, 0x25	; 37
    1186:	41 f4       	brne	.+16     	; 0x1198 <vfprintf+0x7e>
    1188:	93 fd       	sbrc	r25, 3
    118a:	85 91       	lpm	r24, Z+
    118c:	93 ff       	sbrs	r25, 3
    118e:	81 91       	ld	r24, Z+
    1190:	fd 87       	std	Y+13, r31	; 0x0d
    1192:	ec 87       	std	Y+12, r30	; 0x0c
    1194:	85 32       	cpi	r24, 0x25	; 37
    1196:	29 f4       	brne	.+10     	; 0x11a2 <vfprintf+0x88>
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	b3 01       	movw	r22, r6
    119c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <fputc>
    11a0:	e4 cf       	rjmp	.-56     	; 0x116a <vfprintf+0x50>
    11a2:	ff 24       	eor	r15, r15
    11a4:	ee 24       	eor	r14, r14
    11a6:	10 e0       	ldi	r17, 0x00	; 0
    11a8:	10 32       	cpi	r17, 0x20	; 32
    11aa:	b0 f4       	brcc	.+44     	; 0x11d8 <vfprintf+0xbe>
    11ac:	8b 32       	cpi	r24, 0x2B	; 43
    11ae:	69 f0       	breq	.+26     	; 0x11ca <vfprintf+0xb0>
    11b0:	8c 32       	cpi	r24, 0x2C	; 44
    11b2:	28 f4       	brcc	.+10     	; 0x11be <vfprintf+0xa4>
    11b4:	80 32       	cpi	r24, 0x20	; 32
    11b6:	51 f0       	breq	.+20     	; 0x11cc <vfprintf+0xb2>
    11b8:	83 32       	cpi	r24, 0x23	; 35
    11ba:	71 f4       	brne	.+28     	; 0x11d8 <vfprintf+0xbe>
    11bc:	0b c0       	rjmp	.+22     	; 0x11d4 <vfprintf+0xba>
    11be:	8d 32       	cpi	r24, 0x2D	; 45
    11c0:	39 f0       	breq	.+14     	; 0x11d0 <vfprintf+0xb6>
    11c2:	80 33       	cpi	r24, 0x30	; 48
    11c4:	49 f4       	brne	.+18     	; 0x11d8 <vfprintf+0xbe>
    11c6:	11 60       	ori	r17, 0x01	; 1
    11c8:	2c c0       	rjmp	.+88     	; 0x1222 <vfprintf+0x108>
    11ca:	12 60       	ori	r17, 0x02	; 2
    11cc:	14 60       	ori	r17, 0x04	; 4
    11ce:	29 c0       	rjmp	.+82     	; 0x1222 <vfprintf+0x108>
    11d0:	18 60       	ori	r17, 0x08	; 8
    11d2:	27 c0       	rjmp	.+78     	; 0x1222 <vfprintf+0x108>
    11d4:	10 61       	ori	r17, 0x10	; 16
    11d6:	25 c0       	rjmp	.+74     	; 0x1222 <vfprintf+0x108>
    11d8:	17 fd       	sbrc	r17, 7
    11da:	2e c0       	rjmp	.+92     	; 0x1238 <vfprintf+0x11e>
    11dc:	28 2f       	mov	r18, r24
    11de:	20 53       	subi	r18, 0x30	; 48
    11e0:	2a 30       	cpi	r18, 0x0A	; 10
    11e2:	98 f4       	brcc	.+38     	; 0x120a <vfprintf+0xf0>
    11e4:	16 ff       	sbrs	r17, 6
    11e6:	08 c0       	rjmp	.+16     	; 0x11f8 <vfprintf+0xde>
    11e8:	8f 2d       	mov	r24, r15
    11ea:	88 0f       	add	r24, r24
    11ec:	f8 2e       	mov	r15, r24
    11ee:	ff 0c       	add	r15, r15
    11f0:	ff 0c       	add	r15, r15
    11f2:	f8 0e       	add	r15, r24
    11f4:	f2 0e       	add	r15, r18
    11f6:	15 c0       	rjmp	.+42     	; 0x1222 <vfprintf+0x108>
    11f8:	8e 2d       	mov	r24, r14
    11fa:	88 0f       	add	r24, r24
    11fc:	e8 2e       	mov	r14, r24
    11fe:	ee 0c       	add	r14, r14
    1200:	ee 0c       	add	r14, r14
    1202:	e8 0e       	add	r14, r24
    1204:	e2 0e       	add	r14, r18
    1206:	10 62       	ori	r17, 0x20	; 32
    1208:	0c c0       	rjmp	.+24     	; 0x1222 <vfprintf+0x108>
    120a:	8e 32       	cpi	r24, 0x2E	; 46
    120c:	21 f4       	brne	.+8      	; 0x1216 <vfprintf+0xfc>
    120e:	16 fd       	sbrc	r17, 6
    1210:	6c c1       	rjmp	.+728    	; 0x14ea <vfprintf+0x3d0>
    1212:	10 64       	ori	r17, 0x40	; 64
    1214:	06 c0       	rjmp	.+12     	; 0x1222 <vfprintf+0x108>
    1216:	8c 36       	cpi	r24, 0x6C	; 108
    1218:	11 f4       	brne	.+4      	; 0x121e <vfprintf+0x104>
    121a:	10 68       	ori	r17, 0x80	; 128
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <vfprintf+0x108>
    121e:	88 36       	cpi	r24, 0x68	; 104
    1220:	59 f4       	brne	.+22     	; 0x1238 <vfprintf+0x11e>
    1222:	ec 85       	ldd	r30, Y+12	; 0x0c
    1224:	fd 85       	ldd	r31, Y+13	; 0x0d
    1226:	93 fd       	sbrc	r25, 3
    1228:	85 91       	lpm	r24, Z+
    122a:	93 ff       	sbrs	r25, 3
    122c:	81 91       	ld	r24, Z+
    122e:	fd 87       	std	Y+13, r31	; 0x0d
    1230:	ec 87       	std	Y+12, r30	; 0x0c
    1232:	88 23       	and	r24, r24
    1234:	09 f0       	breq	.+2      	; 0x1238 <vfprintf+0x11e>
    1236:	b8 cf       	rjmp	.-144    	; 0x11a8 <vfprintf+0x8e>
    1238:	98 2f       	mov	r25, r24
    123a:	95 54       	subi	r25, 0x45	; 69
    123c:	93 30       	cpi	r25, 0x03	; 3
    123e:	18 f0       	brcs	.+6      	; 0x1246 <vfprintf+0x12c>
    1240:	90 52       	subi	r25, 0x20	; 32
    1242:	93 30       	cpi	r25, 0x03	; 3
    1244:	38 f4       	brcc	.+14     	; 0x1254 <vfprintf+0x13a>
    1246:	24 e0       	ldi	r18, 0x04	; 4
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	a2 0e       	add	r10, r18
    124c:	b3 1e       	adc	r11, r19
    124e:	3f e3       	ldi	r19, 0x3F	; 63
    1250:	39 83       	std	Y+1, r19	; 0x01
    1252:	0f c0       	rjmp	.+30     	; 0x1272 <vfprintf+0x158>
    1254:	83 36       	cpi	r24, 0x63	; 99
    1256:	31 f0       	breq	.+12     	; 0x1264 <vfprintf+0x14a>
    1258:	83 37       	cpi	r24, 0x73	; 115
    125a:	81 f0       	breq	.+32     	; 0x127c <vfprintf+0x162>
    125c:	83 35       	cpi	r24, 0x53	; 83
    125e:	09 f0       	breq	.+2      	; 0x1262 <vfprintf+0x148>
    1260:	5a c0       	rjmp	.+180    	; 0x1316 <vfprintf+0x1fc>
    1262:	22 c0       	rjmp	.+68     	; 0x12a8 <vfprintf+0x18e>
    1264:	f5 01       	movw	r30, r10
    1266:	80 81       	ld	r24, Z
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	22 e0       	ldi	r18, 0x02	; 2
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	a2 0e       	add	r10, r18
    1270:	b3 1e       	adc	r11, r19
    1272:	21 e0       	ldi	r18, 0x01	; 1
    1274:	c2 2e       	mov	r12, r18
    1276:	d1 2c       	mov	r13, r1
    1278:	42 01       	movw	r8, r4
    127a:	14 c0       	rjmp	.+40     	; 0x12a4 <vfprintf+0x18a>
    127c:	92 e0       	ldi	r25, 0x02	; 2
    127e:	29 2e       	mov	r2, r25
    1280:	31 2c       	mov	r3, r1
    1282:	2a 0c       	add	r2, r10
    1284:	3b 1c       	adc	r3, r11
    1286:	f5 01       	movw	r30, r10
    1288:	80 80       	ld	r8, Z
    128a:	91 80       	ldd	r9, Z+1	; 0x01
    128c:	16 ff       	sbrs	r17, 6
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <vfprintf+0x17c>
    1290:	6f 2d       	mov	r22, r15
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	02 c0       	rjmp	.+4      	; 0x129a <vfprintf+0x180>
    1296:	6f ef       	ldi	r22, 0xFF	; 255
    1298:	7f ef       	ldi	r23, 0xFF	; 255
    129a:	c4 01       	movw	r24, r8
    129c:	0e 94 9f 0a 	call	0x153e	; 0x153e <strnlen>
    12a0:	6c 01       	movw	r12, r24
    12a2:	51 01       	movw	r10, r2
    12a4:	1f 77       	andi	r17, 0x7F	; 127
    12a6:	15 c0       	rjmp	.+42     	; 0x12d2 <vfprintf+0x1b8>
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	28 2e       	mov	r2, r24
    12ac:	31 2c       	mov	r3, r1
    12ae:	2a 0c       	add	r2, r10
    12b0:	3b 1c       	adc	r3, r11
    12b2:	f5 01       	movw	r30, r10
    12b4:	80 80       	ld	r8, Z
    12b6:	91 80       	ldd	r9, Z+1	; 0x01
    12b8:	16 ff       	sbrs	r17, 6
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <vfprintf+0x1a8>
    12bc:	6f 2d       	mov	r22, r15
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <vfprintf+0x1ac>
    12c2:	6f ef       	ldi	r22, 0xFF	; 255
    12c4:	7f ef       	ldi	r23, 0xFF	; 255
    12c6:	c4 01       	movw	r24, r8
    12c8:	0e 94 94 0a 	call	0x1528	; 0x1528 <strnlen_P>
    12cc:	6c 01       	movw	r12, r24
    12ce:	10 68       	ori	r17, 0x80	; 128
    12d0:	51 01       	movw	r10, r2
    12d2:	13 fd       	sbrc	r17, 3
    12d4:	1c c0       	rjmp	.+56     	; 0x130e <vfprintf+0x1f4>
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <vfprintf+0x1ca>
    12d8:	80 e2       	ldi	r24, 0x20	; 32
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	b3 01       	movw	r22, r6
    12de:	0e 94 aa 0a 	call	0x1554	; 0x1554 <fputc>
    12e2:	ea 94       	dec	r14
    12e4:	8e 2d       	mov	r24, r14
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	c8 16       	cp	r12, r24
    12ea:	d9 06       	cpc	r13, r25
    12ec:	a8 f3       	brcs	.-22     	; 0x12d8 <vfprintf+0x1be>
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <vfprintf+0x1f4>
    12f0:	f4 01       	movw	r30, r8
    12f2:	17 fd       	sbrc	r17, 7
    12f4:	85 91       	lpm	r24, Z+
    12f6:	17 ff       	sbrs	r17, 7
    12f8:	81 91       	ld	r24, Z+
    12fa:	4f 01       	movw	r8, r30
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	b3 01       	movw	r22, r6
    1300:	0e 94 aa 0a 	call	0x1554	; 0x1554 <fputc>
    1304:	e1 10       	cpse	r14, r1
    1306:	ea 94       	dec	r14
    1308:	08 94       	sec
    130a:	c1 08       	sbc	r12, r1
    130c:	d1 08       	sbc	r13, r1
    130e:	c1 14       	cp	r12, r1
    1310:	d1 04       	cpc	r13, r1
    1312:	71 f7       	brne	.-36     	; 0x12f0 <vfprintf+0x1d6>
    1314:	e7 c0       	rjmp	.+462    	; 0x14e4 <vfprintf+0x3ca>
    1316:	84 36       	cpi	r24, 0x64	; 100
    1318:	11 f0       	breq	.+4      	; 0x131e <vfprintf+0x204>
    131a:	89 36       	cpi	r24, 0x69	; 105
    131c:	51 f5       	brne	.+84     	; 0x1372 <vfprintf+0x258>
    131e:	f5 01       	movw	r30, r10
    1320:	17 ff       	sbrs	r17, 7
    1322:	07 c0       	rjmp	.+14     	; 0x1332 <vfprintf+0x218>
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	a2 81       	ldd	r26, Z+2	; 0x02
    132a:	b3 81       	ldd	r27, Z+3	; 0x03
    132c:	24 e0       	ldi	r18, 0x04	; 4
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	08 c0       	rjmp	.+16     	; 0x1342 <vfprintf+0x228>
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	aa 27       	eor	r26, r26
    1338:	97 fd       	sbrc	r25, 7
    133a:	a0 95       	com	r26
    133c:	ba 2f       	mov	r27, r26
    133e:	22 e0       	ldi	r18, 0x02	; 2
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	a2 0e       	add	r10, r18
    1344:	b3 1e       	adc	r11, r19
    1346:	01 2f       	mov	r16, r17
    1348:	0f 76       	andi	r16, 0x6F	; 111
    134a:	b7 ff       	sbrs	r27, 7
    134c:	08 c0       	rjmp	.+16     	; 0x135e <vfprintf+0x244>
    134e:	b0 95       	com	r27
    1350:	a0 95       	com	r26
    1352:	90 95       	com	r25
    1354:	81 95       	neg	r24
    1356:	9f 4f       	sbci	r25, 0xFF	; 255
    1358:	af 4f       	sbci	r26, 0xFF	; 255
    135a:	bf 4f       	sbci	r27, 0xFF	; 255
    135c:	00 68       	ori	r16, 0x80	; 128
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	a2 01       	movw	r20, r4
    1364:	2a e0       	ldi	r18, 0x0A	; 10
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__ultoa_invert>
    136c:	d8 2e       	mov	r13, r24
    136e:	d4 18       	sub	r13, r4
    1370:	3f c0       	rjmp	.+126    	; 0x13f0 <vfprintf+0x2d6>
    1372:	85 37       	cpi	r24, 0x75	; 117
    1374:	21 f4       	brne	.+8      	; 0x137e <vfprintf+0x264>
    1376:	1f 7e       	andi	r17, 0xEF	; 239
    1378:	2a e0       	ldi	r18, 0x0A	; 10
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	20 c0       	rjmp	.+64     	; 0x13be <vfprintf+0x2a4>
    137e:	19 7f       	andi	r17, 0xF9	; 249
    1380:	8f 36       	cpi	r24, 0x6F	; 111
    1382:	a9 f0       	breq	.+42     	; 0x13ae <vfprintf+0x294>
    1384:	80 37       	cpi	r24, 0x70	; 112
    1386:	20 f4       	brcc	.+8      	; 0x1390 <vfprintf+0x276>
    1388:	88 35       	cpi	r24, 0x58	; 88
    138a:	09 f0       	breq	.+2      	; 0x138e <vfprintf+0x274>
    138c:	ae c0       	rjmp	.+348    	; 0x14ea <vfprintf+0x3d0>
    138e:	0b c0       	rjmp	.+22     	; 0x13a6 <vfprintf+0x28c>
    1390:	80 37       	cpi	r24, 0x70	; 112
    1392:	21 f0       	breq	.+8      	; 0x139c <vfprintf+0x282>
    1394:	88 37       	cpi	r24, 0x78	; 120
    1396:	09 f0       	breq	.+2      	; 0x139a <vfprintf+0x280>
    1398:	a8 c0       	rjmp	.+336    	; 0x14ea <vfprintf+0x3d0>
    139a:	01 c0       	rjmp	.+2      	; 0x139e <vfprintf+0x284>
    139c:	10 61       	ori	r17, 0x10	; 16
    139e:	14 ff       	sbrs	r17, 4
    13a0:	09 c0       	rjmp	.+18     	; 0x13b4 <vfprintf+0x29a>
    13a2:	14 60       	ori	r17, 0x04	; 4
    13a4:	07 c0       	rjmp	.+14     	; 0x13b4 <vfprintf+0x29a>
    13a6:	14 ff       	sbrs	r17, 4
    13a8:	08 c0       	rjmp	.+16     	; 0x13ba <vfprintf+0x2a0>
    13aa:	16 60       	ori	r17, 0x06	; 6
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <vfprintf+0x2a0>
    13ae:	28 e0       	ldi	r18, 0x08	; 8
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	05 c0       	rjmp	.+10     	; 0x13be <vfprintf+0x2a4>
    13b4:	20 e1       	ldi	r18, 0x10	; 16
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <vfprintf+0x2a4>
    13ba:	20 e1       	ldi	r18, 0x10	; 16
    13bc:	32 e0       	ldi	r19, 0x02	; 2
    13be:	f5 01       	movw	r30, r10
    13c0:	17 ff       	sbrs	r17, 7
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <vfprintf+0x2b8>
    13c4:	60 81       	ld	r22, Z
    13c6:	71 81       	ldd	r23, Z+1	; 0x01
    13c8:	82 81       	ldd	r24, Z+2	; 0x02
    13ca:	93 81       	ldd	r25, Z+3	; 0x03
    13cc:	44 e0       	ldi	r20, 0x04	; 4
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	06 c0       	rjmp	.+12     	; 0x13de <vfprintf+0x2c4>
    13d2:	60 81       	ld	r22, Z
    13d4:	71 81       	ldd	r23, Z+1	; 0x01
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	42 e0       	ldi	r20, 0x02	; 2
    13dc:	50 e0       	ldi	r21, 0x00	; 0
    13de:	a4 0e       	add	r10, r20
    13e0:	b5 1e       	adc	r11, r21
    13e2:	a2 01       	movw	r20, r4
    13e4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__ultoa_invert>
    13e8:	d8 2e       	mov	r13, r24
    13ea:	d4 18       	sub	r13, r4
    13ec:	01 2f       	mov	r16, r17
    13ee:	0f 77       	andi	r16, 0x7F	; 127
    13f0:	06 ff       	sbrs	r16, 6
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <vfprintf+0x2ec>
    13f4:	0e 7f       	andi	r16, 0xFE	; 254
    13f6:	df 14       	cp	r13, r15
    13f8:	30 f4       	brcc	.+12     	; 0x1406 <vfprintf+0x2ec>
    13fa:	04 ff       	sbrs	r16, 4
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <vfprintf+0x2f0>
    13fe:	02 fd       	sbrc	r16, 2
    1400:	04 c0       	rjmp	.+8      	; 0x140a <vfprintf+0x2f0>
    1402:	0f 7e       	andi	r16, 0xEF	; 239
    1404:	02 c0       	rjmp	.+4      	; 0x140a <vfprintf+0x2f0>
    1406:	1d 2d       	mov	r17, r13
    1408:	01 c0       	rjmp	.+2      	; 0x140c <vfprintf+0x2f2>
    140a:	1f 2d       	mov	r17, r15
    140c:	80 2f       	mov	r24, r16
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	04 ff       	sbrs	r16, 4
    1412:	0c c0       	rjmp	.+24     	; 0x142c <vfprintf+0x312>
    1414:	fe 01       	movw	r30, r28
    1416:	ed 0d       	add	r30, r13
    1418:	f1 1d       	adc	r31, r1
    141a:	20 81       	ld	r18, Z
    141c:	20 33       	cpi	r18, 0x30	; 48
    141e:	11 f4       	brne	.+4      	; 0x1424 <vfprintf+0x30a>
    1420:	09 7e       	andi	r16, 0xE9	; 233
    1422:	09 c0       	rjmp	.+18     	; 0x1436 <vfprintf+0x31c>
    1424:	02 ff       	sbrs	r16, 2
    1426:	06 c0       	rjmp	.+12     	; 0x1434 <vfprintf+0x31a>
    1428:	1e 5f       	subi	r17, 0xFE	; 254
    142a:	05 c0       	rjmp	.+10     	; 0x1436 <vfprintf+0x31c>
    142c:	86 78       	andi	r24, 0x86	; 134
    142e:	90 70       	andi	r25, 0x00	; 0
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	09 f0       	breq	.+2      	; 0x1436 <vfprintf+0x31c>
    1434:	1f 5f       	subi	r17, 0xFF	; 255
    1436:	80 2e       	mov	r8, r16
    1438:	99 24       	eor	r9, r9
    143a:	03 fd       	sbrc	r16, 3
    143c:	12 c0       	rjmp	.+36     	; 0x1462 <vfprintf+0x348>
    143e:	00 ff       	sbrs	r16, 0
    1440:	0d c0       	rjmp	.+26     	; 0x145c <vfprintf+0x342>
    1442:	fd 2c       	mov	r15, r13
    1444:	1e 15       	cp	r17, r14
    1446:	50 f4       	brcc	.+20     	; 0x145c <vfprintf+0x342>
    1448:	fe 0c       	add	r15, r14
    144a:	f1 1a       	sub	r15, r17
    144c:	1e 2d       	mov	r17, r14
    144e:	06 c0       	rjmp	.+12     	; 0x145c <vfprintf+0x342>
    1450:	80 e2       	ldi	r24, 0x20	; 32
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	b3 01       	movw	r22, r6
    1456:	0e 94 aa 0a 	call	0x1554	; 0x1554 <fputc>
    145a:	1f 5f       	subi	r17, 0xFF	; 255
    145c:	1e 15       	cp	r17, r14
    145e:	c0 f3       	brcs	.-16     	; 0x1450 <vfprintf+0x336>
    1460:	04 c0       	rjmp	.+8      	; 0x146a <vfprintf+0x350>
    1462:	1e 15       	cp	r17, r14
    1464:	10 f4       	brcc	.+4      	; 0x146a <vfprintf+0x350>
    1466:	e1 1a       	sub	r14, r17
    1468:	01 c0       	rjmp	.+2      	; 0x146c <vfprintf+0x352>
    146a:	ee 24       	eor	r14, r14
    146c:	84 fe       	sbrs	r8, 4
    146e:	0f c0       	rjmp	.+30     	; 0x148e <vfprintf+0x374>
    1470:	80 e3       	ldi	r24, 0x30	; 48
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	b3 01       	movw	r22, r6
    1476:	0e 94 aa 0a 	call	0x1554	; 0x1554 <fputc>
    147a:	82 fe       	sbrs	r8, 2
    147c:	1f c0       	rjmp	.+62     	; 0x14bc <vfprintf+0x3a2>
    147e:	81 fe       	sbrs	r8, 1
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <vfprintf+0x36e>
    1482:	88 e5       	ldi	r24, 0x58	; 88
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	10 c0       	rjmp	.+32     	; 0x14a8 <vfprintf+0x38e>
    1488:	88 e7       	ldi	r24, 0x78	; 120
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0d c0       	rjmp	.+26     	; 0x14a8 <vfprintf+0x38e>
    148e:	c4 01       	movw	r24, r8
    1490:	86 78       	andi	r24, 0x86	; 134
    1492:	90 70       	andi	r25, 0x00	; 0
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	91 f0       	breq	.+36     	; 0x14bc <vfprintf+0x3a2>
    1498:	81 fc       	sbrc	r8, 1
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <vfprintf+0x386>
    149c:	80 e2       	ldi	r24, 0x20	; 32
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <vfprintf+0x388>
    14a0:	8b e2       	ldi	r24, 0x2B	; 43
    14a2:	07 fd       	sbrc	r16, 7
    14a4:	8d e2       	ldi	r24, 0x2D	; 45
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	b3 01       	movw	r22, r6
    14aa:	0e 94 aa 0a 	call	0x1554	; 0x1554 <fputc>
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <vfprintf+0x3a2>
    14b0:	80 e3       	ldi	r24, 0x30	; 48
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	b3 01       	movw	r22, r6
    14b6:	0e 94 aa 0a 	call	0x1554	; 0x1554 <fputc>
    14ba:	fa 94       	dec	r15
    14bc:	df 14       	cp	r13, r15
    14be:	c0 f3       	brcs	.-16     	; 0x14b0 <vfprintf+0x396>
    14c0:	da 94       	dec	r13
    14c2:	f2 01       	movw	r30, r4
    14c4:	ed 0d       	add	r30, r13
    14c6:	f1 1d       	adc	r31, r1
    14c8:	80 81       	ld	r24, Z
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	b3 01       	movw	r22, r6
    14ce:	0e 94 aa 0a 	call	0x1554	; 0x1554 <fputc>
    14d2:	dd 20       	and	r13, r13
    14d4:	a9 f7       	brne	.-22     	; 0x14c0 <vfprintf+0x3a6>
    14d6:	06 c0       	rjmp	.+12     	; 0x14e4 <vfprintf+0x3ca>
    14d8:	80 e2       	ldi	r24, 0x20	; 32
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	b3 01       	movw	r22, r6
    14de:	0e 94 aa 0a 	call	0x1554	; 0x1554 <fputc>
    14e2:	ea 94       	dec	r14
    14e4:	ee 20       	and	r14, r14
    14e6:	c1 f7       	brne	.-16     	; 0x14d8 <vfprintf+0x3be>
    14e8:	40 ce       	rjmp	.-896    	; 0x116a <vfprintf+0x50>
    14ea:	f3 01       	movw	r30, r6
    14ec:	86 81       	ldd	r24, Z+6	; 0x06
    14ee:	97 81       	ldd	r25, Z+7	; 0x07
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <vfprintf+0x3dc>
    14f2:	8f ef       	ldi	r24, 0xFF	; 255
    14f4:	9f ef       	ldi	r25, 0xFF	; 255
    14f6:	2d 96       	adiw	r28, 0x0d	; 13
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	df 90       	pop	r13
    1510:	cf 90       	pop	r12
    1512:	bf 90       	pop	r11
    1514:	af 90       	pop	r10
    1516:	9f 90       	pop	r9
    1518:	8f 90       	pop	r8
    151a:	7f 90       	pop	r7
    151c:	6f 90       	pop	r6
    151e:	5f 90       	pop	r5
    1520:	4f 90       	pop	r4
    1522:	3f 90       	pop	r3
    1524:	2f 90       	pop	r2
    1526:	08 95       	ret

00001528 <strnlen_P>:
    1528:	fc 01       	movw	r30, r24
    152a:	05 90       	lpm	r0, Z+
    152c:	61 50       	subi	r22, 0x01	; 1
    152e:	70 40       	sbci	r23, 0x00	; 0
    1530:	01 10       	cpse	r0, r1
    1532:	d8 f7       	brcc	.-10     	; 0x152a <strnlen_P+0x2>
    1534:	80 95       	com	r24
    1536:	90 95       	com	r25
    1538:	8e 0f       	add	r24, r30
    153a:	9f 1f       	adc	r25, r31
    153c:	08 95       	ret

0000153e <strnlen>:
    153e:	fc 01       	movw	r30, r24
    1540:	61 50       	subi	r22, 0x01	; 1
    1542:	70 40       	sbci	r23, 0x00	; 0
    1544:	01 90       	ld	r0, Z+
    1546:	01 10       	cpse	r0, r1
    1548:	d8 f7       	brcc	.-10     	; 0x1540 <strnlen+0x2>
    154a:	80 95       	com	r24
    154c:	90 95       	com	r25
    154e:	8e 0f       	add	r24, r30
    1550:	9f 1f       	adc	r25, r31
    1552:	08 95       	ret

00001554 <fputc>:
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	8c 01       	movw	r16, r24
    155e:	eb 01       	movw	r28, r22
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	81 ff       	sbrs	r24, 1
    1564:	1b c0       	rjmp	.+54     	; 0x159c <fputc+0x48>
    1566:	82 ff       	sbrs	r24, 2
    1568:	0d c0       	rjmp	.+26     	; 0x1584 <fputc+0x30>
    156a:	2e 81       	ldd	r18, Y+6	; 0x06
    156c:	3f 81       	ldd	r19, Y+7	; 0x07
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	9d 81       	ldd	r25, Y+5	; 0x05
    1572:	28 17       	cp	r18, r24
    1574:	39 07       	cpc	r19, r25
    1576:	64 f4       	brge	.+24     	; 0x1590 <fputc+0x3c>
    1578:	e8 81       	ld	r30, Y
    157a:	f9 81       	ldd	r31, Y+1	; 0x01
    157c:	01 93       	st	Z+, r16
    157e:	f9 83       	std	Y+1, r31	; 0x01
    1580:	e8 83       	st	Y, r30
    1582:	06 c0       	rjmp	.+12     	; 0x1590 <fputc+0x3c>
    1584:	e8 85       	ldd	r30, Y+8	; 0x08
    1586:	f9 85       	ldd	r31, Y+9	; 0x09
    1588:	80 2f       	mov	r24, r16
    158a:	09 95       	icall
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	31 f4       	brne	.+12     	; 0x159c <fputc+0x48>
    1590:	8e 81       	ldd	r24, Y+6	; 0x06
    1592:	9f 81       	ldd	r25, Y+7	; 0x07
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	9f 83       	std	Y+7, r25	; 0x07
    1598:	8e 83       	std	Y+6, r24	; 0x06
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <fputc+0x4c>
    159c:	0f ef       	ldi	r16, 0xFF	; 255
    159e:	1f ef       	ldi	r17, 0xFF	; 255
    15a0:	c8 01       	movw	r24, r16
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	08 95       	ret

000015ac <__ultoa_invert>:
    15ac:	fa 01       	movw	r30, r20
    15ae:	aa 27       	eor	r26, r26
    15b0:	28 30       	cpi	r18, 0x08	; 8
    15b2:	51 f1       	breq	.+84     	; 0x1608 <__ultoa_invert+0x5c>
    15b4:	20 31       	cpi	r18, 0x10	; 16
    15b6:	81 f1       	breq	.+96     	; 0x1618 <__ultoa_invert+0x6c>
    15b8:	e8 94       	clt
    15ba:	6f 93       	push	r22
    15bc:	6e 7f       	andi	r22, 0xFE	; 254
    15be:	6e 5f       	subi	r22, 0xFE	; 254
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	8f 4f       	sbci	r24, 0xFF	; 255
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	af 4f       	sbci	r26, 0xFF	; 255
    15c8:	b1 e0       	ldi	r27, 0x01	; 1
    15ca:	3e d0       	rcall	.+124    	; 0x1648 <__ultoa_invert+0x9c>
    15cc:	b4 e0       	ldi	r27, 0x04	; 4
    15ce:	3c d0       	rcall	.+120    	; 0x1648 <__ultoa_invert+0x9c>
    15d0:	67 0f       	add	r22, r23
    15d2:	78 1f       	adc	r23, r24
    15d4:	89 1f       	adc	r24, r25
    15d6:	9a 1f       	adc	r25, r26
    15d8:	a1 1d       	adc	r26, r1
    15da:	68 0f       	add	r22, r24
    15dc:	79 1f       	adc	r23, r25
    15de:	8a 1f       	adc	r24, r26
    15e0:	91 1d       	adc	r25, r1
    15e2:	a1 1d       	adc	r26, r1
    15e4:	6a 0f       	add	r22, r26
    15e6:	71 1d       	adc	r23, r1
    15e8:	81 1d       	adc	r24, r1
    15ea:	91 1d       	adc	r25, r1
    15ec:	a1 1d       	adc	r26, r1
    15ee:	20 d0       	rcall	.+64     	; 0x1630 <__ultoa_invert+0x84>
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <__ultoa_invert+0x48>
    15f2:	68 94       	set
    15f4:	3f 91       	pop	r19
    15f6:	2a e0       	ldi	r18, 0x0A	; 10
    15f8:	26 9f       	mul	r18, r22
    15fa:	11 24       	eor	r1, r1
    15fc:	30 19       	sub	r19, r0
    15fe:	30 5d       	subi	r19, 0xD0	; 208
    1600:	31 93       	st	Z+, r19
    1602:	de f6       	brtc	.-74     	; 0x15ba <__ultoa_invert+0xe>
    1604:	cf 01       	movw	r24, r30
    1606:	08 95       	ret
    1608:	46 2f       	mov	r20, r22
    160a:	47 70       	andi	r20, 0x07	; 7
    160c:	40 5d       	subi	r20, 0xD0	; 208
    160e:	41 93       	st	Z+, r20
    1610:	b3 e0       	ldi	r27, 0x03	; 3
    1612:	0f d0       	rcall	.+30     	; 0x1632 <__ultoa_invert+0x86>
    1614:	c9 f7       	brne	.-14     	; 0x1608 <__ultoa_invert+0x5c>
    1616:	f6 cf       	rjmp	.-20     	; 0x1604 <__ultoa_invert+0x58>
    1618:	46 2f       	mov	r20, r22
    161a:	4f 70       	andi	r20, 0x0F	; 15
    161c:	40 5d       	subi	r20, 0xD0	; 208
    161e:	4a 33       	cpi	r20, 0x3A	; 58
    1620:	18 f0       	brcs	.+6      	; 0x1628 <__ultoa_invert+0x7c>
    1622:	49 5d       	subi	r20, 0xD9	; 217
    1624:	31 fd       	sbrc	r19, 1
    1626:	40 52       	subi	r20, 0x20	; 32
    1628:	41 93       	st	Z+, r20
    162a:	02 d0       	rcall	.+4      	; 0x1630 <__ultoa_invert+0x84>
    162c:	a9 f7       	brne	.-22     	; 0x1618 <__ultoa_invert+0x6c>
    162e:	ea cf       	rjmp	.-44     	; 0x1604 <__ultoa_invert+0x58>
    1630:	b4 e0       	ldi	r27, 0x04	; 4
    1632:	a6 95       	lsr	r26
    1634:	97 95       	ror	r25
    1636:	87 95       	ror	r24
    1638:	77 95       	ror	r23
    163a:	67 95       	ror	r22
    163c:	ba 95       	dec	r27
    163e:	c9 f7       	brne	.-14     	; 0x1632 <__ultoa_invert+0x86>
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	61 05       	cpc	r22, r1
    1644:	71 05       	cpc	r23, r1
    1646:	08 95       	ret
    1648:	9b 01       	movw	r18, r22
    164a:	ac 01       	movw	r20, r24
    164c:	0a 2e       	mov	r0, r26
    164e:	06 94       	lsr	r0
    1650:	57 95       	ror	r21
    1652:	47 95       	ror	r20
    1654:	37 95       	ror	r19
    1656:	27 95       	ror	r18
    1658:	ba 95       	dec	r27
    165a:	c9 f7       	brne	.-14     	; 0x164e <__ultoa_invert+0xa2>
    165c:	62 0f       	add	r22, r18
    165e:	73 1f       	adc	r23, r19
    1660:	84 1f       	adc	r24, r20
    1662:	95 1f       	adc	r25, r21
    1664:	a0 1d       	adc	r26, r0
    1666:	08 95       	ret

00001668 <_exit>:
    1668:	f8 94       	cli

0000166a <__stop_program>:
    166a:	ff cf       	rjmp	.-2      	; 0x166a <__stop_program>
