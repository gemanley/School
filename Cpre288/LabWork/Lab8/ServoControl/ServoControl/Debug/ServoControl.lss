
ServoControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000d22  00000db6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  0080011e  0080011e  00000dd4  2**0
                  ALLOC
  3 .stab         00000d74  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000027a  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00001dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b0  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000742  00000000  00000000  000030f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c26  00000000  00000000  0000383a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  00004460  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047e  00000000  00000000  00004810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c97  00000000  00000000  00004c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00005925  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e2       	ldi	r30, 0x22	; 34
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	ae e1       	ldi	r26, 0x1E	; 30
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 37       	cpi	r26, 0x71	; 113
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 de 01 	call	0x3bc	; 0x3bc <main>
  c6:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <timer3_init>:
unsigned pulse_interval = 43000;
unsigned mid_point = 1500;

void timer3_init()
{
	OCR3A = pulse_interval-1;  // number of cycles in the interval
  ce:	80 91 02 01 	lds	r24, 0x0102
  d2:	90 91 03 01 	lds	r25, 0x0103
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	90 93 87 00 	sts	0x0087, r25
  dc:	80 93 86 00 	sts	0x0086, r24
	//OCR3B = mid_point-1;   // if you want to move servo to the middle
	TCCR3A = 0x23;   // set COM and WGM (bits 3 and 2)
  e0:	83 e2       	ldi	r24, 0x23	; 35
  e2:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0x1A;   // set WGM (bits 1 and 0) and CS
  e6:	8a e1       	ldi	r24, 0x1A	; 26
  e8:	80 93 8a 00 	sts	0x008A, r24
	TCCR3C = _BV(FOC3B);
  ec:	80 e4       	ldi	r24, 0x40	; 64
  ee:	80 93 8c 00 	sts	0x008C, r24
	
	// it’s necessary to set the OC3B (PE4) pin as the output
	DDRE |= _BV(4);   // set Port E pin 4 (OC3B) as output
  f2:	14 9a       	sbi	0x02, 4	; 2
}
  f4:	08 95       	ret

000000f6 <move_servo>:

void move_servo(unsigned degree)
{
	unsigned pulse_width;   // pulse width in cycles
	pulse_width = 900 + 20 * degree;     // calculate pulse width
  f6:	28 2f       	mov	r18, r24
  f8:	39 2f       	mov	r19, r25
  fa:	c9 01       	movw	r24, r18
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	9c 01       	movw	r18, r24
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	22 0f       	add	r18, r18
 10c:	33 1f       	adc	r19, r19
 10e:	82 0f       	add	r24, r18
 110:	93 1f       	adc	r25, r19
	//pulse_width = 4400;
	OCR3B = pulse_width-1;  // set pulse width
 112:	8d 57       	subi	r24, 0x7D	; 125
 114:	9c 4f       	sbci	r25, 0xFC	; 252
 116:	90 93 85 00 	sts	0x0085, r25
 11a:	80 93 84 00 	sts	0x0084, r24
	wait_ms(200);
 11e:	88 ec       	ldi	r24, 0xC8	; 200
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 78 02 	call	0x4f0	; 0x4f0 <wait_ms>

	// you need to call wait_ms(20) here to enforce a delay for the servo to
	/// move to the position
}
 126:	08 95       	ret

00000128 <countConvert>:

int countConvert(int c)
{
	return (c-900)/20;
 128:	84 58       	subi	r24, 0x84	; 132
 12a:	93 40       	sbci	r25, 0x03	; 3
 12c:	64 e1       	ldi	r22, 0x14	; 20
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__divmodhi4>
 134:	86 2f       	mov	r24, r22
 136:	97 2f       	mov	r25, r23
 138:	08 95       	ret

0000013a <lcd_toggle_clear>:

/// Triggers loading of bits by LCD controller and clears bits after toggle
void lcd_toggle_clear(char delay) {
	const char enable=0x40; //PA6 is tied to Enable

	PORTA|=enable;
 13a:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(delay);
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <wait_ms>
	PORTA&=~enable;
 142:	de 98       	cbi	0x1b, 6	; 27
	PORTA&=0xF0;	
 144:	8b b3       	in	r24, 0x1b	; 27
 146:	80 7f       	andi	r24, 0xF0	; 240
 148:	8b bb       	out	0x1b, r24	; 27
}
 14a:	08 95       	ret

0000014c <lcd_command>:


/// Submits command to LCD controller
void lcd_command(char data) {
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
	const char rs=0x10;		//PA4 is tied to Register Select
	PORTA&=~rs;  //Setting register select low for command mode
 150:	dc 98       	cbi	0x1b, 4	; 27
	PORTA|=(data>>4);
 152:	8b b3       	in	r24, 0x1b	; 27
 154:	9c 2f       	mov	r25, r28
 156:	92 95       	swap	r25
 158:	9f 70       	andi	r25, 0x0F	; 15
 15a:	89 2b       	or	r24, r25
 15c:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(2);
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_toggle_clear>
	PORTA|=(data & 0x0F);
 164:	8b b3       	in	r24, 0x1b	; 27
 166:	cf 70       	andi	r28, 0x0F	; 15
 168:	c8 2b       	or	r28, r24
 16a:	cb bb       	out	0x1b, r28	; 27
	lcd_toggle_clear(2);
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_toggle_clear>
	PORTA|=rs;	//Setting register select high for character mode
 172:	dc 9a       	sbi	0x1b, 4	; 27
}
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <lcd_clear>:



/// Clears the LCD
void lcd_clear(void) {
	lcd_command(HD_LCD_CLEAR);
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
	wait_ms(1);
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 78 02 	call	0x4f0	; 0x4f0 <wait_ms>
}
 186:	08 95       	ret

00000188 <lcd_home_line1>:



/// Sets character position to first line first position
void lcd_home_line1(void) {
	lcd_command(HD_RETURN_HOME);
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
}
 18e:	08 95       	ret

00000190 <lcd_init>:
void lcd_init(void) {
	const char enable=0x40; //PA6 is tied to Enable
	const char rs=0x10;		//PA4 is tied to Register Select
	//Assumes Port A is dedicated to the LCD
	//Seven Pins needed, but will assume all 8 are used
	DDRA=0xFF; //Setting Port A for OutPut
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	8a bb       	out	0x1a, r24	; 26
	 //Preparing to put HD44780 into 4-bit Mod
	PORTA=0x03;
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	8b bb       	out	0x1b, r24	; 27

	PORTA|=enable;
 198:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <wait_ms>
	PORTA&=~enable;
 1a2:	de 98       	cbi	0x1b, 6	; 27
	wait_ms(5);
 1a4:	85 e0       	ldi	r24, 0x05	; 5
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <wait_ms>
	PORTA|=enable;
 1ac:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <wait_ms>
	PORTA&=~enable;
 1b6:	de 98       	cbi	0x1b, 6	; 27
	PORTA|=enable;
 1b8:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 78 02 	call	0x4f0	; 0x4f0 <wait_ms>
	PORTA&=~enable;
 1c2:	de 98       	cbi	0x1b, 6	; 27

	PORTA=0x02;	//setting controller to 4 bit mode
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	8b bb       	out	0x1b, r24	; 27
				//Need to set for 2 lines
	lcd_toggle_clear(1);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_toggle_clear>

	PORTA|=0x00;  //setting disp on, cursor on, blink off
 1ce:	8b b3       	in	r24, 0x1b	; 27
 1d0:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_toggle_clear>
	PORTA|=0x0E;
 1d8:	8b b3       	in	r24, 0x1b	; 27
 1da:	8e 60       	ori	r24, 0x0E	; 14
 1dc:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_toggle_clear>

	PORTA|=0x00; //increment cursor, no display shift
 1e4:	8b b3       	in	r24, 0x1b	; 27
 1e6:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_toggle_clear>
	PORTA|=0x06;
 1ee:	8b b3       	in	r24, 0x1b	; 27
 1f0:	86 60       	ori	r24, 0x06	; 6
 1f2:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_toggle_clear>
	
	PORTA|=0x00; //clear LCD
 1fa:	8b b3       	in	r24, 0x1b	; 27
 1fc:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_toggle_clear>
	PORTA|=0x01;
 204:	d8 9a       	sbi	0x1b, 0	; 27
	lcd_toggle_clear(1);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_toggle_clear>

	PORTA|=rs;	//Setting Register select high to enable character mode
 20c:	dc 9a       	sbi	0x1b, 4	; 27
	lcd_home_line1();
 20e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_home_line1>
}
 212:	08 95       	ret

00000214 <lcd_home_line2>:



/// Sets character position to second line first position
void lcd_home_line2(void) {
	lcd_command(0xC0); //First bit relevant to the set DDRAM address instruction. The remaining bits designate address, which is 0x40.
 214:	80 ec       	ldi	r24, 0xC0	; 192
 216:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
}
 21a:	08 95       	ret

0000021c <lcd_home_line3>:



/// Sets character position to third line first position
void lcd_home_line3(void) {
	lcd_command(0x94);	//First bit relevant to the set DDRAM address instruction. The remaining bits designate address, which is 0x14.
 21c:	84 e9       	ldi	r24, 0x94	; 148
 21e:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
}
 222:	08 95       	ret

00000224 <lcd_home_line4>:



/// Sets character position to fourth line first position
void lcd_home_line4(void){ //First bit relevant to the set DDRAM address instruction. The remaining bits designate address, which is 0x54.
	lcd_command(0xD4); 
 224:	84 ed       	ldi	r24, 0xD4	; 212
 226:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
}
 22a:	08 95       	ret

0000022c <lcd_home_anyloc>:



/// Sets character position to any valid location
void lcd_home_anyloc(unsigned char location) {
	if (location < 0x68) { //Addresses are limitted to 0x00 - 0x67
 22c:	88 36       	cpi	r24, 0x68	; 104
 22e:	18 f4       	brcc	.+6      	; 0x236 <lcd_home_anyloc+0xa>
		location |= 0x80; //Setting the first bit to one, thus forming a DDRAM set address instruction
		lcd_command(location);
 230:	80 68       	ori	r24, 0x80	; 128
 232:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
 236:	08 95       	ret

00000238 <lcd_display_shift_left>:



/// Shift display content left
void lcd_display_shift_left(void) {
	lcd_command(HD_DISPLAY_SHIFT_LEFT);
 238:	88 e1       	ldi	r24, 0x18	; 24
 23a:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
}
 23e:	08 95       	ret

00000240 <lcd_putc>:
}



/// Prints one character at the current cursor position
void lcd_putc(char data) {
 240:	cf 93       	push	r28
 242:	c8 2f       	mov	r28, r24
	PORTA|=(data>>4);
 244:	8b b3       	in	r24, 0x1b	; 27
 246:	9c 2f       	mov	r25, r28
 248:	92 95       	swap	r25
 24a:	9f 70       	andi	r25, 0x0F	; 15
 24c:	89 2b       	or	r24, r25
 24e:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_toggle_clear>
	PORTA|=(data & 0x0F);
 256:	8b b3       	in	r24, 0x1b	; 27
 258:	cf 70       	andi	r28, 0x0F	; 15
 25a:	c8 2b       	or	r28, r24
 25c:	cb bb       	out	0x1b, r28	; 27
	lcd_toggle_clear(1);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_toggle_clear>
}
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <lcd_puts>:
}



/// Prints string to lcd, starting at the current cursor position
void lcd_puts(char * string) {
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
	int size=strlen(string);
 274:	e8 2f       	mov	r30, r24
 276:	f9 2f       	mov	r31, r25
 278:	ef 01       	movw	r28, r30
 27a:	09 90       	ld	r0, Y+
 27c:	00 20       	and	r0, r0
 27e:	e9 f7       	brne	.-6      	; 0x27a <lcd_puts+0x12>
 280:	21 97       	sbiw	r28, 0x01	; 1
 282:	ce 1b       	sub	r28, r30
 284:	df 0b       	sbc	r29, r31
	int i;

	for (i=0;i<size;i++) {		
 286:	1c 16       	cp	r1, r28
 288:	1d 06       	cpc	r1, r29
 28a:	74 f4       	brge	.+28     	; 0x2a8 <lcd_puts+0x40>
 28c:	e8 2e       	mov	r14, r24
 28e:	f9 2e       	mov	r15, r25
 290:	00 e0       	ldi	r16, 0x00	; 0
 292:	10 e0       	ldi	r17, 0x00	; 0
		lcd_putc(string[i]);
 294:	f7 01       	movw	r30, r14
 296:	81 91       	ld	r24, Z+
 298:	7f 01       	movw	r14, r30
 29a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_putc>
/// Prints string to lcd, starting at the current cursor position
void lcd_puts(char * string) {
	int size=strlen(string);
	int i;

	for (i=0;i<size;i++) {		
 29e:	0f 5f       	subi	r16, 0xFF	; 255
 2a0:	1f 4f       	sbci	r17, 0xFF	; 255
 2a2:	c0 17       	cp	r28, r16
 2a4:	d1 07       	cpc	r29, r17
 2a6:	b1 f7       	brne	.-20     	; 0x294 <lcd_puts+0x2c>
		lcd_putc(string[i]);
	}
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	08 95       	ret

000002b6 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
 2b6:	cf 92       	push	r12
 2b8:	df 92       	push	r13
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	c1 55       	subi	r28, 0x51	; 81
 2cc:	d0 40       	sbci	r29, 0x00	; 0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
 2d8:	fe 01       	movw	r30, r28
 2da:	e4 5a       	subi	r30, 0xA4	; 164
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	41 91       	ld	r20, Z+
 2e0:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
 2e2:	ce 01       	movw	r24, r28
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	61 e5       	ldi	r22, 0x51	; 81
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	2e 2f       	mov	r18, r30
 2ec:	3f 2f       	mov	r19, r31
 2ee:	0e 94 b0 03 	call	0x760	; 0x760 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
 2f2:	8e e1       	ldi	r24, 0x1E	; 30
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	be 01       	movw	r22, r28
 2f8:	6f 5f       	subi	r22, 0xFF	; 255
 2fa:	7f 4f       	sbci	r23, 0xFF	; 255
 2fc:	0e 94 a0 03 	call	0x740	; 0x740 <strcmp>
 300:	28 2f       	mov	r18, r24
 302:	39 2f       	mov	r19, r25
 304:	21 15       	cp	r18, r1
 306:	31 05       	cpc	r19, r1
 308:	09 f4       	brne	.+2      	; 0x30c <lprintf+0x56>
 30a:	48 c0       	rjmp	.+144    	; 0x39c <lprintf+0xe6>
		return;
	
	strcpy(lastbuffer, buffer);
 30c:	8e e1       	ldi	r24, 0x1E	; 30
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	be 01       	movw	r22, r28
 312:	6f 5f       	subi	r22, 0xFF	; 255
 314:	7f 4f       	sbci	r23, 0xFF	; 255
 316:	0e 94 a9 03 	call	0x752	; 0x752 <strcpy>
	lcd_clear();
 31a:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clear>
 31e:	6e 01       	movw	r12, r28
 320:	08 94       	sec
 322:	c1 1c       	adc	r12, r1
 324:	d1 1c       	adc	r13, r1
	char *str = buffer;
	int charnum = 0;
 326:	00 e0       	ldi	r16, 0x00	; 0
 328:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
 32a:	0f 2e       	mov	r0, r31
 32c:	f4 e1       	ldi	r31, 0x14	; 20
 32e:	ef 2e       	mov	r14, r31
 330:	ff 24       	eor	r15, r15
 332:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
 334:	2b c0       	rjmp	.+86     	; 0x38c <lprintf+0xd6>
		if (*str == '\n') {
 336:	8a 30       	cpi	r24, 0x0A	; 10
 338:	51 f4       	brne	.+20     	; 0x34e <lprintf+0x98>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
 33a:	c8 01       	movw	r24, r16
 33c:	b7 01       	movw	r22, r14
 33e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__divmodhi4>
 342:	97 01       	movw	r18, r14
 344:	28 1b       	sub	r18, r24
 346:	39 0b       	sbc	r19, r25
 348:	02 0f       	add	r16, r18
 34a:	13 1f       	adc	r17, r19
 34c:	04 c0       	rjmp	.+8      	; 0x356 <lprintf+0xa0>
		} else {
			lcd_putc(*str);
 34e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_putc>
			charnum++;
 352:	0f 5f       	subi	r16, 0xFF	; 255
 354:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
 356:	c8 01       	movw	r24, r16
 358:	b7 01       	movw	r22, r14
 35a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__divmodhi4>
 35e:	00 97       	sbiw	r24, 0x00	; 0
 360:	a9 f4       	brne	.+42     	; 0x38c <lprintf+0xd6>
			switch (charnum / LCD_WIDTH) {
 362:	c8 01       	movw	r24, r16
 364:	b7 01       	movw	r22, r14
 366:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__divmodhi4>
 36a:	62 30       	cpi	r22, 0x02	; 2
 36c:	71 05       	cpc	r23, r1
 36e:	49 f0       	breq	.+18     	; 0x382 <lprintf+0xcc>
 370:	63 30       	cpi	r22, 0x03	; 3
 372:	71 05       	cpc	r23, r1
 374:	49 f0       	breq	.+18     	; 0x388 <lprintf+0xd2>
 376:	61 30       	cpi	r22, 0x01	; 1
 378:	71 05       	cpc	r23, r1
 37a:	41 f4       	brne	.+16     	; 0x38c <lprintf+0xd6>
			case 1:
				lcd_home_line2();
 37c:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_home_line2>
				break;
 380:	05 c0       	rjmp	.+10     	; 0x38c <lprintf+0xd6>
			case 2:
				lcd_home_line3();
 382:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_home_line3>
				break;
 386:	02 c0       	rjmp	.+4      	; 0x38c <lprintf+0xd6>
			case 3:
				lcd_home_line4();
 388:	0e 94 12 01 	call	0x224	; 0x224 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
 38c:	f6 01       	movw	r30, r12
 38e:	81 91       	ld	r24, Z+
 390:	6f 01       	movw	r12, r30
 392:	88 23       	and	r24, r24
 394:	19 f0       	breq	.+6      	; 0x39c <lprintf+0xe6>
 396:	00 35       	cpi	r16, 0x50	; 80
 398:	11 05       	cpc	r17, r1
 39a:	6c f2       	brlt	.-102    	; 0x336 <lprintf+0x80>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
 39c:	cf 5a       	subi	r28, 0xAF	; 175
 39e:	df 4f       	sbci	r29, 0xFF	; 255
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	f8 94       	cli
 3a4:	de bf       	out	0x3e, r29	; 62
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	cd bf       	out	0x3d, r28	; 61
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	ff 90       	pop	r15
 3b4:	ef 90       	pop	r14
 3b6:	df 90       	pop	r13
 3b8:	cf 90       	pop	r12
 3ba:	08 95       	ret

000003bc <main>:
#include "lcd.h"
#include "servo.h"

int main(void)
{
	lcd_init();
 3bc:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_init>
	timer3_init();
 3c0:	0e 94 67 00 	call	0xce	; 0xce <timer3_init>
	init_push_buttons();
 3c4:	0e 94 a7 02 	call	0x54e	; 0x54e <init_push_buttons>

	int inc = 1;
	int count = 800;
	int degree = countConvert(count);
 3c8:	80 e2       	ldi	r24, 0x20	; 32
 3ca:	93 e0       	ldi	r25, 0x03	; 3
 3cc:	0e 94 94 00 	call	0x128	; 0x128 <countConvert>

	move_servo(degree);
 3d0:	0e 94 7b 00 	call	0xf6	; 0xf6 <move_servo>
	lcd_init();
	timer3_init();
	init_push_buttons();

	int inc = 1;
	int count = 800;
 3d4:	c0 e2       	ldi	r28, 0x20	; 32
 3d6:	d3 e0       	ldi	r29, 0x03	; 3
{
	lcd_init();
	timer3_init();
	init_push_buttons();

	int inc = 1;
 3d8:	01 e0       	ldi	r16, 0x01	; 1
 3da:	10 e0       	ldi	r17, 0x00	; 0
	int degree = countConvert(count);

	move_servo(degree);
	while(1)
	{
		lprintf("Count: %d\n Direction: %d", count, inc);
 3dc:	0f 2e       	mov	r0, r31
 3de:	f4 e0       	ldi	r31, 0x04	; 4
 3e0:	ef 2e       	mov	r14, r31
 3e2:	f1 e0       	ldi	r31, 0x01	; 1
 3e4:	ff 2e       	mov	r15, r31
 3e6:	f0 2d       	mov	r31, r0
			case '2':
			count += inc * 50;
			move_servo(countConvert(count));
			break;
			case '3':
			count += inc * 100;
 3e8:	0f 2e       	mov	r0, r31
 3ea:	f4 e6       	ldi	r31, 0x64	; 100
 3ec:	cf 2e       	mov	r12, r31
 3ee:	dd 24       	eor	r13, r13
 3f0:	f0 2d       	mov	r31, r0
			case '1':
			count += inc * 20;
			move_servo(countConvert(count));
			break;
			case '2':
			count += inc * 50;
 3f2:	0f 2e       	mov	r0, r31
 3f4:	f2 e3       	ldi	r31, 0x32	; 50
 3f6:	af 2e       	mov	r10, r31
 3f8:	bb 24       	eor	r11, r11
 3fa:	f0 2d       	mov	r31, r0
	int degree = countConvert(count);

	move_servo(degree);
	while(1)
	{
		lprintf("Count: %d\n Direction: %d", count, inc);
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <main+0x42>
 3fe:	00 d0       	rcall	.+0      	; 0x400 <main+0x44>
 400:	00 d0       	rcall	.+0      	; 0x402 <main+0x46>
 402:	ed b7       	in	r30, 0x3d	; 61
 404:	fe b7       	in	r31, 0x3e	; 62
 406:	31 96       	adiw	r30, 0x01	; 1
 408:	ad b7       	in	r26, 0x3d	; 61
 40a:	be b7       	in	r27, 0x3e	; 62
 40c:	12 96       	adiw	r26, 0x02	; 2
 40e:	fc 92       	st	X, r15
 410:	ee 92       	st	-X, r14
 412:	11 97       	sbiw	r26, 0x01	; 1
 414:	d3 83       	std	Z+3, r29	; 0x03
 416:	c2 83       	std	Z+2, r28	; 0x02
 418:	15 83       	std	Z+5, r17	; 0x05
 41a:	04 83       	std	Z+4, r16	; 0x04
 41c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lprintf>
		switch(read_push_buttons())
 420:	8d b7       	in	r24, 0x3d	; 61
 422:	9e b7       	in	r25, 0x3e	; 62
 424:	06 96       	adiw	r24, 0x06	; 6
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	f8 94       	cli
 42a:	9e bf       	out	0x3e, r25	; 62
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	8d bf       	out	0x3d, r24	; 61
 430:	0e 94 ae 02 	call	0x55c	; 0x55c <read_push_buttons>
 434:	82 33       	cpi	r24, 0x32	; 50
 436:	f1 f0       	breq	.+60     	; 0x474 <main+0xb8>
 438:	83 33       	cpi	r24, 0x33	; 51
 43a:	18 f4       	brcc	.+6      	; 0x442 <main+0x86>
 43c:	81 33       	cpi	r24, 0x31	; 49
 43e:	f1 f6       	brne	.-68     	; 0x3fc <main+0x40>
 440:	05 c0       	rjmp	.+10     	; 0x44c <main+0x90>
 442:	83 33       	cpi	r24, 0x33	; 51
 444:	31 f1       	breq	.+76     	; 0x492 <main+0xd6>
 446:	84 33       	cpi	r24, 0x34	; 52
 448:	c9 f6       	brne	.-78     	; 0x3fc <main+0x40>
 44a:	32 c0       	rjmp	.+100    	; 0x4b0 <main+0xf4>
		{
			case '1':
			count += inc * 20;
 44c:	c8 01       	movw	r24, r16
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	9c 01       	movw	r18, r24
 458:	22 0f       	add	r18, r18
 45a:	33 1f       	adc	r19, r19
 45c:	22 0f       	add	r18, r18
 45e:	33 1f       	adc	r19, r19
 460:	82 0f       	add	r24, r18
 462:	93 1f       	adc	r25, r19
 464:	c8 0f       	add	r28, r24
 466:	d9 1f       	adc	r29, r25
			move_servo(countConvert(count));
 468:	ce 01       	movw	r24, r28
 46a:	0e 94 94 00 	call	0x128	; 0x128 <countConvert>
 46e:	0e 94 7b 00 	call	0xf6	; 0xf6 <move_servo>
			break;
 472:	c4 cf       	rjmp	.-120    	; 0x3fc <main+0x40>
			case '2':
			count += inc * 50;
 474:	0a 9d       	mul	r16, r10
 476:	c0 01       	movw	r24, r0
 478:	0b 9d       	mul	r16, r11
 47a:	90 0d       	add	r25, r0
 47c:	1a 9d       	mul	r17, r10
 47e:	90 0d       	add	r25, r0
 480:	11 24       	eor	r1, r1
 482:	c8 0f       	add	r28, r24
 484:	d9 1f       	adc	r29, r25
			move_servo(countConvert(count));
 486:	ce 01       	movw	r24, r28
 488:	0e 94 94 00 	call	0x128	; 0x128 <countConvert>
 48c:	0e 94 7b 00 	call	0xf6	; 0xf6 <move_servo>
			break;
 490:	b5 cf       	rjmp	.-150    	; 0x3fc <main+0x40>
			case '3':
			count += inc * 100;
 492:	0c 9d       	mul	r16, r12
 494:	c0 01       	movw	r24, r0
 496:	0d 9d       	mul	r16, r13
 498:	90 0d       	add	r25, r0
 49a:	1c 9d       	mul	r17, r12
 49c:	90 0d       	add	r25, r0
 49e:	11 24       	eor	r1, r1
 4a0:	c8 0f       	add	r28, r24
 4a2:	d9 1f       	adc	r29, r25
			move_servo(countConvert(count));
 4a4:	ce 01       	movw	r24, r28
 4a6:	0e 94 94 00 	call	0x128	; 0x128 <countConvert>
 4aa:	0e 94 7b 00 	call	0xf6	; 0xf6 <move_servo>
			break;
 4ae:	a6 cf       	rjmp	.-180    	; 0x3fc <main+0x40>
			case '4':
			inc = -1 * inc;
 4b0:	10 95       	com	r17
 4b2:	01 95       	neg	r16
 4b4:	1f 4f       	sbci	r17, 0xFF	; 255
			break;
 4b6:	a2 cf       	rjmp	.-188    	; 0x3fc <main+0x40>

000004b8 <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
 4b8:	10 92 70 01 	sts	0x0170, r1
 4bc:	10 92 6f 01 	sts	0x016F, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
 4c0:	88 23       	and	r24, r24
 4c2:	31 f4       	brne	.+12     	; 0x4d0 <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
 4c4:	8b e0       	ldi	r24, 0x0B	; 11
 4c6:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
 4c8:	87 b7       	in	r24, 0x37	; 55
 4ca:	80 68       	ori	r24, 0x80	; 128
 4cc:	87 bf       	out	0x37, r24	; 55
 4ce:	07 c0       	rjmp	.+14     	; 0x4de <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	29 f4       	brne	.+10     	; 0x4de <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
 4d4:	89 e0       	ldi	r24, 0x09	; 9
 4d6:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
 4d8:	87 b7       	in	r24, 0x37	; 55
 4da:	80 68       	ori	r24, 0x80	; 128
 4dc:	87 bf       	out	0x37, r24	; 55
	}
	sei();
 4de:	78 94       	sei
}
 4e0:	08 95       	ret

000004e2 <timer2_stop>:


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
 4e2:	87 b7       	in	r24, 0x37	; 55
 4e4:	8f 77       	andi	r24, 0x7F	; 127
 4e6:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
 4e8:	85 b5       	in	r24, 0x25	; 37
 4ea:	8f 77       	andi	r24, 0x7F	; 127
 4ec:	85 bd       	out	0x25, r24	; 37
}
 4ee:	08 95       	ret

000004f0 <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
 4f6:	8a ef       	ldi	r24, 0xFA	; 250
 4f8:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
 4fa:	10 92 70 01 	sts	0x0170, r1
 4fe:	10 92 6f 01 	sts	0x016F, r1
	timer2_start(0);
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
 508:	80 91 6f 01 	lds	r24, 0x016F
 50c:	90 91 70 01 	lds	r25, 0x0170
 510:	8c 17       	cp	r24, r28
 512:	9d 07       	cpc	r25, r29
 514:	c8 f3       	brcs	.-14     	; 0x508 <wait_ms+0x18>

	timer2_stop();
 516:	0e 94 71 02 	call	0x4e2	; 0x4e2 <timer2_stop>
}
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
 520:	1f 92       	push	r1
 522:	0f 92       	push	r0
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	0f 92       	push	r0
 528:	11 24       	eor	r1, r1
 52a:	8f 93       	push	r24
 52c:	9f 93       	push	r25
	timer2_tick++;
 52e:	80 91 6f 01 	lds	r24, 0x016F
 532:	90 91 70 01 	lds	r25, 0x0170
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	90 93 70 01 	sts	0x0170, r25
 53c:	80 93 6f 01 	sts	0x016F, r24
}
 540:	9f 91       	pop	r25
 542:	8f 91       	pop	r24
 544:	0f 90       	pop	r0
 546:	0f be       	out	0x3f, r0	; 63
 548:	0f 90       	pop	r0
 54a:	1f 90       	pop	r1
 54c:	18 95       	reti

0000054e <init_push_buttons>:



/// Initialize PORTC to accept push buttons as input
void init_push_buttons(void) {
	DDRC &= 0xC0;  //Setting PC0-PC5 to input
 54e:	84 b3       	in	r24, 0x14	; 20
 550:	80 7c       	andi	r24, 0xC0	; 192
 552:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0x3F; //Setting pins' pull up resistors
 554:	85 b3       	in	r24, 0x15	; 21
 556:	8f 63       	ori	r24, 0x3F	; 63
 558:	85 bb       	out	0x15, r24	; 21
}
 55a:	08 95       	ret

0000055c <read_push_buttons>:
/**
 * Return the position of button being pushed.
 * @return the position of the button being pushed.  A 1 is the rightmost button.  0 indicates no button being pressed
 */
char read_push_buttons(void) {
	switch(PINC & 0b00111111)
 55c:	83 b3       	in	r24, 0x13	; 19
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	8f 73       	andi	r24, 0x3F	; 63
 562:	90 70       	andi	r25, 0x00	; 0
 564:	87 33       	cpi	r24, 0x37	; 55
 566:	91 05       	cpc	r25, r1
 568:	b1 f0       	breq	.+44     	; 0x596 <read_push_buttons+0x3a>
 56a:	88 33       	cpi	r24, 0x38	; 56
 56c:	91 05       	cpc	r25, r1
 56e:	3c f4       	brge	.+14     	; 0x57e <read_push_buttons+0x22>
 570:	8f 31       	cpi	r24, 0x1F	; 31
 572:	91 05       	cpc	r25, r1
 574:	71 f0       	breq	.+28     	; 0x592 <read_push_buttons+0x36>
 576:	8f 32       	cpi	r24, 0x2F	; 47
 578:	91 05       	cpc	r25, r1
 57a:	a9 f4       	brne	.+42     	; 0x5a6 <read_push_buttons+0x4a>
 57c:	16 c0       	rjmp	.+44     	; 0x5aa <read_push_buttons+0x4e>
 57e:	8d 33       	cpi	r24, 0x3D	; 61
 580:	91 05       	cpc	r25, r1
 582:	69 f0       	breq	.+26     	; 0x59e <read_push_buttons+0x42>
 584:	8e 33       	cpi	r24, 0x3E	; 62
 586:	91 05       	cpc	r25, r1
 588:	61 f0       	breq	.+24     	; 0x5a2 <read_push_buttons+0x46>
 58a:	8b 33       	cpi	r24, 0x3B	; 59
 58c:	91 05       	cpc	r25, r1
 58e:	59 f4       	brne	.+22     	; 0x5a6 <read_push_buttons+0x4a>
 590:	04 c0       	rjmp	.+8      	; 0x59a <read_push_buttons+0x3e>
	{
		case 0b00011111:
		return '6';
 592:	86 e3       	ldi	r24, 0x36	; 54
 594:	08 95       	ret
		case 0b00101111:
		return '5';
		case 0b00110111:
		return '4';
 596:	84 e3       	ldi	r24, 0x34	; 52
 598:	08 95       	ret
		case 0b00111011:
		return '3';
 59a:	83 e3       	ldi	r24, 0x33	; 51
 59c:	08 95       	ret
		case 0b00111101:
		return '2';
 59e:	82 e3       	ldi	r24, 0x32	; 50
 5a0:	08 95       	ret
		case 0b00111110:
		return '1';
 5a2:	81 e3       	ldi	r24, 0x31	; 49
 5a4:	08 95       	ret
		default:
		return '0';
 5a6:	80 e3       	ldi	r24, 0x30	; 48
 5a8:	08 95       	ret
	switch(PINC & 0b00111111)
	{
		case 0b00011111:
		return '6';
		case 0b00101111:
		return '5';
 5aa:	85 e3       	ldi	r24, 0x35	; 53
		case 0b00111110:
		return '1';
		default:
		return '0';
	}
}
 5ac:	08 95       	ret

000005ae <shaft_encoder_init>:



/// Initialize PORTC for input from the shaft encoder
void shaft_encoder_init(void) {
	DDRC &= 0x3F;	//Setting PC6-PC7 to input
 5ae:	84 b3       	in	r24, 0x14	; 20
 5b0:	8f 73       	andi	r24, 0x3F	; 63
 5b2:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0xC0;	//Setting pins' pull-up resistors
 5b4:	85 b3       	in	r24, 0x15	; 21
 5b6:	80 6c       	ori	r24, 0xC0	; 192
 5b8:	85 bb       	out	0x15, r24	; 21
}
 5ba:	08 95       	ret

000005bc <read_shaft_encoder>:
	// static variable to store the old value of A and B.
	// This variable will only be initialized the first time you call this function.
	static char old_value = 0b11000000;		// Step 2: Based on how you decided to mask PINC in step 1, what would new_value be if the switch is in a groove?

	// Function variables
	char new_value = PINC & 0b11000000;			// Step 1: Decide how to read PINC so that the push buttons are masked
 5bc:	93 b3       	in	r25, 0x13	; 19
 5be:	90 7c       	andi	r25, 0xC0	; 192
	signed char rotation = 0;

	// If the knob was in a groove
	if (old_value == 0b11000000) {			// Step 3: Enter here what you did for step 2.
 5c0:	80 91 1d 01 	lds	r24, 0x011D
 5c4:	80 3c       	cpi	r24, 0xC0	; 192
 5c6:	39 f4       	brne	.+14     	; 0x5d6 <read_shaft_encoder+0x1a>
	if (new_value == 0b01000000)		// What will new_value be if you're rotating CW out of a groove
	rotation = 1;
	if (new_value == 0b10000000)		// What will new_value be if you're rotating CCW out of a groove
 5c8:	90 38       	cpi	r25, 0x80	; 128
 5ca:	39 f0       	breq	.+14     	; 0x5da <read_shaft_encoder+0x1e>
	// This variable will only be initialized the first time you call this function.
	static char old_value = 0b11000000;		// Step 2: Based on how you decided to mask PINC in step 1, what would new_value be if the switch is in a groove?

	// Function variables
	char new_value = PINC & 0b11000000;			// Step 1: Decide how to read PINC so that the push buttons are masked
	signed char rotation = 0;
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 34       	cpi	r25, 0x40	; 64
 5d0:	29 f0       	breq	.+10     	; 0x5dc <read_shaft_encoder+0x20>
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	03 c0       	rjmp	.+6      	; 0x5dc <read_shaft_encoder+0x20>
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <read_shaft_encoder+0x20>
	// If the knob was in a groove
	if (old_value == 0b11000000) {			// Step 3: Enter here what you did for step 2.
	if (new_value == 0b01000000)		// What will new_value be if you're rotating CW out of a groove
	rotation = 1;
	if (new_value == 0b10000000)		// What will new_value be if you're rotating CCW out of a groove
	rotation = -1;
 5da:	8f ef       	ldi	r24, 0xFF	; 255
		}

		old_value = new_value;
 5dc:	90 93 1d 01 	sts	0x011D, r25

		return rotation;
}
 5e0:	08 95       	ret

000005e2 <stepper_init>:



/// Initialize PORTE to control the stepper motor
void stepper_init(void) {
	DDRE |= 0xF0;  	//Setting PE4-PE7 to output
 5e2:	82 b1       	in	r24, 0x02	; 2
 5e4:	80 6f       	ori	r24, 0xF0	; 240
 5e6:	82 b9       	out	0x02, r24	; 2
	PORTE &= 0x8F;  //Initial postion (0b1000) PE4-PE7
 5e8:	83 b1       	in	r24, 0x03	; 3
 5ea:	8f 78       	andi	r24, 0x8F	; 143
 5ec:	83 b9       	out	0x03, r24	; 3
	wait_ms(2);
 5ee:	82 e0       	ldi	r24, 0x02	; 2
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <wait_ms>
	PORTE &= 0x0F;  //Clear PE4-PE7
 5f6:	83 b1       	in	r24, 0x03	; 3
 5f8:	8f 70       	andi	r24, 0x0F	; 15
 5fa:	83 b9       	out	0x03, r24	; 3
}
 5fc:	08 95       	ret

000005fe <move_stepper_motor_by_step>:
 * Turn the stepper motor a given number of steps. 
 *
 * @param num_steps A value between 1 and 200 steps (1.8 to 360 degrees)
 * @param direction Indication of direction: 1 for CW and -1 for CCW 
 */
void  move_stepper_motor_by_step(int num_steps, int direction) {
 5fe:	bf 92       	push	r11
 600:	cf 92       	push	r12
 602:	df 92       	push	r13
 604:	ef 92       	push	r14
 606:	ff 92       	push	r15
 608:	0f 93       	push	r16
 60a:	1f 93       	push	r17
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	7c 01       	movw	r14, r24
	if(direction == 1)
 612:	61 30       	cpi	r22, 0x01	; 1
 614:	71 05       	cpc	r23, r1
 616:	89 f5       	brne	.+98     	; 0x67a <move_stepper_motor_by_step+0x7c>
	{
		uint8_t current_pos = PORTE >> 4;
 618:	c3 b1       	in	r28, 0x03	; 3
		for(int i = 0; i < num_steps; i++)
 61a:	18 16       	cp	r1, r24
 61c:	19 06       	cpc	r1, r25
 61e:	0c f0       	brlt	.+2      	; 0x622 <move_stepper_motor_by_step+0x24>
 620:	5e c0       	rjmp	.+188    	; 0x6de <move_stepper_motor_by_step+0xe0>
 * @param direction Indication of direction: 1 for CW and -1 for CCW 
 */
void  move_stepper_motor_by_step(int num_steps, int direction) {
	if(direction == 1)
	{
		uint8_t current_pos = PORTE >> 4;
 622:	c2 95       	swap	r28
 624:	cf 70       	andi	r28, 0x0F	; 15
		for(int i = 0; i < num_steps; i++)
 626:	00 e0       	ldi	r16, 0x00	; 0
 628:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(current_pos == 1)
			{
				current_pos = 2;
 62a:	dd 24       	eor	r13, r13
 62c:	68 94       	set
 62e:	d1 f8       	bld	r13, 1
			}
			else if(current_pos == 2)
			{
				current_pos = 4;
 630:	cc 24       	eor	r12, r12
 632:	68 94       	set
 634:	c2 f8       	bld	r12, 2
			{
				current_pos = 8;
			}
			else
			{
				current_pos = 1;
 636:	d1 e0       	ldi	r29, 0x01	; 1
			{
				current_pos = 4;
			}
			else if(current_pos == 4)
			{
				current_pos = 8;
 638:	bb 24       	eor	r11, r11
 63a:	68 94       	set
 63c:	b3 f8       	bld	r11, 3
	if(direction == 1)
	{
		uint8_t current_pos = PORTE >> 4;
		for(int i = 0; i < num_steps; i++)
		{
			if(current_pos == 1)
 63e:	c1 30       	cpi	r28, 0x01	; 1
 640:	31 f0       	breq	.+12     	; 0x64e <move_stepper_motor_by_step+0x50>
			{
				current_pos = 2;
			}
			else if(current_pos == 2)
 642:	c2 30       	cpi	r28, 0x02	; 2
 644:	31 f0       	breq	.+12     	; 0x652 <move_stepper_motor_by_step+0x54>
			{
				current_pos = 4;
			}
			else if(current_pos == 4)
 646:	c4 30       	cpi	r28, 0x04	; 4
 648:	31 f4       	brne	.+12     	; 0x656 <move_stepper_motor_by_step+0x58>
			{
				current_pos = 8;
 64a:	cb 2d       	mov	r28, r11
 64c:	05 c0       	rjmp	.+10     	; 0x658 <move_stepper_motor_by_step+0x5a>
		uint8_t current_pos = PORTE >> 4;
		for(int i = 0; i < num_steps; i++)
		{
			if(current_pos == 1)
			{
				current_pos = 2;
 64e:	cd 2d       	mov	r28, r13
 650:	03 c0       	rjmp	.+6      	; 0x658 <move_stepper_motor_by_step+0x5a>
			}
			else if(current_pos == 2)
			{
				current_pos = 4;
 652:	cc 2d       	mov	r28, r12
 654:	01 c0       	rjmp	.+2      	; 0x658 <move_stepper_motor_by_step+0x5a>
			{
				current_pos = 8;
			}
			else
			{
				current_pos = 1;
 656:	cd 2f       	mov	r28, r29
			}
			PORTE = (PORTE & 0b00001111) | (current_pos << 4);
 658:	83 b1       	in	r24, 0x03	; 3
 65a:	9c 2f       	mov	r25, r28
 65c:	92 95       	swap	r25
 65e:	90 7f       	andi	r25, 0xF0	; 240
 660:	8f 70       	andi	r24, 0x0F	; 15
 662:	89 2b       	or	r24, r25
 664:	83 b9       	out	0x03, r24	; 3
			wait_ms(2);
 666:	82 e0       	ldi	r24, 0x02	; 2
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <wait_ms>
 */
void  move_stepper_motor_by_step(int num_steps, int direction) {
	if(direction == 1)
	{
		uint8_t current_pos = PORTE >> 4;
		for(int i = 0; i < num_steps; i++)
 66e:	0f 5f       	subi	r16, 0xFF	; 255
 670:	1f 4f       	sbci	r17, 0xFF	; 255
 672:	0e 15       	cp	r16, r14
 674:	1f 05       	cpc	r17, r15
 676:	19 f7       	brne	.-58     	; 0x63e <move_stepper_motor_by_step+0x40>
 678:	32 c0       	rjmp	.+100    	; 0x6de <move_stepper_motor_by_step+0xe0>
			}
			PORTE = (PORTE & 0b00001111) | (current_pos << 4);
			wait_ms(2);
		}
	}
	else if(direction == -1)
 67a:	8f ef       	ldi	r24, 0xFF	; 255
 67c:	6f 3f       	cpi	r22, 0xFF	; 255
 67e:	78 07       	cpc	r23, r24
 680:	71 f5       	brne	.+92     	; 0x6de <move_stepper_motor_by_step+0xe0>
	{
		uint8_t current_pos = PORTE >> 4;
 682:	c3 b1       	in	r28, 0x03	; 3
		for(int i = 0; i < num_steps; i++)
 684:	1e 14       	cp	r1, r14
 686:	1f 04       	cpc	r1, r15
 688:	54 f5       	brge	.+84     	; 0x6de <move_stepper_motor_by_step+0xe0>
			wait_ms(2);
		}
	}
	else if(direction == -1)
	{
		uint8_t current_pos = PORTE >> 4;
 68a:	c2 95       	swap	r28
 68c:	cf 70       	andi	r28, 0x0F	; 15
		for(int i = 0; i < num_steps; i++)
 68e:	00 e0       	ldi	r16, 0x00	; 0
 690:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(current_pos == 1)
			{
				current_pos = 8;
 692:	dd 24       	eor	r13, r13
 694:	68 94       	set
 696:	d3 f8       	bld	r13, 3
			}
			else if(current_pos == 2)
			{
				current_pos = 1;
 698:	cc 24       	eor	r12, r12
 69a:	c3 94       	inc	r12
			{
				current_pos = 2;
			}
			else
			{
				current_pos = 4;
 69c:	d4 e0       	ldi	r29, 0x04	; 4
			{
				current_pos = 1;
			}
			else if(current_pos == 4)
			{
				current_pos = 2;
 69e:	bb 24       	eor	r11, r11
 6a0:	68 94       	set
 6a2:	b1 f8       	bld	r11, 1
	else if(direction == -1)
	{
		uint8_t current_pos = PORTE >> 4;
		for(int i = 0; i < num_steps; i++)
		{
			if(current_pos == 1)
 6a4:	c1 30       	cpi	r28, 0x01	; 1
 6a6:	31 f0       	breq	.+12     	; 0x6b4 <move_stepper_motor_by_step+0xb6>
			{
				current_pos = 8;
			}
			else if(current_pos == 2)
 6a8:	c2 30       	cpi	r28, 0x02	; 2
 6aa:	31 f0       	breq	.+12     	; 0x6b8 <move_stepper_motor_by_step+0xba>
			{
				current_pos = 1;
			}
			else if(current_pos == 4)
 6ac:	c4 30       	cpi	r28, 0x04	; 4
 6ae:	31 f4       	brne	.+12     	; 0x6bc <move_stepper_motor_by_step+0xbe>
			{
				current_pos = 2;
 6b0:	cb 2d       	mov	r28, r11
 6b2:	05 c0       	rjmp	.+10     	; 0x6be <move_stepper_motor_by_step+0xc0>
		uint8_t current_pos = PORTE >> 4;
		for(int i = 0; i < num_steps; i++)
		{
			if(current_pos == 1)
			{
				current_pos = 8;
 6b4:	cd 2d       	mov	r28, r13
 6b6:	03 c0       	rjmp	.+6      	; 0x6be <move_stepper_motor_by_step+0xc0>
			}
			else if(current_pos == 2)
			{
				current_pos = 1;
 6b8:	cc 2d       	mov	r28, r12
 6ba:	01 c0       	rjmp	.+2      	; 0x6be <move_stepper_motor_by_step+0xc0>
			{
				current_pos = 2;
			}
			else
			{
				current_pos = 4;
 6bc:	cd 2f       	mov	r28, r29
			}
			PORTE = (PORTE & 0b00001111) | (current_pos << 4);
 6be:	83 b1       	in	r24, 0x03	; 3
 6c0:	9c 2f       	mov	r25, r28
 6c2:	92 95       	swap	r25
 6c4:	90 7f       	andi	r25, 0xF0	; 240
 6c6:	8f 70       	andi	r24, 0x0F	; 15
 6c8:	89 2b       	or	r24, r25
 6ca:	83 b9       	out	0x03, r24	; 3
			wait_ms(2);
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <wait_ms>
		}
	}
	else if(direction == -1)
	{
		uint8_t current_pos = PORTE >> 4;
		for(int i = 0; i < num_steps; i++)
 6d4:	0f 5f       	subi	r16, 0xFF	; 255
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	0e 15       	cp	r16, r14
 6da:	1f 05       	cpc	r17, r15
 6dc:	19 f7       	brne	.-58     	; 0x6a4 <move_stepper_motor_by_step+0xa6>
			}
			PORTE = (PORTE & 0b00001111) | (current_pos << 4);
			wait_ms(2);
		}
	}
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	df 90       	pop	r13
 6ec:	cf 90       	pop	r12
 6ee:	bf 90       	pop	r11
 6f0:	08 95       	ret

000006f2 <__divmodhi4>:
 6f2:	97 fb       	bst	r25, 7
 6f4:	09 2e       	mov	r0, r25
 6f6:	07 26       	eor	r0, r23
 6f8:	0a d0       	rcall	.+20     	; 0x70e <__divmodhi4_neg1>
 6fa:	77 fd       	sbrc	r23, 7
 6fc:	04 d0       	rcall	.+8      	; 0x706 <__divmodhi4_neg2>
 6fe:	0c d0       	rcall	.+24     	; 0x718 <__udivmodhi4>
 700:	06 d0       	rcall	.+12     	; 0x70e <__divmodhi4_neg1>
 702:	00 20       	and	r0, r0
 704:	1a f4       	brpl	.+6      	; 0x70c <__divmodhi4_exit>

00000706 <__divmodhi4_neg2>:
 706:	70 95       	com	r23
 708:	61 95       	neg	r22
 70a:	7f 4f       	sbci	r23, 0xFF	; 255

0000070c <__divmodhi4_exit>:
 70c:	08 95       	ret

0000070e <__divmodhi4_neg1>:
 70e:	f6 f7       	brtc	.-4      	; 0x70c <__divmodhi4_exit>
 710:	90 95       	com	r25
 712:	81 95       	neg	r24
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	08 95       	ret

00000718 <__udivmodhi4>:
 718:	aa 1b       	sub	r26, r26
 71a:	bb 1b       	sub	r27, r27
 71c:	51 e1       	ldi	r21, 0x11	; 17
 71e:	07 c0       	rjmp	.+14     	; 0x72e <__udivmodhi4_ep>

00000720 <__udivmodhi4_loop>:
 720:	aa 1f       	adc	r26, r26
 722:	bb 1f       	adc	r27, r27
 724:	a6 17       	cp	r26, r22
 726:	b7 07       	cpc	r27, r23
 728:	10 f0       	brcs	.+4      	; 0x72e <__udivmodhi4_ep>
 72a:	a6 1b       	sub	r26, r22
 72c:	b7 0b       	sbc	r27, r23

0000072e <__udivmodhi4_ep>:
 72e:	88 1f       	adc	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	5a 95       	dec	r21
 734:	a9 f7       	brne	.-22     	; 0x720 <__udivmodhi4_loop>
 736:	80 95       	com	r24
 738:	90 95       	com	r25
 73a:	bc 01       	movw	r22, r24
 73c:	cd 01       	movw	r24, r26
 73e:	08 95       	ret

00000740 <strcmp>:
 740:	fb 01       	movw	r30, r22
 742:	dc 01       	movw	r26, r24
 744:	8d 91       	ld	r24, X+
 746:	01 90       	ld	r0, Z+
 748:	80 19       	sub	r24, r0
 74a:	01 10       	cpse	r0, r1
 74c:	d9 f3       	breq	.-10     	; 0x744 <strcmp+0x4>
 74e:	99 0b       	sbc	r25, r25
 750:	08 95       	ret

00000752 <strcpy>:
 752:	fb 01       	movw	r30, r22
 754:	dc 01       	movw	r26, r24
 756:	01 90       	ld	r0, Z+
 758:	0d 92       	st	X+, r0
 75a:	00 20       	and	r0, r0
 75c:	e1 f7       	brne	.-8      	; 0x756 <strcpy+0x4>
 75e:	08 95       	ret

00000760 <vsnprintf>:
 760:	0f 93       	push	r16
 762:	1f 93       	push	r17
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
 76c:	2e 97       	sbiw	r28, 0x0e	; 14
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	f8 94       	cli
 772:	de bf       	out	0x3e, r29	; 62
 774:	0f be       	out	0x3f, r0	; 63
 776:	cd bf       	out	0x3d, r28	; 61
 778:	8c 01       	movw	r16, r24
 77a:	86 e0       	ldi	r24, 0x06	; 6
 77c:	8c 83       	std	Y+4, r24	; 0x04
 77e:	1a 83       	std	Y+2, r17	; 0x02
 780:	09 83       	std	Y+1, r16	; 0x01
 782:	77 ff       	sbrs	r23, 7
 784:	02 c0       	rjmp	.+4      	; 0x78a <vsnprintf+0x2a>
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	70 e8       	ldi	r23, 0x80	; 128
 78a:	61 50       	subi	r22, 0x01	; 1
 78c:	70 40       	sbci	r23, 0x00	; 0
 78e:	7e 83       	std	Y+6, r23	; 0x06
 790:	6d 83       	std	Y+5, r22	; 0x05
 792:	ce 01       	movw	r24, r28
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	ba 01       	movw	r22, r20
 798:	a9 01       	movw	r20, r18
 79a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <vfprintf>
 79e:	4d 81       	ldd	r20, Y+5	; 0x05
 7a0:	5e 81       	ldd	r21, Y+6	; 0x06
 7a2:	57 fd       	sbrc	r21, 7
 7a4:	0a c0       	rjmp	.+20     	; 0x7ba <vsnprintf+0x5a>
 7a6:	2f 81       	ldd	r18, Y+7	; 0x07
 7a8:	38 85       	ldd	r19, Y+8	; 0x08
 7aa:	42 17       	cp	r20, r18
 7ac:	53 07       	cpc	r21, r19
 7ae:	0c f4       	brge	.+2      	; 0x7b2 <vsnprintf+0x52>
 7b0:	9a 01       	movw	r18, r20
 7b2:	02 0f       	add	r16, r18
 7b4:	13 1f       	adc	r17, r19
 7b6:	f8 01       	movw	r30, r16
 7b8:	10 82       	st	Z, r1
 7ba:	2e 96       	adiw	r28, 0x0e	; 14
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	f8 94       	cli
 7c0:	de bf       	out	0x3e, r29	; 62
 7c2:	0f be       	out	0x3f, r0	; 63
 7c4:	cd bf       	out	0x3d, r28	; 61
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	1f 91       	pop	r17
 7cc:	0f 91       	pop	r16
 7ce:	08 95       	ret

000007d0 <vfprintf>:
 7d0:	2f 92       	push	r2
 7d2:	3f 92       	push	r3
 7d4:	4f 92       	push	r4
 7d6:	5f 92       	push	r5
 7d8:	6f 92       	push	r6
 7da:	7f 92       	push	r7
 7dc:	8f 92       	push	r8
 7de:	9f 92       	push	r9
 7e0:	af 92       	push	r10
 7e2:	bf 92       	push	r11
 7e4:	cf 92       	push	r12
 7e6:	df 92       	push	r13
 7e8:	ef 92       	push	r14
 7ea:	ff 92       	push	r15
 7ec:	0f 93       	push	r16
 7ee:	1f 93       	push	r17
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
 7f4:	cd b7       	in	r28, 0x3d	; 61
 7f6:	de b7       	in	r29, 0x3e	; 62
 7f8:	2d 97       	sbiw	r28, 0x0d	; 13
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	f8 94       	cli
 7fe:	de bf       	out	0x3e, r29	; 62
 800:	0f be       	out	0x3f, r0	; 63
 802:	cd bf       	out	0x3d, r28	; 61
 804:	3c 01       	movw	r6, r24
 806:	7d 87       	std	Y+13, r23	; 0x0d
 808:	6c 87       	std	Y+12, r22	; 0x0c
 80a:	5a 01       	movw	r10, r20
 80c:	fc 01       	movw	r30, r24
 80e:	17 82       	std	Z+7, r1	; 0x07
 810:	16 82       	std	Z+6, r1	; 0x06
 812:	83 81       	ldd	r24, Z+3	; 0x03
 814:	81 ff       	sbrs	r24, 1
 816:	c8 c1       	rjmp	.+912    	; 0xba8 <vfprintf+0x3d8>
 818:	2e 01       	movw	r4, r28
 81a:	08 94       	sec
 81c:	41 1c       	adc	r4, r1
 81e:	51 1c       	adc	r5, r1
 820:	f3 01       	movw	r30, r6
 822:	93 81       	ldd	r25, Z+3	; 0x03
 824:	ec 85       	ldd	r30, Y+12	; 0x0c
 826:	fd 85       	ldd	r31, Y+13	; 0x0d
 828:	93 fd       	sbrc	r25, 3
 82a:	85 91       	lpm	r24, Z+
 82c:	93 ff       	sbrs	r25, 3
 82e:	81 91       	ld	r24, Z+
 830:	fd 87       	std	Y+13, r31	; 0x0d
 832:	ec 87       	std	Y+12, r30	; 0x0c
 834:	88 23       	and	r24, r24
 836:	09 f4       	brne	.+2      	; 0x83a <vfprintf+0x6a>
 838:	b3 c1       	rjmp	.+870    	; 0xba0 <vfprintf+0x3d0>
 83a:	85 32       	cpi	r24, 0x25	; 37
 83c:	41 f4       	brne	.+16     	; 0x84e <vfprintf+0x7e>
 83e:	93 fd       	sbrc	r25, 3
 840:	85 91       	lpm	r24, Z+
 842:	93 ff       	sbrs	r25, 3
 844:	81 91       	ld	r24, Z+
 846:	fd 87       	std	Y+13, r31	; 0x0d
 848:	ec 87       	std	Y+12, r30	; 0x0c
 84a:	85 32       	cpi	r24, 0x25	; 37
 84c:	29 f4       	brne	.+10     	; 0x858 <vfprintf+0x88>
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	b3 01       	movw	r22, r6
 852:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 856:	e4 cf       	rjmp	.-56     	; 0x820 <vfprintf+0x50>
 858:	ff 24       	eor	r15, r15
 85a:	ee 24       	eor	r14, r14
 85c:	10 e0       	ldi	r17, 0x00	; 0
 85e:	10 32       	cpi	r17, 0x20	; 32
 860:	b0 f4       	brcc	.+44     	; 0x88e <vfprintf+0xbe>
 862:	8b 32       	cpi	r24, 0x2B	; 43
 864:	69 f0       	breq	.+26     	; 0x880 <vfprintf+0xb0>
 866:	8c 32       	cpi	r24, 0x2C	; 44
 868:	28 f4       	brcc	.+10     	; 0x874 <vfprintf+0xa4>
 86a:	80 32       	cpi	r24, 0x20	; 32
 86c:	51 f0       	breq	.+20     	; 0x882 <vfprintf+0xb2>
 86e:	83 32       	cpi	r24, 0x23	; 35
 870:	71 f4       	brne	.+28     	; 0x88e <vfprintf+0xbe>
 872:	0b c0       	rjmp	.+22     	; 0x88a <vfprintf+0xba>
 874:	8d 32       	cpi	r24, 0x2D	; 45
 876:	39 f0       	breq	.+14     	; 0x886 <vfprintf+0xb6>
 878:	80 33       	cpi	r24, 0x30	; 48
 87a:	49 f4       	brne	.+18     	; 0x88e <vfprintf+0xbe>
 87c:	11 60       	ori	r17, 0x01	; 1
 87e:	2c c0       	rjmp	.+88     	; 0x8d8 <vfprintf+0x108>
 880:	12 60       	ori	r17, 0x02	; 2
 882:	14 60       	ori	r17, 0x04	; 4
 884:	29 c0       	rjmp	.+82     	; 0x8d8 <vfprintf+0x108>
 886:	18 60       	ori	r17, 0x08	; 8
 888:	27 c0       	rjmp	.+78     	; 0x8d8 <vfprintf+0x108>
 88a:	10 61       	ori	r17, 0x10	; 16
 88c:	25 c0       	rjmp	.+74     	; 0x8d8 <vfprintf+0x108>
 88e:	17 fd       	sbrc	r17, 7
 890:	2e c0       	rjmp	.+92     	; 0x8ee <vfprintf+0x11e>
 892:	28 2f       	mov	r18, r24
 894:	20 53       	subi	r18, 0x30	; 48
 896:	2a 30       	cpi	r18, 0x0A	; 10
 898:	98 f4       	brcc	.+38     	; 0x8c0 <vfprintf+0xf0>
 89a:	16 ff       	sbrs	r17, 6
 89c:	08 c0       	rjmp	.+16     	; 0x8ae <vfprintf+0xde>
 89e:	8f 2d       	mov	r24, r15
 8a0:	88 0f       	add	r24, r24
 8a2:	f8 2e       	mov	r15, r24
 8a4:	ff 0c       	add	r15, r15
 8a6:	ff 0c       	add	r15, r15
 8a8:	f8 0e       	add	r15, r24
 8aa:	f2 0e       	add	r15, r18
 8ac:	15 c0       	rjmp	.+42     	; 0x8d8 <vfprintf+0x108>
 8ae:	8e 2d       	mov	r24, r14
 8b0:	88 0f       	add	r24, r24
 8b2:	e8 2e       	mov	r14, r24
 8b4:	ee 0c       	add	r14, r14
 8b6:	ee 0c       	add	r14, r14
 8b8:	e8 0e       	add	r14, r24
 8ba:	e2 0e       	add	r14, r18
 8bc:	10 62       	ori	r17, 0x20	; 32
 8be:	0c c0       	rjmp	.+24     	; 0x8d8 <vfprintf+0x108>
 8c0:	8e 32       	cpi	r24, 0x2E	; 46
 8c2:	21 f4       	brne	.+8      	; 0x8cc <vfprintf+0xfc>
 8c4:	16 fd       	sbrc	r17, 6
 8c6:	6c c1       	rjmp	.+728    	; 0xba0 <vfprintf+0x3d0>
 8c8:	10 64       	ori	r17, 0x40	; 64
 8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <vfprintf+0x108>
 8cc:	8c 36       	cpi	r24, 0x6C	; 108
 8ce:	11 f4       	brne	.+4      	; 0x8d4 <vfprintf+0x104>
 8d0:	10 68       	ori	r17, 0x80	; 128
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <vfprintf+0x108>
 8d4:	88 36       	cpi	r24, 0x68	; 104
 8d6:	59 f4       	brne	.+22     	; 0x8ee <vfprintf+0x11e>
 8d8:	ec 85       	ldd	r30, Y+12	; 0x0c
 8da:	fd 85       	ldd	r31, Y+13	; 0x0d
 8dc:	93 fd       	sbrc	r25, 3
 8de:	85 91       	lpm	r24, Z+
 8e0:	93 ff       	sbrs	r25, 3
 8e2:	81 91       	ld	r24, Z+
 8e4:	fd 87       	std	Y+13, r31	; 0x0d
 8e6:	ec 87       	std	Y+12, r30	; 0x0c
 8e8:	88 23       	and	r24, r24
 8ea:	09 f0       	breq	.+2      	; 0x8ee <vfprintf+0x11e>
 8ec:	b8 cf       	rjmp	.-144    	; 0x85e <vfprintf+0x8e>
 8ee:	98 2f       	mov	r25, r24
 8f0:	95 54       	subi	r25, 0x45	; 69
 8f2:	93 30       	cpi	r25, 0x03	; 3
 8f4:	18 f0       	brcs	.+6      	; 0x8fc <vfprintf+0x12c>
 8f6:	90 52       	subi	r25, 0x20	; 32
 8f8:	93 30       	cpi	r25, 0x03	; 3
 8fa:	38 f4       	brcc	.+14     	; 0x90a <vfprintf+0x13a>
 8fc:	24 e0       	ldi	r18, 0x04	; 4
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	a2 0e       	add	r10, r18
 902:	b3 1e       	adc	r11, r19
 904:	3f e3       	ldi	r19, 0x3F	; 63
 906:	39 83       	std	Y+1, r19	; 0x01
 908:	0f c0       	rjmp	.+30     	; 0x928 <vfprintf+0x158>
 90a:	83 36       	cpi	r24, 0x63	; 99
 90c:	31 f0       	breq	.+12     	; 0x91a <vfprintf+0x14a>
 90e:	83 37       	cpi	r24, 0x73	; 115
 910:	81 f0       	breq	.+32     	; 0x932 <vfprintf+0x162>
 912:	83 35       	cpi	r24, 0x53	; 83
 914:	09 f0       	breq	.+2      	; 0x918 <vfprintf+0x148>
 916:	5a c0       	rjmp	.+180    	; 0x9cc <vfprintf+0x1fc>
 918:	22 c0       	rjmp	.+68     	; 0x95e <vfprintf+0x18e>
 91a:	f5 01       	movw	r30, r10
 91c:	80 81       	ld	r24, Z
 91e:	89 83       	std	Y+1, r24	; 0x01
 920:	22 e0       	ldi	r18, 0x02	; 2
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	a2 0e       	add	r10, r18
 926:	b3 1e       	adc	r11, r19
 928:	21 e0       	ldi	r18, 0x01	; 1
 92a:	c2 2e       	mov	r12, r18
 92c:	d1 2c       	mov	r13, r1
 92e:	42 01       	movw	r8, r4
 930:	14 c0       	rjmp	.+40     	; 0x95a <vfprintf+0x18a>
 932:	92 e0       	ldi	r25, 0x02	; 2
 934:	29 2e       	mov	r2, r25
 936:	31 2c       	mov	r3, r1
 938:	2a 0c       	add	r2, r10
 93a:	3b 1c       	adc	r3, r11
 93c:	f5 01       	movw	r30, r10
 93e:	80 80       	ld	r8, Z
 940:	91 80       	ldd	r9, Z+1	; 0x01
 942:	16 ff       	sbrs	r17, 6
 944:	03 c0       	rjmp	.+6      	; 0x94c <vfprintf+0x17c>
 946:	6f 2d       	mov	r22, r15
 948:	70 e0       	ldi	r23, 0x00	; 0
 94a:	02 c0       	rjmp	.+4      	; 0x950 <vfprintf+0x180>
 94c:	6f ef       	ldi	r22, 0xFF	; 255
 94e:	7f ef       	ldi	r23, 0xFF	; 255
 950:	c4 01       	movw	r24, r8
 952:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <strnlen>
 956:	6c 01       	movw	r12, r24
 958:	51 01       	movw	r10, r2
 95a:	1f 77       	andi	r17, 0x7F	; 127
 95c:	15 c0       	rjmp	.+42     	; 0x988 <vfprintf+0x1b8>
 95e:	82 e0       	ldi	r24, 0x02	; 2
 960:	28 2e       	mov	r2, r24
 962:	31 2c       	mov	r3, r1
 964:	2a 0c       	add	r2, r10
 966:	3b 1c       	adc	r3, r11
 968:	f5 01       	movw	r30, r10
 96a:	80 80       	ld	r8, Z
 96c:	91 80       	ldd	r9, Z+1	; 0x01
 96e:	16 ff       	sbrs	r17, 6
 970:	03 c0       	rjmp	.+6      	; 0x978 <vfprintf+0x1a8>
 972:	6f 2d       	mov	r22, r15
 974:	70 e0       	ldi	r23, 0x00	; 0
 976:	02 c0       	rjmp	.+4      	; 0x97c <vfprintf+0x1ac>
 978:	6f ef       	ldi	r22, 0xFF	; 255
 97a:	7f ef       	ldi	r23, 0xFF	; 255
 97c:	c4 01       	movw	r24, r8
 97e:	0e 94 ef 05 	call	0xbde	; 0xbde <strnlen_P>
 982:	6c 01       	movw	r12, r24
 984:	10 68       	ori	r17, 0x80	; 128
 986:	51 01       	movw	r10, r2
 988:	13 fd       	sbrc	r17, 3
 98a:	1c c0       	rjmp	.+56     	; 0x9c4 <vfprintf+0x1f4>
 98c:	06 c0       	rjmp	.+12     	; 0x99a <vfprintf+0x1ca>
 98e:	80 e2       	ldi	r24, 0x20	; 32
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	b3 01       	movw	r22, r6
 994:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 998:	ea 94       	dec	r14
 99a:	8e 2d       	mov	r24, r14
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	c8 16       	cp	r12, r24
 9a0:	d9 06       	cpc	r13, r25
 9a2:	a8 f3       	brcs	.-22     	; 0x98e <vfprintf+0x1be>
 9a4:	0f c0       	rjmp	.+30     	; 0x9c4 <vfprintf+0x1f4>
 9a6:	f4 01       	movw	r30, r8
 9a8:	17 fd       	sbrc	r17, 7
 9aa:	85 91       	lpm	r24, Z+
 9ac:	17 ff       	sbrs	r17, 7
 9ae:	81 91       	ld	r24, Z+
 9b0:	4f 01       	movw	r8, r30
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	b3 01       	movw	r22, r6
 9b6:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 9ba:	e1 10       	cpse	r14, r1
 9bc:	ea 94       	dec	r14
 9be:	08 94       	sec
 9c0:	c1 08       	sbc	r12, r1
 9c2:	d1 08       	sbc	r13, r1
 9c4:	c1 14       	cp	r12, r1
 9c6:	d1 04       	cpc	r13, r1
 9c8:	71 f7       	brne	.-36     	; 0x9a6 <vfprintf+0x1d6>
 9ca:	e7 c0       	rjmp	.+462    	; 0xb9a <vfprintf+0x3ca>
 9cc:	84 36       	cpi	r24, 0x64	; 100
 9ce:	11 f0       	breq	.+4      	; 0x9d4 <vfprintf+0x204>
 9d0:	89 36       	cpi	r24, 0x69	; 105
 9d2:	51 f5       	brne	.+84     	; 0xa28 <vfprintf+0x258>
 9d4:	f5 01       	movw	r30, r10
 9d6:	17 ff       	sbrs	r17, 7
 9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <vfprintf+0x218>
 9da:	80 81       	ld	r24, Z
 9dc:	91 81       	ldd	r25, Z+1	; 0x01
 9de:	a2 81       	ldd	r26, Z+2	; 0x02
 9e0:	b3 81       	ldd	r27, Z+3	; 0x03
 9e2:	24 e0       	ldi	r18, 0x04	; 4
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <vfprintf+0x228>
 9e8:	80 81       	ld	r24, Z
 9ea:	91 81       	ldd	r25, Z+1	; 0x01
 9ec:	aa 27       	eor	r26, r26
 9ee:	97 fd       	sbrc	r25, 7
 9f0:	a0 95       	com	r26
 9f2:	ba 2f       	mov	r27, r26
 9f4:	22 e0       	ldi	r18, 0x02	; 2
 9f6:	30 e0       	ldi	r19, 0x00	; 0
 9f8:	a2 0e       	add	r10, r18
 9fa:	b3 1e       	adc	r11, r19
 9fc:	01 2f       	mov	r16, r17
 9fe:	0f 76       	andi	r16, 0x6F	; 111
 a00:	b7 ff       	sbrs	r27, 7
 a02:	08 c0       	rjmp	.+16     	; 0xa14 <vfprintf+0x244>
 a04:	b0 95       	com	r27
 a06:	a0 95       	com	r26
 a08:	90 95       	com	r25
 a0a:	81 95       	neg	r24
 a0c:	9f 4f       	sbci	r25, 0xFF	; 255
 a0e:	af 4f       	sbci	r26, 0xFF	; 255
 a10:	bf 4f       	sbci	r27, 0xFF	; 255
 a12:	00 68       	ori	r16, 0x80	; 128
 a14:	bc 01       	movw	r22, r24
 a16:	cd 01       	movw	r24, r26
 a18:	a2 01       	movw	r20, r4
 a1a:	2a e0       	ldi	r18, 0x0A	; 10
 a1c:	30 e0       	ldi	r19, 0x00	; 0
 a1e:	0e 94 31 06 	call	0xc62	; 0xc62 <__ultoa_invert>
 a22:	d8 2e       	mov	r13, r24
 a24:	d4 18       	sub	r13, r4
 a26:	3f c0       	rjmp	.+126    	; 0xaa6 <vfprintf+0x2d6>
 a28:	85 37       	cpi	r24, 0x75	; 117
 a2a:	21 f4       	brne	.+8      	; 0xa34 <vfprintf+0x264>
 a2c:	1f 7e       	andi	r17, 0xEF	; 239
 a2e:	2a e0       	ldi	r18, 0x0A	; 10
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	20 c0       	rjmp	.+64     	; 0xa74 <vfprintf+0x2a4>
 a34:	19 7f       	andi	r17, 0xF9	; 249
 a36:	8f 36       	cpi	r24, 0x6F	; 111
 a38:	a9 f0       	breq	.+42     	; 0xa64 <vfprintf+0x294>
 a3a:	80 37       	cpi	r24, 0x70	; 112
 a3c:	20 f4       	brcc	.+8      	; 0xa46 <vfprintf+0x276>
 a3e:	88 35       	cpi	r24, 0x58	; 88
 a40:	09 f0       	breq	.+2      	; 0xa44 <vfprintf+0x274>
 a42:	ae c0       	rjmp	.+348    	; 0xba0 <vfprintf+0x3d0>
 a44:	0b c0       	rjmp	.+22     	; 0xa5c <vfprintf+0x28c>
 a46:	80 37       	cpi	r24, 0x70	; 112
 a48:	21 f0       	breq	.+8      	; 0xa52 <vfprintf+0x282>
 a4a:	88 37       	cpi	r24, 0x78	; 120
 a4c:	09 f0       	breq	.+2      	; 0xa50 <vfprintf+0x280>
 a4e:	a8 c0       	rjmp	.+336    	; 0xba0 <vfprintf+0x3d0>
 a50:	01 c0       	rjmp	.+2      	; 0xa54 <vfprintf+0x284>
 a52:	10 61       	ori	r17, 0x10	; 16
 a54:	14 ff       	sbrs	r17, 4
 a56:	09 c0       	rjmp	.+18     	; 0xa6a <vfprintf+0x29a>
 a58:	14 60       	ori	r17, 0x04	; 4
 a5a:	07 c0       	rjmp	.+14     	; 0xa6a <vfprintf+0x29a>
 a5c:	14 ff       	sbrs	r17, 4
 a5e:	08 c0       	rjmp	.+16     	; 0xa70 <vfprintf+0x2a0>
 a60:	16 60       	ori	r17, 0x06	; 6
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <vfprintf+0x2a0>
 a64:	28 e0       	ldi	r18, 0x08	; 8
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	05 c0       	rjmp	.+10     	; 0xa74 <vfprintf+0x2a4>
 a6a:	20 e1       	ldi	r18, 0x10	; 16
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <vfprintf+0x2a4>
 a70:	20 e1       	ldi	r18, 0x10	; 16
 a72:	32 e0       	ldi	r19, 0x02	; 2
 a74:	f5 01       	movw	r30, r10
 a76:	17 ff       	sbrs	r17, 7
 a78:	07 c0       	rjmp	.+14     	; 0xa88 <vfprintf+0x2b8>
 a7a:	60 81       	ld	r22, Z
 a7c:	71 81       	ldd	r23, Z+1	; 0x01
 a7e:	82 81       	ldd	r24, Z+2	; 0x02
 a80:	93 81       	ldd	r25, Z+3	; 0x03
 a82:	44 e0       	ldi	r20, 0x04	; 4
 a84:	50 e0       	ldi	r21, 0x00	; 0
 a86:	06 c0       	rjmp	.+12     	; 0xa94 <vfprintf+0x2c4>
 a88:	60 81       	ld	r22, Z
 a8a:	71 81       	ldd	r23, Z+1	; 0x01
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	42 e0       	ldi	r20, 0x02	; 2
 a92:	50 e0       	ldi	r21, 0x00	; 0
 a94:	a4 0e       	add	r10, r20
 a96:	b5 1e       	adc	r11, r21
 a98:	a2 01       	movw	r20, r4
 a9a:	0e 94 31 06 	call	0xc62	; 0xc62 <__ultoa_invert>
 a9e:	d8 2e       	mov	r13, r24
 aa0:	d4 18       	sub	r13, r4
 aa2:	01 2f       	mov	r16, r17
 aa4:	0f 77       	andi	r16, 0x7F	; 127
 aa6:	06 ff       	sbrs	r16, 6
 aa8:	09 c0       	rjmp	.+18     	; 0xabc <vfprintf+0x2ec>
 aaa:	0e 7f       	andi	r16, 0xFE	; 254
 aac:	df 14       	cp	r13, r15
 aae:	30 f4       	brcc	.+12     	; 0xabc <vfprintf+0x2ec>
 ab0:	04 ff       	sbrs	r16, 4
 ab2:	06 c0       	rjmp	.+12     	; 0xac0 <vfprintf+0x2f0>
 ab4:	02 fd       	sbrc	r16, 2
 ab6:	04 c0       	rjmp	.+8      	; 0xac0 <vfprintf+0x2f0>
 ab8:	0f 7e       	andi	r16, 0xEF	; 239
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <vfprintf+0x2f0>
 abc:	1d 2d       	mov	r17, r13
 abe:	01 c0       	rjmp	.+2      	; 0xac2 <vfprintf+0x2f2>
 ac0:	1f 2d       	mov	r17, r15
 ac2:	80 2f       	mov	r24, r16
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	04 ff       	sbrs	r16, 4
 ac8:	0c c0       	rjmp	.+24     	; 0xae2 <vfprintf+0x312>
 aca:	fe 01       	movw	r30, r28
 acc:	ed 0d       	add	r30, r13
 ace:	f1 1d       	adc	r31, r1
 ad0:	20 81       	ld	r18, Z
 ad2:	20 33       	cpi	r18, 0x30	; 48
 ad4:	11 f4       	brne	.+4      	; 0xada <vfprintf+0x30a>
 ad6:	09 7e       	andi	r16, 0xE9	; 233
 ad8:	09 c0       	rjmp	.+18     	; 0xaec <vfprintf+0x31c>
 ada:	02 ff       	sbrs	r16, 2
 adc:	06 c0       	rjmp	.+12     	; 0xaea <vfprintf+0x31a>
 ade:	1e 5f       	subi	r17, 0xFE	; 254
 ae0:	05 c0       	rjmp	.+10     	; 0xaec <vfprintf+0x31c>
 ae2:	86 78       	andi	r24, 0x86	; 134
 ae4:	90 70       	andi	r25, 0x00	; 0
 ae6:	00 97       	sbiw	r24, 0x00	; 0
 ae8:	09 f0       	breq	.+2      	; 0xaec <vfprintf+0x31c>
 aea:	1f 5f       	subi	r17, 0xFF	; 255
 aec:	80 2e       	mov	r8, r16
 aee:	99 24       	eor	r9, r9
 af0:	03 fd       	sbrc	r16, 3
 af2:	12 c0       	rjmp	.+36     	; 0xb18 <vfprintf+0x348>
 af4:	00 ff       	sbrs	r16, 0
 af6:	0d c0       	rjmp	.+26     	; 0xb12 <vfprintf+0x342>
 af8:	fd 2c       	mov	r15, r13
 afa:	1e 15       	cp	r17, r14
 afc:	50 f4       	brcc	.+20     	; 0xb12 <vfprintf+0x342>
 afe:	fe 0c       	add	r15, r14
 b00:	f1 1a       	sub	r15, r17
 b02:	1e 2d       	mov	r17, r14
 b04:	06 c0       	rjmp	.+12     	; 0xb12 <vfprintf+0x342>
 b06:	80 e2       	ldi	r24, 0x20	; 32
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	b3 01       	movw	r22, r6
 b0c:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 b10:	1f 5f       	subi	r17, 0xFF	; 255
 b12:	1e 15       	cp	r17, r14
 b14:	c0 f3       	brcs	.-16     	; 0xb06 <vfprintf+0x336>
 b16:	04 c0       	rjmp	.+8      	; 0xb20 <vfprintf+0x350>
 b18:	1e 15       	cp	r17, r14
 b1a:	10 f4       	brcc	.+4      	; 0xb20 <vfprintf+0x350>
 b1c:	e1 1a       	sub	r14, r17
 b1e:	01 c0       	rjmp	.+2      	; 0xb22 <vfprintf+0x352>
 b20:	ee 24       	eor	r14, r14
 b22:	84 fe       	sbrs	r8, 4
 b24:	0f c0       	rjmp	.+30     	; 0xb44 <vfprintf+0x374>
 b26:	80 e3       	ldi	r24, 0x30	; 48
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	b3 01       	movw	r22, r6
 b2c:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 b30:	82 fe       	sbrs	r8, 2
 b32:	1f c0       	rjmp	.+62     	; 0xb72 <vfprintf+0x3a2>
 b34:	81 fe       	sbrs	r8, 1
 b36:	03 c0       	rjmp	.+6      	; 0xb3e <vfprintf+0x36e>
 b38:	88 e5       	ldi	r24, 0x58	; 88
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	10 c0       	rjmp	.+32     	; 0xb5e <vfprintf+0x38e>
 b3e:	88 e7       	ldi	r24, 0x78	; 120
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	0d c0       	rjmp	.+26     	; 0xb5e <vfprintf+0x38e>
 b44:	c4 01       	movw	r24, r8
 b46:	86 78       	andi	r24, 0x86	; 134
 b48:	90 70       	andi	r25, 0x00	; 0
 b4a:	00 97       	sbiw	r24, 0x00	; 0
 b4c:	91 f0       	breq	.+36     	; 0xb72 <vfprintf+0x3a2>
 b4e:	81 fc       	sbrc	r8, 1
 b50:	02 c0       	rjmp	.+4      	; 0xb56 <vfprintf+0x386>
 b52:	80 e2       	ldi	r24, 0x20	; 32
 b54:	01 c0       	rjmp	.+2      	; 0xb58 <vfprintf+0x388>
 b56:	8b e2       	ldi	r24, 0x2B	; 43
 b58:	07 fd       	sbrc	r16, 7
 b5a:	8d e2       	ldi	r24, 0x2D	; 45
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	b3 01       	movw	r22, r6
 b60:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 b64:	06 c0       	rjmp	.+12     	; 0xb72 <vfprintf+0x3a2>
 b66:	80 e3       	ldi	r24, 0x30	; 48
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	b3 01       	movw	r22, r6
 b6c:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 b70:	fa 94       	dec	r15
 b72:	df 14       	cp	r13, r15
 b74:	c0 f3       	brcs	.-16     	; 0xb66 <vfprintf+0x396>
 b76:	da 94       	dec	r13
 b78:	f2 01       	movw	r30, r4
 b7a:	ed 0d       	add	r30, r13
 b7c:	f1 1d       	adc	r31, r1
 b7e:	80 81       	ld	r24, Z
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	b3 01       	movw	r22, r6
 b84:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 b88:	dd 20       	and	r13, r13
 b8a:	a9 f7       	brne	.-22     	; 0xb76 <vfprintf+0x3a6>
 b8c:	06 c0       	rjmp	.+12     	; 0xb9a <vfprintf+0x3ca>
 b8e:	80 e2       	ldi	r24, 0x20	; 32
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	b3 01       	movw	r22, r6
 b94:	0e 94 05 06 	call	0xc0a	; 0xc0a <fputc>
 b98:	ea 94       	dec	r14
 b9a:	ee 20       	and	r14, r14
 b9c:	c1 f7       	brne	.-16     	; 0xb8e <vfprintf+0x3be>
 b9e:	40 ce       	rjmp	.-896    	; 0x820 <vfprintf+0x50>
 ba0:	f3 01       	movw	r30, r6
 ba2:	86 81       	ldd	r24, Z+6	; 0x06
 ba4:	97 81       	ldd	r25, Z+7	; 0x07
 ba6:	02 c0       	rjmp	.+4      	; 0xbac <vfprintf+0x3dc>
 ba8:	8f ef       	ldi	r24, 0xFF	; 255
 baa:	9f ef       	ldi	r25, 0xFF	; 255
 bac:	2d 96       	adiw	r28, 0x0d	; 13
 bae:	0f b6       	in	r0, 0x3f	; 63
 bb0:	f8 94       	cli
 bb2:	de bf       	out	0x3e, r29	; 62
 bb4:	0f be       	out	0x3f, r0	; 63
 bb6:	cd bf       	out	0x3d, r28	; 61
 bb8:	df 91       	pop	r29
 bba:	cf 91       	pop	r28
 bbc:	1f 91       	pop	r17
 bbe:	0f 91       	pop	r16
 bc0:	ff 90       	pop	r15
 bc2:	ef 90       	pop	r14
 bc4:	df 90       	pop	r13
 bc6:	cf 90       	pop	r12
 bc8:	bf 90       	pop	r11
 bca:	af 90       	pop	r10
 bcc:	9f 90       	pop	r9
 bce:	8f 90       	pop	r8
 bd0:	7f 90       	pop	r7
 bd2:	6f 90       	pop	r6
 bd4:	5f 90       	pop	r5
 bd6:	4f 90       	pop	r4
 bd8:	3f 90       	pop	r3
 bda:	2f 90       	pop	r2
 bdc:	08 95       	ret

00000bde <strnlen_P>:
 bde:	fc 01       	movw	r30, r24
 be0:	05 90       	lpm	r0, Z+
 be2:	61 50       	subi	r22, 0x01	; 1
 be4:	70 40       	sbci	r23, 0x00	; 0
 be6:	01 10       	cpse	r0, r1
 be8:	d8 f7       	brcc	.-10     	; 0xbe0 <strnlen_P+0x2>
 bea:	80 95       	com	r24
 bec:	90 95       	com	r25
 bee:	8e 0f       	add	r24, r30
 bf0:	9f 1f       	adc	r25, r31
 bf2:	08 95       	ret

00000bf4 <strnlen>:
 bf4:	fc 01       	movw	r30, r24
 bf6:	61 50       	subi	r22, 0x01	; 1
 bf8:	70 40       	sbci	r23, 0x00	; 0
 bfa:	01 90       	ld	r0, Z+
 bfc:	01 10       	cpse	r0, r1
 bfe:	d8 f7       	brcc	.-10     	; 0xbf6 <strnlen+0x2>
 c00:	80 95       	com	r24
 c02:	90 95       	com	r25
 c04:	8e 0f       	add	r24, r30
 c06:	9f 1f       	adc	r25, r31
 c08:	08 95       	ret

00000c0a <fputc>:
 c0a:	0f 93       	push	r16
 c0c:	1f 93       	push	r17
 c0e:	cf 93       	push	r28
 c10:	df 93       	push	r29
 c12:	8c 01       	movw	r16, r24
 c14:	eb 01       	movw	r28, r22
 c16:	8b 81       	ldd	r24, Y+3	; 0x03
 c18:	81 ff       	sbrs	r24, 1
 c1a:	1b c0       	rjmp	.+54     	; 0xc52 <fputc+0x48>
 c1c:	82 ff       	sbrs	r24, 2
 c1e:	0d c0       	rjmp	.+26     	; 0xc3a <fputc+0x30>
 c20:	2e 81       	ldd	r18, Y+6	; 0x06
 c22:	3f 81       	ldd	r19, Y+7	; 0x07
 c24:	8c 81       	ldd	r24, Y+4	; 0x04
 c26:	9d 81       	ldd	r25, Y+5	; 0x05
 c28:	28 17       	cp	r18, r24
 c2a:	39 07       	cpc	r19, r25
 c2c:	64 f4       	brge	.+24     	; 0xc46 <fputc+0x3c>
 c2e:	e8 81       	ld	r30, Y
 c30:	f9 81       	ldd	r31, Y+1	; 0x01
 c32:	01 93       	st	Z+, r16
 c34:	f9 83       	std	Y+1, r31	; 0x01
 c36:	e8 83       	st	Y, r30
 c38:	06 c0       	rjmp	.+12     	; 0xc46 <fputc+0x3c>
 c3a:	e8 85       	ldd	r30, Y+8	; 0x08
 c3c:	f9 85       	ldd	r31, Y+9	; 0x09
 c3e:	80 2f       	mov	r24, r16
 c40:	09 95       	icall
 c42:	00 97       	sbiw	r24, 0x00	; 0
 c44:	31 f4       	brne	.+12     	; 0xc52 <fputc+0x48>
 c46:	8e 81       	ldd	r24, Y+6	; 0x06
 c48:	9f 81       	ldd	r25, Y+7	; 0x07
 c4a:	01 96       	adiw	r24, 0x01	; 1
 c4c:	9f 83       	std	Y+7, r25	; 0x07
 c4e:	8e 83       	std	Y+6, r24	; 0x06
 c50:	02 c0       	rjmp	.+4      	; 0xc56 <fputc+0x4c>
 c52:	0f ef       	ldi	r16, 0xFF	; 255
 c54:	1f ef       	ldi	r17, 0xFF	; 255
 c56:	c8 01       	movw	r24, r16
 c58:	df 91       	pop	r29
 c5a:	cf 91       	pop	r28
 c5c:	1f 91       	pop	r17
 c5e:	0f 91       	pop	r16
 c60:	08 95       	ret

00000c62 <__ultoa_invert>:
 c62:	fa 01       	movw	r30, r20
 c64:	aa 27       	eor	r26, r26
 c66:	28 30       	cpi	r18, 0x08	; 8
 c68:	51 f1       	breq	.+84     	; 0xcbe <__ultoa_invert+0x5c>
 c6a:	20 31       	cpi	r18, 0x10	; 16
 c6c:	81 f1       	breq	.+96     	; 0xcce <__ultoa_invert+0x6c>
 c6e:	e8 94       	clt
 c70:	6f 93       	push	r22
 c72:	6e 7f       	andi	r22, 0xFE	; 254
 c74:	6e 5f       	subi	r22, 0xFE	; 254
 c76:	7f 4f       	sbci	r23, 0xFF	; 255
 c78:	8f 4f       	sbci	r24, 0xFF	; 255
 c7a:	9f 4f       	sbci	r25, 0xFF	; 255
 c7c:	af 4f       	sbci	r26, 0xFF	; 255
 c7e:	b1 e0       	ldi	r27, 0x01	; 1
 c80:	3e d0       	rcall	.+124    	; 0xcfe <__ultoa_invert+0x9c>
 c82:	b4 e0       	ldi	r27, 0x04	; 4
 c84:	3c d0       	rcall	.+120    	; 0xcfe <__ultoa_invert+0x9c>
 c86:	67 0f       	add	r22, r23
 c88:	78 1f       	adc	r23, r24
 c8a:	89 1f       	adc	r24, r25
 c8c:	9a 1f       	adc	r25, r26
 c8e:	a1 1d       	adc	r26, r1
 c90:	68 0f       	add	r22, r24
 c92:	79 1f       	adc	r23, r25
 c94:	8a 1f       	adc	r24, r26
 c96:	91 1d       	adc	r25, r1
 c98:	a1 1d       	adc	r26, r1
 c9a:	6a 0f       	add	r22, r26
 c9c:	71 1d       	adc	r23, r1
 c9e:	81 1d       	adc	r24, r1
 ca0:	91 1d       	adc	r25, r1
 ca2:	a1 1d       	adc	r26, r1
 ca4:	20 d0       	rcall	.+64     	; 0xce6 <__ultoa_invert+0x84>
 ca6:	09 f4       	brne	.+2      	; 0xcaa <__ultoa_invert+0x48>
 ca8:	68 94       	set
 caa:	3f 91       	pop	r19
 cac:	2a e0       	ldi	r18, 0x0A	; 10
 cae:	26 9f       	mul	r18, r22
 cb0:	11 24       	eor	r1, r1
 cb2:	30 19       	sub	r19, r0
 cb4:	30 5d       	subi	r19, 0xD0	; 208
 cb6:	31 93       	st	Z+, r19
 cb8:	de f6       	brtc	.-74     	; 0xc70 <__ultoa_invert+0xe>
 cba:	cf 01       	movw	r24, r30
 cbc:	08 95       	ret
 cbe:	46 2f       	mov	r20, r22
 cc0:	47 70       	andi	r20, 0x07	; 7
 cc2:	40 5d       	subi	r20, 0xD0	; 208
 cc4:	41 93       	st	Z+, r20
 cc6:	b3 e0       	ldi	r27, 0x03	; 3
 cc8:	0f d0       	rcall	.+30     	; 0xce8 <__ultoa_invert+0x86>
 cca:	c9 f7       	brne	.-14     	; 0xcbe <__ultoa_invert+0x5c>
 ccc:	f6 cf       	rjmp	.-20     	; 0xcba <__ultoa_invert+0x58>
 cce:	46 2f       	mov	r20, r22
 cd0:	4f 70       	andi	r20, 0x0F	; 15
 cd2:	40 5d       	subi	r20, 0xD0	; 208
 cd4:	4a 33       	cpi	r20, 0x3A	; 58
 cd6:	18 f0       	brcs	.+6      	; 0xcde <__ultoa_invert+0x7c>
 cd8:	49 5d       	subi	r20, 0xD9	; 217
 cda:	31 fd       	sbrc	r19, 1
 cdc:	40 52       	subi	r20, 0x20	; 32
 cde:	41 93       	st	Z+, r20
 ce0:	02 d0       	rcall	.+4      	; 0xce6 <__ultoa_invert+0x84>
 ce2:	a9 f7       	brne	.-22     	; 0xcce <__ultoa_invert+0x6c>
 ce4:	ea cf       	rjmp	.-44     	; 0xcba <__ultoa_invert+0x58>
 ce6:	b4 e0       	ldi	r27, 0x04	; 4
 ce8:	a6 95       	lsr	r26
 cea:	97 95       	ror	r25
 cec:	87 95       	ror	r24
 cee:	77 95       	ror	r23
 cf0:	67 95       	ror	r22
 cf2:	ba 95       	dec	r27
 cf4:	c9 f7       	brne	.-14     	; 0xce8 <__ultoa_invert+0x86>
 cf6:	00 97       	sbiw	r24, 0x00	; 0
 cf8:	61 05       	cpc	r22, r1
 cfa:	71 05       	cpc	r23, r1
 cfc:	08 95       	ret
 cfe:	9b 01       	movw	r18, r22
 d00:	ac 01       	movw	r20, r24
 d02:	0a 2e       	mov	r0, r26
 d04:	06 94       	lsr	r0
 d06:	57 95       	ror	r21
 d08:	47 95       	ror	r20
 d0a:	37 95       	ror	r19
 d0c:	27 95       	ror	r18
 d0e:	ba 95       	dec	r27
 d10:	c9 f7       	brne	.-14     	; 0xd04 <__ultoa_invert+0xa2>
 d12:	62 0f       	add	r22, r18
 d14:	73 1f       	adc	r23, r19
 d16:	84 1f       	adc	r24, r20
 d18:	95 1f       	adc	r25, r21
 d1a:	a0 1d       	adc	r26, r0
 d1c:	08 95       	ret

00000d1e <_exit>:
 d1e:	f8 94       	cli

00000d20 <__stop_program>:
 d20:	ff cf       	rjmp	.-2      	; 0xd20 <__stop_program>
